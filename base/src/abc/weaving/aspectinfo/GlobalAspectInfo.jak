/* abc - The AspectBench Compiler
 * Copyright (C) 2004 Aske Simon Christensen
 * Copyright (C) 2004 Ganesh Sittampalam
 * Copyright (C) 2004 Damien Sereni
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

//package abc.weaving.aspectinfo;

import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Set;
import polyglot.util.InternalCompilerError;

/** All aspect-specific information for an entire program.
 *  @author Aske Simon Christensen
 *  @author Ganesh Sittampalam
 *  @author Damien Sereni
 */
public class GlobalAspectInfo {

    private Set/*<AbcClass>*/ classes = new LinkedHashSet();

    /** Returns the list of classes into which weaving can take place.
     *  @return a list of {@link abc.weaving.aspectinfo.AbcClass} objects.
     */
    public Set getWeavableClasses() {
        return Collections.unmodifiableSet(classes);
    }

    public void addWeavableClass(AbcClass cl) {
        if(classes.contains(cl)) {
            throw new InternalCompilerError("Attempted to add duplicate anonymous weavable class");
        }
        classes.add(cl);
    }

    public void print(java.io.PrintStream p) {
        p.println();
        printSet(p, classes, "Classes:");
    }

    protected void printSet(java.io.PrintStream p, Set s, String name) {
        p.println(name);
        p.println("------------------------------------------".substring(0,name.length()));
        Iterator li = s.iterator();
        while (li.hasNext()) {
            Object elem = li.next();
            p.println(elem);
        }
        p.println();
    }

}
