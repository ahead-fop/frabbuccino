<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<!-- <?xml-stylesheet type="text/xsl" href="abc_options.xsl"  ?>-->
<options>
  <intro>
    <!--
    <p>
You can write some introduction to the options document here
if you want. Use <tt>HTML</tt>-style tags if you need to.
Just be sure to close them and nest them properly.
    </p>
    <p>
The HTML-like stuff will be converted to the equivalent latex for you.
Hopefully, you won't have anything complicated.
    </p>
    -->
  </intro>
  <section>
<!--
I think it's useful to organize the options into sections (for
readability. If that's too hard, just put them all into one section. You
can make up tags for things that you think are useful information. For
example, it might be useful to tag options which are the same as ajc
options with something like <ajc/>
-->
    <name>General Options</name>
    <!-- Give each section a name. The options in the section follow. -->
    <boolopt>
      <alias>h</alias>
      <alias>help</alias>
      <ajc/>
      <short_desc>Print the usage screen for abc.</short_desc>
      <long_desc>
Prints the usage screen for abc.
<!-- Notice that there are two aliases, -h and -help, so
the XML file has two alias tags. -->
      </long_desc>
    </boolopt>
    <boolopt>
      <alias>v</alias>
      <alias>version</alias>
      <ajc/>
      <short_desc>Print the abc version number.</short_desc>
      <long_desc>
	Print the abc version number. The underlying 
	versions of soot and polyglot, which form part of abc, are also
	printed.
      </long_desc>
    </boolopt>
    <boolopt>
      <alias>verbose</alias>
      <short_desc>Verbose output.</short_desc>
      <long_desc>
	Display information about what abc is doing as it runs.
      </long_desc>
    </boolopt>
    <argfileopt>
      <alias>argfile</alias>
      <set_arg_label>filename</set_arg_label>
      <short_desc>Read arguments from a file.</short_desc>
      <long_desc>Read a list of arguments from the file <use_arg_label/>
	and behave as if they had been passed directly on the command-line.
      </long_desc>
    </argfileopt>
  </section>
  <section>
    <name>Input Options</name>
    <pathopt>
      <alias>sourceroots</alias>
      <set_arg_label>path</set_arg_label>
      <short_desc>Use .java files in dirs in <use_arg_label/> as source.</short_desc>
      <long_desc>
Compile all
.java files found in the directories given by <use_arg_label/> and 
any of their subdirectories.
      </long_desc>
    </pathopt>
    <pathopt>
      <alias>injars</alias>
      <set_arg_label>jar list</set_arg_label>
      <short_desc>Use class files from the jars in 
	<use_arg_label/> as source.</short_desc>
      <long_desc>Use all the class files in the jar files specified by 
	<use_arg_label/> as source. 
      </long_desc>
    </pathopt>
    <pathopt>
      <alias>inpath</alias>
      <set_arg_label>dir list</set_arg_label>
      <short_desc>Use class files found in the directories in <use_arg_label/> 
	as source.</short_desc>
      <long_desc>Use all the class files in the directories specified by 
	<use_arg_label/> as source. 
      </long_desc>
    </pathopt>
    <stringopt>
      <alias>cp</alias>
      <alias>classpath</alias>
      <set_arg_label>classpath</set_arg_label>
      <short_desc>Specify the class path to be used when searching for 
	libraries.</short_desc>
      <long_desc>Specify a list of zips, 
	jars and directories that will be used when searching for libraries
	referred to in the code being compiled. The default value is the
        classpath abc is invoked with.
      </long_desc>
    </stringopt>
    <stringopt>
      <alias>main-class</alias>
      <set_arg_label>class</set_arg_label>
      <short_desc>Sets the main class for interprocedural analysis.</short_desc>
      <long_desc>When performing interprocedural optimizations (with -O3),
        abc needs to know the main class (entry point) of the program.
        This option sets the main class.
      </long_desc>
    </stringopt>
  </section>
  <section>
    <name>Output Options</name>
    <boolopt>
      <alias>dava</alias>
      <default>false</default>
      <short_desc>Decompile instead of outputting classes.
      </short_desc>
      <long_desc>After weaving, run the Dava decompiler to produce
      Java source files of the woven code rather than outputting class files.
      </long_desc>
    </boolopt>
    <stringopt>
      <alias>outjar</alias>
      <set_arg_label>jar</set_arg_label>
      <short_desc>Write output class files into a jar file.</short_desc>
      <long_desc>Write output class files into the jar file specified by
         <use_arg_label/>.</long_desc>
    </stringopt>
    <stringopt>
      <alias>d</alias>
      <set_arg_label>path</set_arg_label>
      <short_desc>Write output class files into a directory.</short_desc>
      <long_desc>Write output class files into the directory specified by
         <use_arg_label/>.</long_desc>
    </stringopt>
    <boolopt>
      <alias>tag-instructions</alias>
      <default>false</default>
      <short_desc>Tag overhead instructions.</short_desc>
      <long_desc>Tag overhead instrutions with metadata required for 
          calculating dynamic metrics.</long_desc>
    </boolopt>
  </section>
  <section>
    <name>Warning/Error Reporting Options</name>
    <boolopt>
      <alias>warn-unused-advice</alias>
      <default>true</default>
      <short_desc>Warn if a piece of advice doesn't apply anywhere.
      </short_desc>
      <long_desc>If a piece of advice does not apply at any join point shadow,
	generate a warning. 
      </long_desc>
    </boolopt>
    <boolopt>
      <alias>warn-prec-ambiguity</alias>
      <default>false</default>
      <short_desc>Warn if there is a precedence ambiguity
      </short_desc>
      <long_desc>If multiple pieces of advice apply at the same shadow, and the
      language specification does not dictate a precedence order, generate
      a warning.
      </long_desc>
    </boolopt>
  </section>
  <section>
    <name>Language Options</name>
    <boolopt>
      <alias>nested-comments</alias>
      <short_desc>Allow nested comments.</short_desc>
      <long_desc>If this option is enabled, comments of the form 
	/* ... /* ... */ ... */ will be allowed.
      </long_desc>
    </boolopt>
    <stringopt>
       <alias>ext</alias>
       <default>abc.main</default>
       <set_arg_label>package name</set_arg_label>
       <short_desc>Load a language extension.</short_desc>
       <long_desc>Load the AspectJ language extension defined in the package
           given by <use_arg_label/>. For example, abc.eaj specifies the
           EAJ language extension supplied with abc.
       </long_desc>
    </stringopt>
    <!-- should -1.3 and -1.4 be boolopts? -->
    <boolopt noparse="">
      <alias>1.3</alias>
      <ajc/>
      <short_desc>Java 1.3 compliance mode.</short_desc>
      <long_desc>Switch to Java 1.3 compliance mode. The default is 1.4.
      </long_desc>
    </boolopt>
    <boolopt noparse="">
      <alias>1.4</alias>
      <ajc/>
      <short_desc>Java 1.4 compliance mode.</short_desc>
      <long_desc>Use Java 1.4 compliance mode. This is the default.
      </long_desc>
    </boolopt>
    <boolopt>
      <alias>abc101runtime</alias>
      <short_desc>abc 1.0.1 runtime compliance mode.</short_desc>
      <long_desc>Use the abc 1.0.0/1.0.1 runtime. This disables some cflow 
                 optimisations present in versions 1.0.2 onwards.
      </long_desc>
    </boolopt>
  </section>
  <section>
    <name>Optimization Options</name>
    <intopt>
      <alias>O</alias>
      <default>1</default>
      <short_desc>Set the general optimization level.</short_desc>
      <long_desc>Set the general optimization level. 0 means no optimizations,
	and 1 means the standard intra-procedural options.
      </long_desc>
    </intopt>
    <boolopt>
      <alias>around-force-closures</alias>
      <default>false</default>
      <short_desc>Force closures for around advice.
      </short_desc>
      <long_desc>Force closures for around advice.
      </long_desc>
    </boolopt>
    <boolopt>
      <alias>around-inlining</alias>
      <default>true</default>
      <short_desc>Enable inlining of around advice.
      </short_desc>
      <long_desc>Enable inlining of around advice. 
      </long_desc>
    </boolopt>
    <boolopt>
      <alias>around-force-inlining</alias>
      <default>false</default>
      <short_desc>Inline around advice whenever possible.
      </short_desc>
      <long_desc>Inline around advice whenever possible (as opposed to adaptive inlining).
      </long_desc>
    </boolopt>
     <boolopt>
      <alias>before-after-inlining</alias>
      <default>true</default>
      <short_desc>Enable inlining of before and after advice.
      </short_desc>
      <long_desc>Enable inlining of before and after advice. 
      </long_desc>
    </boolopt>
    <boolopt>
      <alias>before-after-force-inlining</alias>
      <default>false</default>
      <short_desc>Inline before and after advice whenever possible.
      </short_desc>
      <long_desc>Inline before and after advice whenever possible (as opposed to adaptive inlining).
      </long_desc>
    </boolopt>
    <boolopt>
      <alias>cflow-use-counters</alias>
      <default>true</default>
      <short_desc>Use the counter implementation of cflow whenever possible.</short_desc>
      <long_desc>Implement the cflow construct with counters rather than stacks whenever possible for performance.</long_desc>
    </boolopt>
    <boolopt>
      <alias>cflow-use-sharing</alias>
      <default>true</default>
      <short_desc>Share state between cflow pointcuts whenever possible</short_desc>
      <long_desc>Use only one stack or counter for several occurrences of the same cflow pointcut.</long_desc>
    </boolopt>
    <boolopt>
      <alias>cflow-share-thread-locals</alias>
      <default>true</default>
      <short_desc>Share thread-local instances of cflow stacks within method bodies</short_desc>
      <long_desc>Retrieve the thread-local instance of each cflow stack only once per method.</long_desc>
    </boolopt>
  </section>
  <section undoc="">
    <name>Debug options</name>
    <debugopt>
      <alias>ajcCompliance</alias>
      <default>false</default>
      <short_desc>foo</short_desc>
      <long_desc>
Makes abc bug-for-bug compatible with ajc.
      </long_desc>
    </debugopt>
  </section>
  <section undoc="">
    <name>Undocumented options</name>
    <boolopt>
      <alias>time</alias>
      <short_desc>Turn on timers.</short_desc>
      <long_desc>
Turns on performance timers that measure the time taken by various phases of abc.
      </long_desc>
    </boolopt>
    <intopt>
      <alias>time-report-delay</alias>
      <default>0</default>
      <short_desc>Print timing report any n milliseconds.</short_desc>
      <long_desc>Print timing report any n milliseconds.</long_desc>
    </intopt>
  </section>
</options>
