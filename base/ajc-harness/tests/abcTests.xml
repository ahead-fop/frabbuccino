
<!-- <!DOCTYPE suite SYSTEM "../tests/abcTestSuite.dtd"> -->

<!--

***** ABC Boys and Girls .... Rules for editing this file. ******

1)  you may add an abccomment to an ajc-test entry,  here is an
    example I have added to the first entry of abcTests.xml.

    Note that this is INSIDE that <ajc-test num="1" ajc-test ....> tag.

<ajc-test num="2" dir="base/test100"
      abccomment="I have put this comment in as a test, and this is a very
         long one over multiple lines too. LJH"
      title="static and non-static before methods -  one file"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

2)  if you want to change any of the <message ... /> items because they don't
    correspond to the errors/warnings that we expect from abc,  you
    should.

      (a) RENAME ALL existing <message ... /> items to
                              <ajcmessage ... />.

      (b) INSERT new <message .../> items corresponding to what you
               expect from abc.  (note that the testHarness seems to
               only handle one message per line number)

      (c) INSERT an abccomment into the <ajc-test num="3" ... /> tag to describe
             what you changed and why

3) if you want to change an entry from one that was supposed to run, to
     one that should exit with compile-time errors ...

      (a) REPLACE the <compile files="foo.java"/>  
          with an entry as follows.  Note that the <compile .../> entry
          is replaced with <compile>  .... </compile>, where the first
          entry is an ajcmessage with kind="ignore" and then your
          real messages.
 
                      <compile files="foo.java">
                         <ajcmessage kind="ignore"/>
                         <message kind="error" line="xx"/>
                         <message kind="warning" line="yy"/>
                       </compile>

       (b) CHANGE  the <run .... > to <ajcrun ....>

       (c) INSERT an abccomment to say what you changed and why
           
     Here is an example:

     original entry:

     <ajc-test num="4" dir="pureJava" title="Using 'aspect' as identifier is legal"
      keywords="from-java,purejava">
        <compile files="KeywordAspect.java"/>
        <crun class="KeywordAspect" />
     </ajc-test>


     new entry:

     <ajc-test num="5" dir="pureJava" title="Using 'aspect' as identifier is legal"
      abccomment="abc doesn't allow keywords 
                      need to allow for syntax error. LJH "
      keywords="from-java,purejava">
        <compile files="KeywordAspect.java">
          <ajcmessage kind="ignore" />
          <message kind="error" line="7"/> 
        </compile>
        <ajcrun class="KeywordAspect" />
    </ajc-test>

4) A new set/style of keywords is available for <ajctest/> tags. The
     attribute "keywords" is still valid, in addition each <ajctest>
     can contain a <abckeywords> element, which in turn contains 
     keywords *in the form of further elements*. This allows keywords
     to be taken from a pre-defined list and easily verified.

     An example to make it clear - 
     
         <ajc-test num="6" dir="base/test100"
	        abccomment="I have put this comment in as a test, and this is a very
	       long one over multiple lines too. LJH"
	         title="static and non-static before methods - one file"
		 keywords="from-base">
		<compile files="Driver.java"/>
		<run class="Driver"/>
		<abckeywords>
		     <laurie/>
		     <pavel/>
		</abckeywords>
         </ajc-test>
	 

     For now, the keywords available as elements in the DTD are:
     ganesh, aske, oege, laurie, sascha, pavel, julian, jennifer,
     abclimitations, introductions, polyglot, soot.

     To extend the DTD with additional keywords as the need arises,
     (a) EDIT the line starting with <!ELEMENT abckeywords ...> so that
         the enumeration of possible child elements includes the new
	 keyword
     (b) INSERT a line declaring the new element below. It should have
         the form <!ELEMENT new_keyword EMPTY>.

-->

<!--
  known keywords:
 
  knownLimitation     Accepted limitation of current implementation (fails)
  purejava            Sources compile under javac as well
  broken-test         ??
  messages-vary       one of many (usually two) test specs that differ only in 
                      messages expected by the different compilers.
                      Currently ajc 1.0 tests are in ajcTests10.xml,
                      so there may only be one copy marked "messages-vary" here.
  new-messages-vary   like messages-vary, except need to make ajcTest10 variant

  fail-{...}          test fails in some configuration
  fail-unimplmented   eajc throwing "unimplemented" exception
  fail-commandLine    fails in ajc on command line (move to ajcTestsBroken.xml)
  fail-in-eclipse     fail when harness in run from inside eclipse
  fail-publicType     now fixed - no longer presenting error for public type in wrong file

  from-{file}         from original {file}.txt for file in
                      java, bigjava, resolved_1*, 14tests, errors, design, base... 

  incremental-test    uses inc-compile step
  command-error       command-line error test

  knownLimitation-ajctaskCompiler
                      Accepted limitation of the AjcTaskCompilerCommand wrapper
  knownLimitation-ajdeCompiler
                      Accepted limitation of the AJDE CompileCommand wrapper
                      
  poorErrorMessages   test case passes but errors produced by compiler could do with
                      improvement                      
                      
  Test titles:
  
  Titles should be unique and not change, and related tests should have the 
  same title prefix.  This permits us to automatically compare the test results 
  from different versions (and suites), and to see related differences together.
  
  -->

<suite>

    <ajc-test num="7" dir="base/test100"
      abccomment="I have put this comment in as a test, and this is a very
         long one over multiple lines too. LJH"
      title="static and non-static before methods -- one file"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="8" dir="base/test101"
      title="static and non-static before methods -- many files"
      keywords="from-base">
        <compile files="Driver.java,Foo.java,Bar.java,Pos.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="9" dir="base/test102"
      title="this redirection in non-static before methods" keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="10" dir="base/test103" title="DEPRECATED: introductions"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="11" dir="base/test104" title="before constructors -- one file"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="12" dir="base/test105"
      title="advise weaves find methods typed to builtins or non-woven classes"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="13" dir="base/test106"
      title="make sure new weaves work inside of packages" keywords="from-base">
        <compile files="Driver.java,pkg/Obj.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="14" dir="base/test107"
      title="make sure new weaves work inside of packages (again)"
      keywords="from-base">
        <compile
          files="Driver.java,C1.java,C2.java,pack1/Foo.java,pack2/Foo.java,pack3/Foo.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="15" dir="base/test108"
      title="Inheritance of class and aspect vars in weaves"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="16" dir="base/test109"
      title="Accessibility of class and aspect members from inside weaves"
      keywords="from-base">
        <compile files="Driver.java,Aspect.java,Foo.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="17" dir="base/test110"
      title="Packaged aspects referring to packaged classes"
      keywords="from-base">
        <compile files="Driver.java,pAspect/Aspect.java,pClass/Class.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="18" dir="base/test111"
      title="Inheritance of methods advised by aspects" keywords="from-base">
        <compile
          files="Driver.java,SubClass.java,SuperClass.java,SuperAspect.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="19" dir="base/test112" title="Inherited weaves on constructor"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="20" dir="base/test113" title="Initializers in Aspect and Class Bodies"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="21" dir="base/test114"
      title="Weaver Resolution of method names in method calls passed as args"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="22" dir="base/test115"
      title="DEPRECATED: Introduce constructor with class inheritance"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="23" dir="base/test116"
      title="empty and singular patterns on modifiers and throws"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

   <!-- we're not implementing static inter-type fields on interfaces in 1.1 -->
    <ajc-test num="24" dir="base/test117" title="DEPRECATED: introduce of variables"
      abccomment="ajc 1.2 still does not implement static IT fields and neither does abc. ODM 4/7/04"
      keywords="from-base,knownLimitation">
        <compile files="Driver.java">
          <ajcmessage kind="ignore"/>
          <message kind="error" line="97"/>  
        </compile>
        <!-- <run class="Driver"/> -->
    </ajc-test>

    <ajc-test num="25" dir="base/test118" title="DEPRECATED: Introduce of constructors"
      abccomment="this fails because we don't match I.new(..) correctly. ODM 4/7/04"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="26" dir="base/test119" title="Local declarations in advise bodies"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="27" dir="base/test120" title="unicodes and literals"
      keywords="from-base,purejava">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="28" dir="base/test121"
      title="advises on introduced methods and constructors"
      abccomment="test extra parameters introduced by ITDs. Fixed ODM Jul 5"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="29" dir="base/test122"
      title="DEPRECATED: Method introduction into interface implemented by abstract class"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="30" dir="base/test123" title="Crossing super calls in constructors"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="31" dir="base/test124" title="empty modifier pattern"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="32" dir="base/test125"
      title="Alpha conversion of argument names in designators"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="33" dir="base/test126" title="For Statement"
      keywords="from-base,purejava">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="34" dir="base/test127"
      title="advice uses its own formals to get actuals" keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="35" dir="base/test128"
      title="DEPRECATED:  introduce weaves can use this" keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="36" dir="base/test129"
      title="DEPRECATED: introduce of abstract methods works"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="37" dir="base/test130"
      title="multiple arounds successfully intercept and return own values"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="38" dir="base/test132"
      title="proper matching of overloaded constructors" keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="39" dir="base/test133"
      title="correct super call lookup for method().name()"
      keywords="from-base,purejava">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="40" dir="base/test134"
      title="proper handling of formals in catch advice" keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="41" dir="base/test135"
      title="proper values for thisJoinPoint attributes" 
      abccomment="Used to be a problem with disambiguation of pointcuts. Fixed that July 6.  
                  Now seems to fail because of advice and aspect inheritance. ODM"
      keywords="from-base">
        <compile
          files="Driver.java,JoinPointFields.java,TopFoo.java,pack/PackFoo.java,pack/JoinPointFields.java,pack/PackJoinPointFields.java"/>
        <run class="test135.Driver"/>
    </ajc-test>

    <ajc-test num="42" dir="base/test136" title="supers, supers, supers"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="43" dir="base/test137"
      title="operations on private and protected aspect members (++, -- in partciular)"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="44" dir="base/test138" title="only register things once"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="45" dir="base/test139" title="inner aspects and around"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="46" dir="base/test140"
      title="aspect inheritance and advice, introduction" 
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="47" dir="base/test141" title="thisResultObject for primitives"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="48" dir="base/test142" title="introductions calling super."
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="49" dir="base" pr="384"
      title="allow one argument calls even when there's a comma in the arglist"
      keywords="from-base">
        <compile files="OneArgCallsIsOkay.java"/>
        <run class="OneArgCallsIsOkay"/>
    </ajc-test>

    <ajc-test num="50" dir="new"
      title="advice on calls to static methods even works when called on super"
      keywords="from-base">
        <compile files="SuperStaticCallJoinPoint.java"/>
        <run class="SuperStaticCallJoinPoint"/>
    </ajc-test>

    <ajc-test num="51" dir="new" pr="99"
      title="combined logic expression (handling coericions vs. parens)"
      keywords="from-java,purejava">
        <compile files="CombinedLogic.java"/>
        <run class="CombinedLogic"/>
    </ajc-test>

    <ajc-test num="52" dir="new" pr="99"
      title="comment after class closes (with no new line at end)"
      keywords="from-java,purejava">
        <compile files="CommentAfterClass.java"/>
        <run class="CommentAfterClass"/>
    </ajc-test>

    <ajc-test num="53" 
      abccomment="can't find constructor for 
                   javax.swing.JComponent.AccessibleJComponent()
                  - works with javac
                  - works with soot from class file
                  - does not work with j2j
                  - does not work with jlc, reported to Nate June 30/04 LJH
                  FIXED July 1/04 LJH"
      dir="new" title="handle multiple nested inner classes"
      keywords="from-java">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="InnerHell.java"/>
        <run class="InnerHell"/>
    </ajc-test>

    <ajc-test num="54" dir="new" pr="108" title="multi-dimensional array initializers"
      keywords="from-java,purejava">
        <compile files="MultiArrays.java"/>
        <run class="MultiArrays"/>
    </ajc-test>

    <ajc-test num="55" dir="new" pr="125"
      title="probelm with the generated names of exceptions"
      keywords="from-java,purejava">
        <compile files="ExceptionNames.java"/>
        <run class="ExceptionNames"/>
    </ajc-test>

    <ajc-test num="56" dir="new" pr="109"
      title="checks if the class field can be used on all of the primitive types"
      abccomment = "works for ajc, jlc 
                    doesn't work for j2j or abc
                    file ClassFieldOnPrimitiveTypeLJH.java sent to Jennifer
                       June 30/04 LJH
                    FIXED July 1/04 LJH"
      keywords="from-java,purejava">
        <compile files="ClassFieldOnPrimitiveType.java"/>
        <run class="ClassFieldOnPrimitiveType"/>
    </ajc-test>

    <ajc-test num="57" dir="new/volatileKeyword" pr="151"
      title="advice on a static method" keywords="from-java">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="58" dir="new/innerConsSyntax" pr="192"
      title="inner constructor syntax causes compile error" keywords="from-java"
      abccomment="fails for abc, 
                    classCastException in ConstructorCallShadowMatch
                  works for soot,j2j,jlc,javac and ajc
                  file DriverLJH.java sent to Ganesh June 30/04  LJH "
    >
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="59" dir="new/paramWidening" pr="195"
      title="widening of method parameters to match javac" keywords="from-java">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="60" dir="pureJava/equalsMethOnStr" pr="214"
      title="equals method on quoted strings" keywords="from-java">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="61" dir="new" pr="313"
      title="parenthesized string literals matching primitive type names"
      keywords="from-java">
        <compile files="ParenPrimitive.java"/>
        <run class="ParenPrimitive"/>
    </ajc-test>

    <ajc-test num="62" dir="pureJava/anonInnerClass" pr="294"
      title="anonymous inner class" keywords="from-java">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="63" dir="new" title="simple type coercions tests" keywords="from-java">
        <compile files="TypeCoercions.java"/>
        <run class="TypeCoercions"/>
    </ajc-test>

    <ajc-test num="64" dir="new" title="order of type declarations shouldn't matter"
      abccomment = "doesn't work for abc,  No field this$0 in class Second
                    same behavior for soot -f src-prec java --app 
                    Reported to Jennifer on June 30/04.  LJH 
                    Fixed July 1/04 LJH"
      keywords="from-java">
        <compile files="OrderOfTypes.java"/>
        <run class="OrderOfTypes"/>
    </ajc-test>

    <ajc-test num="65" dir="pureJava"
      title="parsing of parenthesized 'this' (in returns)" keywords="from-java">
        <compile files="ReturnThis.java"/>
        <run class="ReturnThis"/>
    </ajc-test>

    <ajc-test num="66" dir="new" title="Scanner non recognizing strictfp."
      keywords="from-java">
        <compile files="StrictFp.java"/>
        <run class="StrictFp"/>
    </ajc-test>

    <ajc-test num="67" dir="pureJava" title="Strings are folded and interned correctly"
      keywords="from-java">
        <compile files="StringFold.java"/>
        <run class="StringFold"/>
    </ajc-test>

    <ajc-test num="68" dir="pureJava" title="Cast binds tighter than equality tests"
      keywords="from-java">
        <compile files="CastAndBinary.java"/>
        <run class="CastAndBinary"/>
    </ajc-test>

    <ajc-test num="69" dir="pureJava" title="Boundary base values can be parsed"
      keywords="from-java">
        <compile files="BoundaryNums.java"/>
        <run class="BoundaryNums"/>
    </ajc-test>

    <ajc-test num="70" dir="pureJava"
      title="State is passed correctly across nested annonymous inners"
      keywords="from-java">
        <compile files="NestedInners.java"/>
        <run class="NestedInners"/>
    </ajc-test>

    <ajc-test num="71" dir="pureJava"
      title="?: expressions should typecheck in interesting ways"
      keywords="from-java">
        <compile files="TriTestTypecheck.java"/>
        <run class="TriTestTypecheck"/>
    </ajc-test>

    <ajc-test num="72" dir="pureJava"
      title="cast expressions should allow casts to/from interfaces at compile-time."
      keywords="from-java">
        <compile files="InterfaceCast.java"/>
        <run class="InterfaceCast"/>
    </ajc-test>

    <ajc-test num="73" dir="pureJava"
      title="various anonymous inner classes plus super types tests"
      keywords="from-java">
        <compile files="InnerSuper.java"/>
        <run class="InnerSuper"/>
    </ajc-test>

    <ajc-test num="74" dir="new"
      title="Doesn't parse an array-returning method that throws an exception"
      keywords="from-java,purejava">
        <compile files="ArrayMethod.java"/>
        <run class="ArrayMethod"/>
    </ajc-test>

    <ajc-test num="75" dir="new"
      title="Crashes when a lot of zeros are in front of a double variable [!!! purejava]"
      keywords="from-java">
        <compile files="Zeros.java"/>
        <run class="Zeros"/>
    </ajc-test>

    <ajc-test num="76" dir="pureJava" title="Various comment syntaxes should be handled."
      keywords="from-java">
        <compile files="CommentSyntax.java"/>
        <run class="CommentSyntax"/>
    </ajc-test>

    <ajc-test num="77" dir="pureJava/abstractInner"
      title="Abstract inner classes across package boundaries"
      keywords="from-java">
        <compile files="C.java,pkg/A.java"/>
        <run class="C"/>
    </ajc-test>

    <ajc-test num="78" dir="pureJava"
      title="inner classes accessing outers and some more inner class names"
      abccomment="works outside of testHarness, but gets a
            reflection error from inside testHarness, may be fixed with
            new test harness. LJH  
            FIXED July 2/04 LJH"
      keywords="from-java">
        <compile files="InnerAccess.java"/>
        <run class="InnerAccess"/>
    </ajc-test>

    <ajc-test num="79" dir="pureJava"
      title="remember to cast folded values down to the proper types."
      keywords="from-java">
        <compile files="CastingFoldedValues.java"/>
        <run class="CastingFoldedValues"/>
    </ajc-test>

    <ajc-test num="80" dir="pureJava"
      title="inner classes can be built using protected constructors in super"
      keywords="from-java">
        <compile files="VariousConstructors.java"/>
        <run class="VariousConstructors"/>
    </ajc-test>

    <ajc-test num="81" dir="pureJava"
      title="check that nested constructions of local classes work"
      keywords="from-java,purejava">
        <compile files="NestedConstructionsOfLocalClasses.java"/>
        <run class="NestedConstructionsOfLocalClasses"/>
    </ajc-test>

    <ajc-test num="82" dir="pureJava"
      title="Make sure anonymous classes can have non-nullary constructors"
      keywords="from-java,purejava">
        <compile files="NonNullaryAnonymous.java"/>
        <run class="NonNullaryAnonymous"/>
    </ajc-test>

    <ajc-test num="83" dir="new" pr="417"
      title="Full names are dropped from inner interfaces"
      keywords="from-java,purejava">
        <compile files="PR417a.java"/>
        <run class="PR417a"/>
    </ajc-test>

    <ajc-test num="84" dir="new" pr="417"
      title="Making sure full names stay on static inner classes"
      keywords="from-java,purejava">
        <compile files="PR417b.java"/>
        <run class="PR417b"/>
    </ajc-test>

    <ajc-test num="85" dir="pureJava" pr="401"
      title="The current AspectJ compiler cannot parse qualified superclass constructor invocations"
      keywords="from-java">
        <compile files="QualifiedSuperClassConstructorInvocations_PR401.java"/>
        <run class="QualifiedSuperClassConstructorInvocations_PR401"/>
    </ajc-test>

    <ajc-test num="86" dir="pureJava" pr="421"
      title="More thourough test of static members using full names"
      keywords="from-java">
        <compile
          files="Statics.java,StaticMembers_PR421.java,p1/C1.java,p1/P1Statics.java,p1/subp1/SubC1.java,p1/p2/P1P2Statics.java"/>
        <run class="StaticMembers_PR421"/>
    </ajc-test>

    <ajc-test num="87" dir="pureJava" pr="421"
      title="More thourough test of static members using imports"
      keywords="from-java">
        <compile
          files="Statics.java,StaticMembersImports_PR421.java,p1/C1.java,p1/P1Statics.java,p1/subp1/SubC1.java,p1/p2/P1P2Statics.java"/>
        <run class="StaticMembersImports_PR421"/>
    </ajc-test>

    <ajc-test num="88" dir="pureJava/conflictingPackageNames" pr="437"
      title="Looking in class Java for java.lang.String WITH separate compilation"
      keywords="from-java">
        <compile files="Java.java"/>
        <compile files="Main.java"/>
        <run class="Main"/>
    </ajc-test>

    <ajc-test num="89" dir="pureJava/conflictingPackageNames" pr="437"
      title="Looking in class Java for java.lang.String WITHOUT separate compilation"
      keywords="from-java">
        <compile files="Main.java,Java.java"/>
        <run class="Main"/>
    </ajc-test>

    <ajc-test num="90" dir="pureJava/conflictingPackageNamesWithPackages" pr="437"
      title="Looking in class Java for java.lang.String WITH separate compilation with packages"
      keywords="from-java">
        <compile files="Java.java"/>
        <compile files="Main.java"/>
        <run class="conflictingPackageNamesWithPackages.Main"/>
    </ajc-test>

    <ajc-test num="91" dir="pureJava/conflictingPackageNamesWithPackages" pr="437"
      title="Looking in class Java for java.lang.String WITHOUT separate compilation with packages"
      keywords="from-java">
        <compile files="Main.java,Java.java"/>
        <run class="conflictingPackageNamesWithPackages.Main"/>
    </ajc-test>

    <ajc-test num="92" dir="pureJava" title="Testing ternary operations."
      keywords="from-java">
        <compile files="MultiTernaryOps.java"/>
        <run class="MultiTernaryOps"/>
    </ajc-test>

    <ajc-test num="93" dir="pureJava" title="Lifting locals in switch statements."
      keywords="from-java">
        <compile files="SwitchStmtLocals.java"/>
        <run class="SwitchStmtLocals"/>
    </ajc-test>

    <ajc-test num="94" dir="pureJava"
      title="Getting confused when looking up method signatures"
      keywords="from-java">
        <compile files="MethodSigs.java"/>
        <run class="MethodSigs"/>
    </ajc-test>

    <ajc-test num="95" dir="pureJava"
      title="Not recognizing the chars '\0', '\1', '\2', '\3', '\4', '\5', '\6', '\7'"
      keywords="from-java">
        <compile files="Chars.java"/>
        <run class="Chars"/>
    </ajc-test>

    <ajc-test num="96" dir="pureJava"
      title="Test chars '\0', '\1', '\2', '\3', '\4', '\5', '\6', '\7' with a case statement"
      keywords="from-java">
        <compile files="CaseClauses.java"/>
        <run class="CaseClauses"/>
    </ajc-test>

    <ajc-test num="97" dir="pureJava"
      title="Checking character values with all the unicode chars."
      abccomment="Required the fixed jasmin to handle constant
                  pool offsets > 32K.  Fixed July 1/04 LJH "
      keywords="from-java">
        <compile files="CharsUnicode.java"/>
        <run class="CharsUnicode"/>
    </ajc-test>

    <ajc-test num="98" dir="pureJava"
      title="Trouble finding methods with the same name and different parameter types"
      keywords="from-java">
        <compile files="MethodsWithTheSameName.java"/>
        <run class="MethodsWithTheSameName"/>
    </ajc-test>

    <ajc-test num="99" dir="pureJava"
      title="Binding non-public static inner classes of interfaces in other packages"
      keywords="from-java">
        <compile
          files="StaticClassesInInterfaces.java,anotherPackage/AnotherPackageInterface.java"/>
        <run class="StaticClassesInInterfaces"/>
    </ajc-test>

    <ajc-test num="100" dir="pureJava"
      title="Not recognizing the octal chars '\0', '\1', '\2', '\3', '\4', '\5', '\6', '\7'"
      keywords="from-java">
        <compile files="OctalChars.java"/>
        <run class="OctalChars"/>
    </ajc-test>

    <ajc-test num="101" dir="pureJava"
      title="Members with the same name as their package cause confusion with fully-qualified names."
      keywords="from-java">
        <compile files="samenames/Main.java,samenames/Other.java"/>
        <run class="samenames.Main"/>
    </ajc-test>

    <ajc-test num="102" dir="pureJava"
      title="Fully-qual'ed names with same start as variable names"
      keywords="from-java">
        <compile files="FullNames.java"/>
        <run class="FullNames"/>
    </ajc-test>

    <ajc-test num="103" dir="pureJava"
      title="Fully qualifying inner classes within annonymous classes causes problems."
      keywords="from-java">
        <compile files="InnerClassesInAnnonymousClasses.java"/>
        <run class="InnerClassesInAnnonymousClasses"/>
    </ajc-test>

    <ajc-test num="104" dir="pureJava"
      title="Calls to methods in outer annonymous classes are being qual's incorrectly with 'this'"
      keywords="from-java">
        <compile files="MisplacedThisInAnnonymousInnerClasses.java"/>
        <run class="MisplacedThisInAnnonymousInnerClasses"/>
    </ajc-test>

    <ajc-test num="105" dir="pureJava/innersFromSourceAndBytecode"
      title="Reading inner classes from source and bytecode (1) -- was failing"
      keywords="from-java">
        <compile files="C.java,D.java"/>
        <compile files="Main.java,C.java"
        	includeClassesDir="true"/>
        <run class="Main"/>
    </ajc-test>

    <ajc-test num="106" dir="pureJava/innersFromSourceAndBytecode"
      title="Reading inner classes from source and bytecode (2)"
      keywords="from-java">
        <compile files="Main.java,C.java,D.java"/>
        <run class="Main"/>
    </ajc-test>

    <ajc-test num="107" dir="pureJava/innersFromSourceAndBytecode"
      title="Reading inner classes from source and bytecode (3)"
      keywords="from-java">
        <compile files="C.java,D.java"/>
        <compile files="Main.java,C.java,D.java"
        	includeClassesDir="true"/>
        <run class="Main"/>
    </ajc-test>

    <ajc-test num="108" dir="pureJava"
      title="Not lifting types correctly with bytes and shorts with ternary ops"
      keywords="from-java">
        <compile files="TernaryPrimitiveOps.java"/>
        <run class="TernaryPrimitiveOps"/>
    </ajc-test>

    <ajc-test num="109" dir="pureJava"
      title="Not looking up methods inside of anonymous declarations correctly."
      keywords="from-java">
        <compile files="AnonymousMethodLookup.java"/>
        <run class="AnonymousMethodLookup"/>
    </ajc-test>

    <ajc-test num="110" dir="pureJava"
      title="Resolving extended classes with array parameters"
      keywords="from-java">
        <compile files="ResolvingArrayParameters.java"/>
        <run class="ResolvingArrayParameters"/>
    </ajc-test>

    <ajc-test num="111" dir="pureJava"
      title="Assignments as second arguments in ternary operators."
      keywords="from-java">
        <compile files="TernaryAssignments.java"/>
        <run class="TernaryAssignments"/>
    </ajc-test>

    <ajc-test num="112" dir="pureJava" title="Using 'aspect' as identifier is legal TODO"
      abccomment="abc doesn't allow keywords 
                      need to allow for syntax error. LJH "
      keywords="from-java,purejava">
        <compile files="KeywordAspect.java">
          <message kind="error" line="7"/> 
          <message kind="error" line="7"/> 
          <message kind="error" line="10"/> 
          <message kind="error" line="13"/> 
          <message kind="error" line="14"/> 
          <message kind="error" line="18"/> 
          <message kind="error" line="18"/> 
          <ajcmessage kind="ignore" />
        </compile>
        <ajcrun class="KeywordAspect" />
    </ajc-test>

    <ajc-test num="113" dir="pureJava"
      abccomment = "abc doesn't allow keywords, added error. LJH "
      title="Using 'pointcut' as identifier is legal TODO"
      keywords="from-java,purejava">
        <compile files="KeywordPointcut.java">
          <message kind="error" line="7" />
          <message kind="error" line="7" />
          <message kind="error" line="7" />
          <message kind="error" line="8"/> 
          <message kind="error" line="8"/> 
          <message kind="error" line="9"/> 
          <message kind="error" line="9"/> 
           <ajcmessage kind="ignore" />
        </compile>
        <ajcrun class="KeywordPointcut"/>
    </ajc-test>

    <ajc-test num="114" dir="pureJava" title="Conflicting inner classes with interfaces."
      keywords="from-java">
        <compile files="PR413.java"/>
        <run class="PR413"/>
    </ajc-test>

    <ajc-test num="115" dir="new" pr="408"
      title="Not binding constructor when using more than one compilation"
      abccomment="Need to compile second file, loading the CLASS file 
                  produced by the first compile.  Requires modifying 
                  behaviour of polyglot loader.  Aske looking into this
                  as of July 1/04.  LJH
                  Aske has made it so it can load a class file, but now
                  abc cannot resolve InnerAspect when compiling the 
                  second file.  j2j seems to be able to do it, but
                  not abc. July 6/04. LJH"
      keywords="from-java,purejava">
        <compile files="OuterAbstract_PR408.java"/>
        <compile includeClassesDir="true"
                 files="ExtendsOuterAbstract_PR408.java"/>
        <compile includeClassesDir="true"
                 files="ConstructorNotFound_PR408.java"/>
        <run class="ConstructorNotFound_PR408"/>
    </ajc-test>

    <ajc-test num="116" dir="pureJava" title="confusions of casts and parens"
      keywords="from-java">
        <compile files="CastVsParen.java"/>
        <run class="CastVsParen"/>
    </ajc-test>

    <ajc-test num="117" dir="pureJava"
      title="default constructors seen by inner classes subtyping outers"
      keywords="from-java">
        <compile files="DefaultConsAndInner.java"/>
        <run class="DefaultConsAndInner"/>
    </ajc-test>

    <ajc-test num="118" dir="pureJava"
      title="folding fields set to anonymous instances containing self-references"
      keywords="from-java">
        <compile files="AnonFolding.java"/>
        <run class="AnonFolding"/>
    </ajc-test>

    <ajc-test num="119" dir="pureJava"
      title="finally at the end of a method that needs to return"
      abccomment="incorrect code generation by j2j for m().  Problem
                  reported to Jennifer July 1/04.  LJH 
                  FIXED July 2/04 LJH"
      keywords="from-java">
        <compile files="FinallyAndReturns.java"/>
        <run class="FinallyAndReturns"/>
    </ajc-test>

    <ajc-test num="120" dir="pureJava" title="return;;; is not really legal"
      keywords="from-java,purejava"
      abccomment="ajc doesn't report one error per spurious ;, abc does.
                  Added additional messages. PA/AGS"
    >
        <compile files="ReachableEmpty.java">
            <ajcmessage kind="error" line="5"/>
            <ajcmessage kind="error" line="9"/>
            <ajcmessage kind="error" line="13"/>
            <ajcmessage kind="error" line="17"/>
            <message kind="error" line="5"/>
            <message kind="error" line="9"/>
            <message kind="error" line="13"/>
            <message kind="error" line="17"/>
            <message kind="error" line="17"/>
            <message kind="error" line="17"/>
            <message kind="error" line="17"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>

    <ajc-test num="121" dir="new"
      title="ajc treating Throwable as checked, issuing error if not found"
      keywords="from-java,purejava">
        <compile files="FalseThrowsCE.java"/>
        <run class="FalseThrowsCE"/>
    </ajc-test>

    <ajc-test num="122" dir="pureJava"
      title="overriding methods from object in interfaces and multiple-inheritance"
      abccomment="Polyglot bug in checking class conformance. Entered into bugzilla
                  07/07/04. Don't forget to make corresponding changes in 
                  AspectJTypeSystem_c.java when it's been fixed. ODM"
      keywords="from-java">
        <compile files="InterfaceAndObject.java"/>
        <run class="InterfaceAndObject"/>
    </ajc-test>

    <ajc-test num="123" dir="pureJava"
      title="private fields in an outer class accessed by an inner which also extends the outer"
      keywords="from-java">
        <compile files="PrivateFields.java"/>
        <run class="PrivateFields"/>
    </ajc-test>

    <ajc-test num="124" dir="pureJava"
      title="breaking out of a labeled block inside of an if"
      keywords="from-java">
        <compile files="Breaks.java"/>
        <run class="Breaks"/>
    </ajc-test>

    <ajc-test num="125" dir="pureJava"
      title="abstractifying a method and getting it back through super"
      keywords="from-java">
        <compile files="Abstracts.java"/>
        <run class="Abstracts"/>
    </ajc-test>

    <ajc-test num="126" dir="new" pr="328"
      title="package protected classes becoming public"
      keywords="from-java,purejava">
        <compile files="PR328.java"/>
        <run class="PR328"/>
    </ajc-test>

    <ajc-test num="127" dir="pureJava"
      title="Packages and static classes with the same name produce compile errors."
      keywords="from-java">
        <compile files="PackagesAndStaticClassesWithTheSameName.java"/>
        <run class="PackagesAndStaticClassesWithTheSameName"/>
    </ajc-test>

    <ajc-test num="128" dir="pureJava/innerTypeModifiers"
      title="Inner types must generate classfiles with only Public/Default access flags."
      keywords="from-java">
        <compile files="pkg1/Main.java,pkg2/Foo.java"/>
        <run class="pkg1.Main"/>
    </ajc-test>

    <ajc-test num="129" dir="pureJava/innerDefaultConstructors"
      title="Default constructors have same access as their enclosing type"
      abccomment="jlc doesn't report expected error.
                  Reported to Nate on July 1/04.  LJH
                  Still a problem with Polyglot 1.3. Entered onto
                  bugzilla. 17/08/04 ODM"
      keywords="from-java">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="pkg1/Main.java,pkg2/Foo.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="130" dir="pureJava"
      title="Returning primitive values matching method return type (minimal)"
      keywords="from-java">
        <compile files="ReturnTypes.java"/>
        <run class="ReturnTypes"/>
    </ajc-test>

    <ajc-test num="131" dir="pureJava" title="Flow analysis and if(true)"
      keywords="from-java">
        <compile files="Flow.java"/>
        <run class="Flow"/>
    </ajc-test>

    <ajc-test num="132" dir="pureJava"
      abccomment="InterfaceAndClass.java not in directory p.  javac
                    and jlc can compile without it being in correct directory.
                  abc requires it to be in the directory p. July 1/04  LJH"
      title="packages and generated inner types (for I.class)"
      keywords="from-java">
        <abckeywords><skip/></abckeywords>
	<compile files="InterfaceAndClass.java"/>
        <run class="p.InterfaceAndClass"/>
    </ajc-test>

    <ajc-test num="133" dir="pureJava" title="A.this exprs match by exact type matching"
      abccomment="Polyglot does not catch error on line 14. Sent to Nate
                  July 1/04. LJH"
      keywords="from-java">
        <compile files="QualifiedThisMatchesExactly.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>

    <ajc-test num="134" dir="pureJava"
      title="Implicit this for new inner instance must be avaliable"
      keywords="from-java">
        <compile files="ImplicitThisMissing.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="135" dir="pureJava"
      abccomment="runs ok without harness ... July 1/04 LJH"
      title="Inners can reference protected fields of their outer's super."
      keywords="from-java">
        <compile
          files="protectedFieldRefInInner/Main.java,protectedFieldRefInInner/p1/C.java"/>
        <run class="protectedFieldRefInInner.Main"/>
    </ajc-test>

    <ajc-test num="136" dir="new" title="IOException on windows if nul used as identifier"
      abccomment="jlc misses error at line 14, reported to Nate July 1/04 LJH
                  Fixed July 6/04"
      keywords="from-java,purejava">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="NulIOException.java">
            <message kind="error" line="12"/>
            <message kind="error" line="14"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>

    <ajc-test num="137" dir="new"
      title="NullPointerException (not compiler error) when extending non-static inner class"
      keywords="from-java,purejava">
        <compile files="ExtendInnerCE.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>

    <ajc-test num="138" dir="new"
      title="compiler flags final static variable as indefinite in member assignment."
      keywords="from-java,purejava">
        <compile files="DefiniteStatic.java"/>
        <run class="DefiniteStatic"/>
    </ajc-test>

    <ajc-test num="139" dir="new"
      title="confirm no IOException on windows if nul used as identifier"
      keywords="from-java,purejava">
        <compile files="NulIOException2.java"/>
        <run class="NulIOException2"/>
    </ajc-test>

    <ajc-test num="140" dir="pureJava"
      abccomment="problem with j2j treatment of Nan, Jennifer has been
                  informed July 1/04  LJH"
      title="Primitives that special case for a constant arm should work"
      keywords="from-java">
        <compile files="OneArmedPrimitiveTests.java"/>
        <run class="OneArmedPrimitiveTests"/>
    </ajc-test>

    <ajc-test num="141" dir="pureJava" title="Parenthesized true and false don't parse"
      keywords="from-java">
        <compile files="ParenKeywords.java"/>
        <run class="ParenKeywords"/>
    </ajc-test>

    <ajc-test num="142" dir="pureJava"
      title="Field sets to public fields of private fields of enclosing types"
      keywords="from-java">
        <compile files="InnerFieldRef.java"/>
        <run class="InnerFieldRef"/>
    </ajc-test>

    <ajc-test num="143" dir="pureJava"
      title="Constant values should be stored with the correct type of their fields"
      keywords="from-java">
        <compile files="ConstantValueConversion.java"/>
        <run class="ConstantValueConversion"/>
    </ajc-test>

    <ajc-test num="144" dir="pureJava"
      title="Local variables in initializers should not be treated as blank final fields"
      keywords="from-java">
        <compile files="LocalInitializerVariableNotBlank.java"/>
        <run class="LocalInitializerVariableNotBlank"/>
    </ajc-test>

    <ajc-test num="145" dir="pureJava"
      title="Binops aren't allowed as update stmts in for loops"
      keywords="from-java">
        <compile files="NonStmtInFor.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>

    <ajc-test num="146" dir="pureJava"
      title="Can't avoid doing division in case of div by zero"
      keywords="from-java">
        <compile files="DivOpMustHappen.java"/>
        <run class="DivOpMustHappen"/>
    </ajc-test>

    <ajc-test num="147" dir="pureJava"
      title="Testing frames w/greater than FF locals and 7F incs (i.e., WIDE instruction)"
      keywords="from-java">
        <compile files="BigFrameTest.java"/>
        <run class="BigFrameTest"/>
    </ajc-test>

    <ajc-test num="148" dir="pureJava" title="correct numeric literals"
      keywords="from-java">
        <compile files="LiteralsCp.java"/>
        <run class="LiteralsCp"/>
    </ajc-test>

    <ajc-test num="149" dir="pureJava" title="invalid numeric literals"
      abccomment="abc doesn't do a good job on these,  needs a parser
                  that doesn't give up after the first error, and
                  then each case needs to be check.  jlc probably does
                  not catch all of them either.  July 1/04 LJH"
      keywords="from-java">
        <compile files="LiteralsCf.java">
            <message kind="error" line="8"/>
            <message kind="error" line="9"/>
            <message kind="error" line="10"/>
            <message kind="error" line="11"/>
            <message kind="error" line="12"/>
            <message kind="error" line="17"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
            <message kind="error" line="20"/>
            <message kind="error" line="21"/>
            <message kind="error" line="22"/>
            <message kind="error" line="23"/>
            <message kind="error" line="25"/>
            <message kind="error" line="27"/>
            <message kind="error" line="28"/>
            <message kind="error" line="29"/>
            <message kind="error" line="30"/>
            <message kind="error" line="32"/>
        </compile>
    </ajc-test>

    <ajc-test num="150" dir="pureJava" pr="538"
      title="inner types can't have the same simple name as an enclosing type"
      keywords="from-java">
        <compile files="InnerNameConflictsCf.java">
            <message kind="error" line="9"/>
            <message kind="error" line="14"/>
            <message kind="error" line="20"/>
            <message kind="error" line="21"/>
        </compile>
    </ajc-test>
<!--
    <ajc-test num="151" dir="pureJava"
      abccomment = "Isolated expressions that break and sent BigOpsLJH and
                     BigOpsLJHshort to Jennifer.  July 2/04  LJH" 
      title="test the unops and binops with various values" keywords="from-java">
        <compile files="BigOps.java"/>
        <run class="BigOps"/>
    </ajc-test>
-->
    <ajc-test num="152" dir="pureJava"
      title="test + and += for strings and variously typed values"
      abccomment = "Isolated problem cases and sent BigStringLJH.java to
                    Jennifer.  July 2/04 LJH"
      keywords="from-java">
        <compile files="BigString.java"/>
        <run class="BigString"/>
    </ajc-test>

    <ajc-test num="153" dir="pureJava" title="test try/catch/finally statements"
      abccomment="j2j crashes with a stack overflow error.  Reported
            to Jennifer, July 2/04 LJH  FIXED July 3/04 LJH"
      keywords="from-java">
        <compile files="TryCatchFinally.java"/>
        <run class="TryCatchFinally"/>
    </ajc-test>


    <ajc-test num="154" dir="pureJava" pr="547"
      title="local types can be bound in the signatures of other local types"
      keywords="from-resolved_10rc3,from-java">
        <compile files="LocalInners.java"/>
        <run class="LocalInners"/>
    </ajc-test>

    <ajc-test num="155" dir="new"
      title="final constructor parameter causes incorrect compiler error"
      keywords="from-java,purejava">
        <compile files="FinalConstructorParm.java"/>
        <run class="FinalConstructorParm"/>
    </ajc-test>

    <ajc-test num="156" dir="new" title="Error expected for field of type void"
      abccomment="causes jlc to crash when it finds the 3rd error.
                   Reported to Nate July 2/04 LJH
                   Fixed in jlc, but still a problem in abc, must
                   investigate July 4/04 LJH"
      keywords="from-java,purejava">
        <compile files="VoidField.java">
            <message kind="error" line="2"/>
            <message kind="error" line="4"/>
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="157" dir="new" title="Error expected for constructor in interfaces"
      abccomment="ajc only finds errors on lines 2 and 8. 
                  another example of jlc crashing after error detection.
                  July 2/04 LJH. abc now finds all three errors. ODM 26/07/04" 
      keywords="from-java,purejava">

        <compile files="InterfaceConstructor.java">
            <ajcmessage kind="error" line="2"/>
            <ajcmessage kind="error" line="6"/>
            <ajcmessage kind="error" line="8"/>
            <message kind="error" line="2"/>
            <message kind="error" line="6"/>
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="158" dir="new" pr="558"
      title="class name for identifier as String should provoke error"
      keywords="from-java,purejava">
        <compile files="PR558.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="159" dir="new" pr="567"
      title="cyclic interface inheritance not detected if no classes implement the interfaces"
      abccomment="Only one error message required, matches what javac does. 
                  July 2/04 LJH"
      keywords="from-java,purejava,messages-vary">
        <compile files="CyclicInterfaceInheritance.java" 
               options="!eclipse">
            <ajcmessage kind="error" line="14"/>
            <ajcmessage kind="error" line="15"/>
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>

    <ajc-test num="160" dir="new" pr="567" title="cyclic class inheritance"
      abccomment="There are two kinds of errors in this program, one
        due to cyclic inheritance and one due to missing bodies of the
        constructors.  Abc finds the missing bodies, ajc finds the
        cyclic inheritance.   If the bodies are fixed to have a body then
        abc finds the cyclic inheritance and gives a fine error
        message.  LJH July 2/04
	abc now finds both cyclic inheritance and missing bodies - hence
	extra message. PA/AGS" 
      keywords="from-java,purejava">
        <compile files="CyclicClassInheritance.java">
            <ajcmessage kind="error" line="11"/>
            <ajcmessage kind="error" line="12"/>
            <message kind="error" line="11"/>
            <message kind="error" line="12"/>
            <message kind="error" line="12"/>
        </compile>
    </ajc-test>

    <ajc-test num="161" dir="pureJava" title="Type names are not expressions on their own"
      abccomment="jlc misses all errors after the first two.  Example sent to
                  Nate on July 2/04.  LJH. Now find one more than ajc on line
                  35. javac agrees it's an error, but ajc does not.
                  ODM 26/07/04"
      keywords="from-java,purejava">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="TypeExprErrors.java">
            <ajcmessage kind="error" line="10"/>
            <ajcmessage kind="error" line="17"/>
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="19"/>
            <ajcmessage kind="error" line="20"/>
            <ajcmessage kind="error" line="21"/>
            <ajcmessage kind="error" line="22"/>
            <ajcmessage kind="error" line="23"/>
            <ajcmessage kind="error" line="24"/>
            <ajcmessage kind="error" line="25"/>
            <ajcmessage kind="error" line="26"/>
            <ajcmessage kind="error" line="27"/>
            <ajcmessage kind="error" line="28"/>
            <ajcmessage kind="error" line="29"/>
            <ajcmessage kind="error" line="30"/>
            <ajcmessage kind="error" line="31"/>
            <ajcmessage kind="error" line="32"/>
            <ajcmessage kind="error" line="33"/>
            <ajcmessage kind="error" line="34"/>
            <ajcmessage kind="error" line="36"/>
            <ajcmessage kind="error" line="37"/>
            <message kind="error" line="10"/>
            <message kind="error" line="17"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
            <message kind="error" line="20"/>
            <message kind="error" line="21"/>
            <message kind="error" line="22"/>
            <message kind="error" line="23"/>
            <message kind="error" line="24"/>
            <message kind="error" line="25"/>
            <message kind="error" line="26"/>
            <message kind="error" line="27"/>
            <message kind="error" line="28"/>
            <message kind="error" line="29"/>
            <message kind="error" line="30"/>
            <message kind="error" line="31"/>
            <message kind="error" line="32"/>
            <message kind="error" line="33"/>
            <message kind="error" line="34"/>
            <message kind="error" line="35"/>
            <message kind="error" line="36"/>
            <message kind="error" line="37"/>
        </compile>
    </ajc-test>

    <ajc-test num="162" dir="pureJava/nameConflicts"
      title="type and package name conflicts are resolved happily (1a)"
      keywords="from-java,purejava">
        <compile files="p1/Main1.java,p1/Foo.java,p1/p2.java"/>
        <run class="p1.Main1"/>
    </ajc-test>

    <ajc-test num="163" dir="pureJava/nameConflicts"
      title="(fails in USEJAVAC) type and package name conflicts are resolved happily (1b)"
      keywords="from-java,purejava">
        <compile files="p1.java,p1/p2/Foo.java"/>
        <compile files="p1/Main1.java,p1/Foo.java,p1/p2.java"/>
        <run class="p1.Main1"/>
    </ajc-test>

    <ajc-test num="164" dir="pureJava/nameConflicts"
      title="type and package name conflicts are resolved happily (2)"
      keywords="from-java">
        <compile files="p1/Main2.java,p1/p2/Foo.java"/>
        <run class="p1.Main2"/>
    </ajc-test>

    <ajc-test num="165" dir="pureJava/nameConflicts"
      title="type and package name conflicts caught as errors (1)"
      abccomment="this is missing in jlc, but it seems less important
                  than other problems, so won't report it to Nate 
                   just yet.  July 2/04 LJH.
                  Has been fixed in polyglot, but gives a different line
                  number,  should be ok.  August 26/04 LJH"
      keywords="from-java,purejava">
        <compile files="p1/p2.java,p1/Main1.java,p1/Foo.java,p1/p2/Foo.java">
            <ajcmessage kind="error" line="3"/>
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="166" dir="pureJava"
      title="flow analysis where final variable set in another constructor"
      keywords="from-java,purejava">
        <compile files="ConstructorFlow.java"/>
        <run class="ConstructorFlow"/>
    </ajc-test>

    <ajc-test num="167" dir="new" pr="584"
      title="Can construct inner classes using qualified expressions"
      keywords="from-java,purejava">
        <compile files="PR584.java"/>
        <run class="PR584"/>
    </ajc-test>

    <ajc-test num="168" dir="new/protectedStatic" pr="585"
      title="subclass unable to access protected static methods using type-qualified references"
      keywords="from-java,purejava">
        <compile files="SubClass.java,pack/SuperClass.java"/>
        <run class="SubClass"/>
    </ajc-test>

    <ajc-test num="169" dir="new" pr="588" title="Undefined inner class constructor"
      keywords="from-java,purejava">
        <compile files="UndefinedInner.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="170" dir="pureJava"
      title="try statements work sorta like scoped items for exception flow control"
      keywords="from-java">
        <compile files="TryWorksLikeEnvironment.java"/>
        <run class="TryWorksLikeEnvironment"/>
    </ajc-test>

    <ajc-test num="171" dir="pureJava"
      title="qualified this must work exactly, not based on subtypes"
      keywords="from-java">
        <compile files="QualifiedThisExactness.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="172" dir="new/packagePrefix" pr="574"
      title="classes that are package prefixes are illegal"
      abccomment="abc finds this error, but without a line number, which I think is fine - AGS"
      keywords="from-java,purejava,messages-vary">
      <abckeywords> </abckeywords>
        <compile files="p/prefix.java,p/prefix/SomeClass.java"
               options="!eclipse">
            <ajcmessage kind="error" line="2"/>
            <message kind="error"/>
        </compile>
    </ajc-test>

    <ajc-test num="173" dir="new/introTypeMissing"
      title="valid type expressions for introduced type testing"
      abccomment="problem in j2j, won't compile, reported to Jennifer
                   on July 2/04, LJH"
      keywords="from-java,purejava">
        <compile files="TargetClass.java,Util.java"/>
        <run class="TargetClass"/>
    </ajc-test>

    <ajc-test num="174" dir="new/introTypeMissing"
      title="CF expected when enclosing class superclass used as this qualifier in inner class"
      abccomment="missing error on line 23, example set to Nate
                  July 2/04. LJH
                  Fixed July 5/04"
      keywords="from-java">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="TargetClassCF.java,Util.java">
            <message kind="error" line="22"/>
            <message kind="error" line="23"/>
            <message kind="error" line="27"/>
            <message kind="error" line="28"/>
        </compile>
    </ajc-test>

    <ajc-test num="175" dir="new/introTypeMissing"
      title="enclosing class may be used as this qualifier in inner class"
      abccomment="j2j can't handle this, example sent to Jennifer, 
                   July 2/04.  LJH
                  FIXED July 4/04 LJH"
      keywords="from-java">
        <compile files="TargetClassCP.java,Util.java"/>
        <run class="TargetClassCP"/>
    </ajc-test>

    <ajc-test num="176" dir="new"
      title="PR591 compiler error expected when directly calling unimplemented abstract method using super"
      abccomment="jlc error, reported to Nate on July 2/04 LJH."
      keywords="from-java,purejava">
        <compile files="AbstractMethodCall.java">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>

    <ajc-test num="177" dir="pureJava"
      title="suggested by Jacks 15.28-qualified-namestr tests"
      abccomment="ajc and javac already report different subset of possible
                    errors,  abc correctly reports first one and then
                    doesn't check rest of switch.  I think it's ok.
                    July 5/04 LJH. abc and ajc 1.2 now agree.
                    ODM 26/07/04."
      keywords="from-java,purejava,messages-vary">
        <compile files="NonConstants.java" 
               options="!eclipse">
            <ajcmessage kind="error" line="13"/>
            <ajcmessage kind="error" line="14"/>
            <ajcmessage kind="error" line="15"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="17"/>
            <message kind="error" line="13"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>

    <ajc-test num="178" dir="pureJava"
      title="nested finally blocks have interesting frame location problems"
      abccomment="jlc finds an error of return expected, but should
                  compile without error.  Reported to Nate July 2/04 LJH"
      keywords="from-java">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="NestedFinally.java"/>
        <run class="NestedFinally"/>
    </ajc-test>

    <ajc-test num="179" dir="pureJava"
      title="suggested by jacks 3.7-15 all comments must be closed"
      abccomment="we report missing end of comment at end of file 
                  whereas ajc reports it at the beginning of the
                  comment.  I think our error is fine.  July 2/04 LJH"
      keywords="from-java,purejava">
        <compile files="OpenComment.java">
            <ajcmessage kind="error" line="7"/>
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>

    <ajc-test num="180" dir="pureJava" pr="601"
      title="nested synchronized blocks have interesting frame location problems"
      keywords="from-java">
        <compile files="NestedSynchronized.java"/>
        <run class="NestedSynchronized"/>
    </ajc-test>

    <ajc-test num="181" dir="new/classaccess"
      title="package class access not enforced outside of package"
      abccomment="jlc doesn't catch the error, reported to Nate July 3/04 
                  LJH"
      keywords="from-java,purejava">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="main/Main.java,pack1/Target.java">
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>

    <ajc-test num="182" dir="new" pr="631" title="expecting CE for ambiguous reference"
      keywords="from-java,purejava">
        <compile files="AmbiguousClassReference.java">
            <message kind="error" line="11"/>
        </compile>
    </ajc-test>

    <ajc-test num="183" dir="new" pr="643" title="try without catch or finally"
      abccomment="abc parser throws additional error when giving up - PA/AGS"
      keywords="from-java,purejava,message-vary">
        <compile files="TryNoCatchCE.java"
               options="!eclipse">
            <ajcmessage kind="error" line="6"/>
            <message kind="error"/>
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="184" dir="new" pr="642" title="invalid floating-point constant"
      abccomment="really has errors on lines 5 and 6.  July 3/04 LJH"
      keywords="from-java,purejava,messages-vary">
        <compile files="ParsingFloatCE.java"
               options="!eclipse">
            <ajcmessage kind="error" line="5"/>
            <message kind="error" line="5"/>
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="185" dir="pureJava" title="anonymous inner classes with inner types"
      keywords="from-java">
        <compile files="AnonymousWithInner.java"/>
        <run class="AnonymousWithInner"/>
    </ajc-test>

    <ajc-test num="186" dir="pureJava" pr="651" title="qualified super call expr"
      keywords="from-java">
        <compile files="QualifiedSuperCall.java"/>
        <run class="QualifiedSuperCall"/>
    </ajc-test>

    <ajc-test num="187" dir="new/subaspects" pr="647"
      title="concrete aspect unable to access abstract package-private method in parent for overriding"
      abccomment = "error not detected by jlc, reported to Nate July 3/04 LJH
                    now detected, and ajc 1.2 no longer gives the warning.
                    ODM 26/09/04"
      keywords="from-java,purejava,messages-vary"
      comment="XXX fix source - package-private">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="parent/ParentMethodCE.java,child/ChildMethodCE.java"
               options="!eclipse">
            <ajcmessage kind="warning" line="28"/>
            <ajcmessage kind="error" line="27"/>
            <message kind="error" line="27"/>
        </compile>
    </ajc-test>

    <ajc-test num="188" dir="new"
      title="super reference used to disambiguate names of different but compatible types"
      keywords="from-java,purejava">
        <compile files="SuperDisambiguatingType.java"/>
        <run class="SuperDisambiguatingType"/>
    </ajc-test>

    <ajc-test num="189" dir="pureJava" title="anonymous explicit inner constructors"
      keywords="from-java,purejava">
        <compile files="QualifiedNewCP.java"/>
        <run class="QualifiedNewCP"/>
    </ajc-test>

    <ajc-test num="190" dir="pureJava" pr="680"
      abccomment="Probably a j2j error, reported to Jennifer July 3/04 LJH"
      title="interfaces with non-explicitly static inner classes"
      keywords="from-java">
        <compile files="InterfaceAndInnerHelper.java"/>
        <compile files="InterfaceAndInner.java"
        	includeClassesDir="true"/>
        <run class="InterfaceAndInner"/>
    </ajc-test>

    <ajc-test num="191" dir="pureJava"
      title="Overruning the lineStarts buffer, DO NOT EDIT THIS FILE!!!!"
      keywords="from-java,purejava">
        <compile files="AJError.java"/>
        <run class="AJError"/>
    </ajc-test>

    <ajc-test num="192" dir="new" pr="701" title="no CE for unambiguous type reference"
      keywords="from-java,purejava">
        <compile files="UnambiguousClassReference3CP.java"/>
        <run class="UnambiguousClassReference3CP"/>
    </ajc-test>

    <ajc-test num="193" dir="new" pr="701"
      title="CE for ambiguous type reference (imports)"
      abccomment="jlc and abc give a fine error message, no line number,
                  seems ok.  LJH July 3/04"
      keywords="from-java,purejava">
        <compile files="AmbiguousClassReference2CE.java">
            <ajcmessage kind="error" line="2"/>
            <ajcmessage kind="error" line="10"/>
            <message kind="error" line="0"/>
        </compile>
    </ajc-test>

    <ajc-test num="194" dir="new" pr="701"
      title="CE for ambiguous type reference (two type declarations)"
      keywords="from-java,purejava,messages-vary">
        <compile files="AmbiguousClassReference3CE.java"
               options="!eclipse">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>

    <ajc-test num="195" dir="new" pr="701"
      title="CE for ambiguous type reference (two inner types)"
      abccomment="error not reported by jlc, reported to Nate July 3/04 LJH"
      keywords="from-java,purejava,messages-vary">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="AmbiguousClassReference4CE.java"
               options="!eclipse">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>

    <ajc-test num="196" dir="new" pr="709" title="final assignment in loop"
      keywords="from-java,purejava">
        <compile files="FinalInLoop.java"/>
        <run class="FinalInLoop"/>
    </ajc-test>

    <ajc-test num="197" dir="pureJava" title="private super access in inners"
      abccomment="runs fine when not in harness, July 5/04 LJH"
      keywords="from-java,purejava">
        <compile files="PrivateSuperInnerAccess.java"/>
        <run class="PrivateSuperInnerAccess"/>
    </ajc-test>

    <ajc-test num="198" dir="pureJava"
      title="nested interface does not require new qualifier (8)"
      keywords="from-java,purejava">
        <compile files="InvalidNewQualifier8CE.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="199" dir="pureJava"
      title="nested interface does not require new qualifier (9)"
      keywords="from-java,purejava">
        <compile files="InvalidNewQualifier9CE.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="200" dir="pureJava"
      title="nested interface does not require new qualifier (10)"
      keywords="from-java,purejava">
        <compile files="InvalidNewQualifier10CE.java">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>

    <ajc-test num="201" dir="pureJava"
      title="nested interface does not require new qualifier (14)"
      keywords="from-java,purejava">
        <compile files="InvalidNewQualifier14CE.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>

    <ajc-test num="202" dir="pureJava"
      title="nested interface does not require new qualifier (15)"
      keywords="from-java,purejava">
        <compile files="InvalidNewQualifier15CE.java">
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>

    <ajc-test num="203" dir="pureJava"
      title="nested interface does not require new qualifier (16)"
      keywords="from-java,purejava">
        <compile files="InvalidNewQualifier16CE.java">
            <message kind="error" line="16"/>
        </compile>
    </ajc-test>

    <ajc-test num="204" dir="pureJava" title="Operands work correctly"
      abccomment="More jlc constants problems ... reported to Nate and 
                  Jennifer, July 5/04 LJH"
      keywords="from-bigjava">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="Ops.java"/>
        <run class="Ops"/>
    </ajc-test>

    <ajc-test num="205" dir="errors"
      title="reasonable error for crosscut reference with no formals specified"
      abccomment="abc gives one more message due to poor error recovery in parser. ODM July 5,2003"
      keywords="from-errors">
        <compile files="NoFormalsCrosscut.java">
            <ajcmessage kind="error" line="6"/>
            <ajcmessage kind="error" line="7"/>
            <ajcmessage kind="error" line="8"/>
            <message kind="error" line="6"/>
            <message kind="error" line="7"/>
            <message kind="error" line="8"/>
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="206" dir="errors"
      title="reasonable error for introduction on type whose source isn't found"
      keywords="from-errors">
        <compile files="NoSource.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="207" dir="errors"
      title="check that constructor name's match the enclosing type"
      keywords="from-errors,purejava">
        <compile files="BadConstructorName.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="208" dir="errors"
      title="handle errors in crosscut designators, insist that they end with a semicolon"
      keywords="from-errors">
        <compile files="BadDesignator.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="209" dir="errors"
      title="errors for not applicable or accessible methods"
      keywords="from-errors,purejava">
        <compile files="MethodsNotFound.java">
            <message kind="error" line="4"/>
            <message kind="error" line="8"/>
            <message kind="error" line="12"/>
        </compile>
    </ajc-test>

    <ajc-test num="210" dir="errors"
      title="try to return from a before, after, after throwing and after returning"
      keywords="from-errors">
        <compile files="InvalidReturn.java">
            <message kind="error" line="12"/>
            <message kind="error" line="16"/>
            <message kind="error" line="19"/>
            <message kind="error" line="22"/>
        </compile>
    </ajc-test>

    <ajc-test num="211" dir="errors" pr="130"
      title="the designator has a wildcard for method name but no return type specified"
      abccomment="abc finds 2 valid errors on that line. PA/AGS"
      keywords="from-errors">
        <compile files="NoReturnTypeInDesignator.java">
            <ajcmessage kind="error" line="6"/>
            <message kind="error" line="6"/>
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="212" dir="errors"
      title="the designator for the introduction has no type after the | charcter"
      keywords="from-errors">
        <compile files="BadIntroductionDesignator.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="213" dir="errors" pr="140" title="crosscut signature does not match"
      keywords="from-errors">
        <compile files="BadCCutSig.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="214" dir="errors"
      title="proper exit conditions when errors fall through to javac"
      keywords="from-errors">
        <compile files="FromJavac.java">
            <message kind="error" line="11"/>
        </compile>
    </ajc-test>

    <ajc-test num="215" dir="errors" pr="213"
      title="mismatched parens on advice (wasn't binding Tester)"
      abccomment="difference in line number between abc and ajc message. ODM July 5, 2004
                  abc parser throws additional errors when giving up. PA/AGS"
      keywords="from-errors">
        <compile files="MismatchedParens.java">
            <ajcmessage kind="error" line="16"/>
            <message kind="error"/>
            <message kind="error" line="17"/>
	    <message kind="error" line="17"/>
        </compile>
    </ajc-test>

    <ajc-test num="216" dir="errors" pr="209" title="Non-static advice silently ignored"
      keywords="from-errors">
        <compile files="BadPointcutName.java">
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>

    <ajc-test num="217" dir="errors" pr="218"
      title="import statement within class body crashes compiler"
      keywords="from-errors,purejava">
        <compile files="ImportWithinClassBody.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="218" dir="errors" pr="219" title="extra closing brace"
      keywords="from-errors" abccomment="abc complains about both superfluous
              braces -- quite correctly. PA/AGS. But when we reset the
              lexer state correctly, it doesn't. ODM.">
        <compile files="ExtraClosingBrace.java">
	    <ajcmessage kind="error" line="8"/>
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="219" dir="errors" pr="244"
      title="decent errors for around return type not matching target point"
      abccomment="abc doesn't report this kind of error in both places 
                  and our positions are a bit different"
      keywords="from-errors">
        <compile files="AroundReturnType.java">
            <ajcmessage kind="error" line="3"/>
            <ajcmessage kind="error" line="7"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="21"/>
	    <message kind="error" line="2"/>
	    <message kind="error" line="6"/>
	    <message kind="error" line="7"/>
        </compile>
    </ajc-test>

    <ajc-test num="220" dir="errors" title="eachobject: can't call new on an aspect of"
      keywords="from-errors">
        <compile files="CantCallConstructorOnAspects.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="221" dir="errors"
      title="eachobject: only zero-argument constructors allowed in an aspect"
      abccomment="Exception from weaver; Frontend should report error - AGS 1/7/04
                  Fixed - Oege 5/7/04"
      keywords="from-errors,fail-unimplemented">
        <compile files="AspectsCantHaveYesArgumentConstructors.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="222" dir="errors" title="eachobject: can't extend a concrete aspect"
      keywords="from-errors,fail-unimplemented">
        <compile files="SubAspectsCantExtendNonAbstractAspects.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>

    <ajc-test num="223" dir="errors" pr="271" title="instanceof used without a class"
      keywords="from-errors">
        <compile files="InstanceofWithoutClass.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>

    <ajc-test num="224" dir="errors" pr="280" title="wildcard used for returns clause"
      keywords="from-errors">
        <compile files="WildcardForReturns.java">
            <message kind="error" line="17"/>           
        </compile>
    </ajc-test>

    <ajc-test num="225" dir="errors" pr="280" title="no return statement in around advice"
      keywords="from-errors,new-messages-vary">
        <compile files="NoReturnStatement.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>

    <ajc-test num="226" dir="errors" pr="286"
      title="inner aspects must be static (no longer matches PR#286)"
      keywords="from-errors,fail-unimplemented">
        <compile files="AbstractAspectOf.java">
            <message kind="error" line="12"/>
        </compile>
    </ajc-test>

    <ajc-test num="227" dir="errors"
      title="Casting class declarations as interfaces"
      keywords="from-errors">
        <compile files="InterfaceCast.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>

    <ajc-test num="228" dir="errors"
      title="omits a variable name and crashes with a null pointer"
      keywords="from-errors">
        <compile files="BindingNullPointer.java">
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>

    <ajc-test num="229" dir="errors"
      abccomment="abc also reports an error for typechecking. ODM 07/07/04"
      title="Not generating an error for using new as a method name"
      keywords="from-errors">
        <compile files="New.java">
            <ajcmessage kind="error" line="12"/>
            <message kind="error" line="12"/>
            <message kind="error" line="13"/>
        </compile>
    </ajc-test>

    <ajc-test num="230" dir="errors" title="ClassCastException on the int literal"
      keywords="from-errors">
        <compile files="IntLiteral.java">
            <message kind="error" line="17"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>

    <ajc-test num="231" dir="new"
      title="Wrong strictfp keyword usage in interface function prototype [TODO: move to errors]"
      abccomment="Polyglot fails to check special modifier restrictions for interfaces.
                  ODM 5/7/04. This has been fixed. ODM 11/08/04"
      keywords="from-errors">
        <compile files="StrictFpCErr1.java">
            <message kind="error" line="3"/>
       </compile>
    </ajc-test>

    <ajc-test num="232" dir="new"
      title="Wrong strictfp keyword usage in field declaration [TODO: move to errors]"
      keywords="from-errors">
        <compile files="StrictFpCErr2.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>

    <ajc-test num="233" dir="new"
      title="Wrong strictfp keyword usage in constructor declaration [TODO: move to errors]"
      keywords="from-errors">
        <compile files="StrictFpCErr3.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>

    <ajc-test num="234" dir="errors"
      title="Incorrect static casts to primitively foldable arguments should not crash the compiler."
      keywords="from-errors">
        <compile files="BadStaticCast.java">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>

    <ajc-test num="235" dir="errors" title="Dominates with commas should signal an error."
      keywords="from-errors">
        <compile files="DominatesWithCommas.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="236" dir="errors"
      title="Accessing instance fields and instance methods statically."
      abccomment="all errors,  but it is completely reasonable to report
                  only the non-statement error on line 30.  This is what
                  javac does on the Java part of the benchmark.  Note
                  that this is NOT a purejava benchmark, but has an
                  aspect in it, dispite what the keyword says.
                  July 4/04 LJH Polyglot now continues further, so we catch
                  more of the errors July 7/04 ODM"
      keywords="from-errors,purejava">
        <compile files="AccessingInstanceFieldsStatically.java">
            <ajcmessage kind="error" line="15"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="17"/>
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="26"/>
            <ajcmessage kind="error" line="27"/>
            <ajcmessage kind="error" line="30"/>
            <ajcmessage kind="error" line="38"/>
            <ajcmessage kind="error" line="39"/>
            <message kind="error" line="15"/>
            <message kind="error" line="16"/>
            <message kind="error" line="17"/>
            <message kind="error" line="18"/>
            <message kind="error" line="26"/>
            <message kind="error" line="30"/>
            <message kind="error" line="39"/>
        </compile>
    </ajc-test>

    <ajc-test num="237" dir="errors" pr="95"
      title="stack overflow with recursive crosscut specifier"
      abccomment="abc continues with type error. ODM 07/07/04"
      keywords="from-errors">
        <compile files="RecursiveCCutSpecifier.java">
            <ajcmessage kind="error" line="10"/>
            <message kind="error" line="10"/>
            <message kind="error" line="12"/>
        </compile>
    </ajc-test>

    <ajc-test num="238" dir="errors"
      title="Throwing a NullPointerException when formals can't be bound in named pointcut"
      keywords="from-errors">
        <compile files="BadFormalsToCalls.java">
            <message kind="error" line="22"/>
        </compile>
    </ajc-test>

    <ajc-test num="239" dir="errors" pr="385"
      title="disallow defining more than one pointcut with the same name"
      abccomment="ajc reports an error at both locations, abc 
                  gives two for the last location. ODM 07/07/04"
      keywords="from-errors,fail-unimplemented">
        <compile files="OverloadedPointcuts.java">
            <ajcmessage kind="error" line="4"/>
            <ajcmessage kind="error" line="5"/>
            <message kind="error" line="4"/>
            <message kind="error" line="5"/>
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>

    <ajc-test num="240" dir="errors"
      title="pre 0.7 introduction form outside aspect body causes an EmptyStackException"
      abccomment="abc gives further error after parse error. ODM 07/07/04"
      keywords="from-errors">
        <compile files="BadIntroduction.java">
            <ajcmessage kind="error" line="3"/>
            <message kind="error" line="3"/>
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="241" dir="errors" title="a class can't extend an aspect"
      keywords="from-errors,fail-unimplemented">
        <compile files="ClassExtendingAspect.java">
            <message kind="error" line="19"/>
        </compile>
    </ajc-test>

    <ajc-test num="242" dir="errors"
      title="a before() clause at the class-level causes an EmptyStackException"
      abccomment="abc gives type error after parser error. ODM 07/07/04"
      keywords="from-errors">
        <compile files="TopLevelBefore.java">
            <ajcmessage kind="error" line="3"/>
            <message kind="error" line="3"/>
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>

    <ajc-test num="243" dir="errors"
      title="an after() clause at the class-level causes an EmptyStackException"
      abccomment="abc gives type error after parse error. ODM 07/07/04"
      keywords="from-errors">
        <compile files="TopLevelAfter.java">
            <ajcmessage kind="error" line="3"/>
            <message kind="error" line="3"/>
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>

    <ajc-test num="244" dir="errors"
      title="an around() clause at the class-level causes an EmptyStackException"
      abccomment="abc gives type error after parse error. ODM 07/07/04"
      keywords="from-errors">
        <compile files="TopLevelAround.java">
            <ajcmessage kind="error" line="3"/>
            <message kind="error" line="3"/>
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>

    <ajc-test num="245" dir="errors" title="Crashes when a cast is within another cast"
      keywords="from-errors,purejava">
        <compile files="CastInCast.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="246" dir="errors" title="Crashes when a cast of the form )int) appears"
      abccomment="javac report on line 9, as done ajc and abc.  July 4/04 LJH"
      keywords="from-errors,purejava,messages-vary">
        <compile files="BadCast.java"
               options="!eclipse">
            <ajcmessage kind="error" line="9"/>
            <ajcmessage kind="error" line="10"/>
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="247" dir="errors" title="Crashes when the closing brace is reversed"
      abccomment="reports unexptected EOF on line 12, that's ok, July 4/04 LJH
                Extra error without line number is abc parser giving up 
                - PA/AGS"
      keywords="from-errors,purejava,messages-vary">
        <compile files="ClosingBrace.java"
               options="!eclipse">
            <ajcmessage kind="error" line="11"/>
            <message kind="error" />
            <message kind="error" line="12"/>
        </compile>
    </ajc-test>

    <ajc-test num="248" dir="errors"
      title="Crashes when a method name is missing in a call -- e.g. 'System.out.();'"
      keywords="from-errors,purejava">
        <compile files="NoMethodName.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="249" dir="errors" title="Crashes when a bad r-value appears."
      keywords="from-errors,purejava">
        <compile files="BadValue.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="250" dir="errors" title="Two underscores as a variables causes a crash"
      keywords="from-errors,purejava">
        <compile files="BadVar.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="251" dir="errors"
      title="Crashes when assigning to a final static in an intializer and declaration"
      keywords="from-errors,purejava">
        <compile files="FinalStatic.java">
            <message kind="error" line="13"/>
        </compile>
    </ajc-test>

    <ajc-test num="252" dir="errors" title="Crashes when two dots appear instead of one"
      keywords="from-errors,purejava">
        <compile files="TwoDots.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="253" dir="errors" title="Crashes when there're stray dots"
      abccomment="javac,ajc and abc all give errors on all the lines.
                  July 3/04 LJH. Polyglot now goes a bit further and also
                  reports a type error. July 07/04 ODM"
      keywords="from-errors,purejava">
        <compile files="StrayDot.java">
            <ajcmessage kind="error" line="9"/>
            <ajcmessage kind="error" line="10"/>
            <ajcmessage kind="error" line="11"/>
            <ajcmessage kind="error" line="12"/>
            <ajcmessage kind="error" line="13"/>
            <ajcmessage kind="error" line="14"/>
            <message kind="error" line="9"/>
            <message kind="error" line="10"/>
            <message kind="error" line="11"/>
            <message kind="error" line="12"/>
            <message kind="error" line="13"/>
            <message kind="error" line="14"/>
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>

    <ajc-test num="254" dir="errors" title="Stray characters cause a crash"
      abccomment="syntax errors from abc perfectly reasonable
                   July 4/04 LJH"
      comment="XXX public class in wrong file"
      keywords="from-errors,purejava">
        <compile files="StraySlash.java">
            <ajcmessage kind="error" line="9"/>
            <message kind="error" line="9" />
            <message kind="error" line="10" />
            <message kind="error" line="15" />
            <message kind="error" line="16" />
        </compile>
    </ajc-test>

    <ajc-test num="255" dir="errors" title="Colon instead of a semi-colon causes a crash"
      comment="XXX public class in wrong file"
      keywords="from-errors,purejava">
        <compile files="Colon.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="256" dir="errors"
      title="type error in initializer caught by ajc, not javac"
      keywords="from-errors,purejava">
        <compile files="ArrayInitializerType.java">
            <message kind="error" line="2"/>
        </compile>
    </ajc-test>

    <ajc-test num="257" dir="errors"
      title="Circular inheritance with classes causes a stack overflow."
      keywords="from-errors,purejava">
        <compile files="CircularExtends.java">
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>

    <ajc-test num="258" dir="errors" title="Doesn't detect cyclic inheritance of aspects."
      keywords="from-errors">
        <compile files="CircularExtendsAspect.java">
            <message kind="error" line="18"/>
        </compile>
    </ajc-test>

    <ajc-test num="259" dir="errors"
      title="Binds the pointcut formals to member variables instead of pointcut formals."
      abccomment="abc catches the errors, but it doesn't do warnings yet. ODM July 5, 2004"
      keywords="from-errors">
        <compile files="PointcutFormals.java" options="-Xlint:warning">
            <ajcmessage kind="error" line="14"/>
            <ajcmessage kind="error" line="15"/>
            <ajcmessage kind="warning" line="16"/>
            <ajcmessage kind="warning" line="17"/>
            <message kind="error" line="14"/>
            <message kind="error" line="15"/>    
        </compile>
    </ajc-test>

    <ajc-test num="260" dir="errors" title="ambiguous formal in formals pattern"
      keywords="from-errors">
        <compile files="AmbiguousFormal.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="261" dir="errors" title="Missing ;" keywords="from-errors,purejava"
         abccomment="Extra error with no line number for parser complaint in abc. PA/AGS">
        <compile files="PR405.java">
            <message kind="error"/>
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>

    <ajc-test num="262" dir="errors"
      title="cast expressions should not allow casts between ifaces and array types"
      abccomment="abc doesn't emit the second error, although it is found
                  if first line commented out.   Need to establish how
                  we will report errors.  July 5/04 LJH"
      keywords="from-errors,purejava">
        <compile files="InterfaceArrayCast.java">
            <message kind="error" line="9"/>
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>

    <ajc-test num="263" dir="errors"
      title="parsing errors for various bad forms of NewArrayExprs."
      keywords="from-errors,purejava">
        <compile files="BadNewArrayExprs.java">
            <message kind="error" line="4"/>
            <message kind="error" line="5"/>
            <message kind="error" line="6"/>
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>

    <ajc-test num="264" dir="errors"
      title="good error for field name instead of type name"
      abccomment="Polyglot bails out after the first four, but if we comment those out, the others are caught.
                  ODM July 5, 2004."
      keywords="from-errors">
        <compile files="BadTypeName.java">
            <ajcmessage kind="error" line="2"/>
            <ajcmessage kind="error" line="4"/>
            <ajcmessage kind="error" line="6"/>
            <ajcmessage kind="error" line="8"/>
            <ajcmessage kind="error" line="10"/>
            <ajcmessage kind="error" line="12"/>
            <message kind="error" line="2"/>
            <message kind="error" line="4"/>
            <message kind="error" line="6"/>
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="265" dir="errors"
      title="good error for bad field and inner class references"
      abccomment="not pure java July 5/04 LJH
                  polyglot does not find this error, sent to Nate,
                       July 5/04 LJH Fixed in Polyglot 1.3. Not reporting
                      the error on line 3 is deliberate in abc: it overrides
                      both I1 and I2, so there is no conflict. ODM 18/08/04"
      keywords="from-errors,purejava">
        <compile files="BadReferences.java">
            <ajcmessage kind="error" line="3"/>
            <ajcmessage kind="error" line="5"/>
            <message kind="error" line="5"/> 
       </compile>
    </ajc-test>

    <ajc-test num="266" dir="errors" title="errors in aspect inheritance - 1"
      abccomment="abc gives a further error message. ODM July 7,2004"
      keywords="from-errors">
        <compile files="AspectInheritance1.java">
            <ajcmessage kind="error" line="17"/>
            <message kind="error" line="15"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>

    <ajc-test num="267" dir="errors" title="errors in aspect inheritance - 2"
      abccomment="More accurate messages from abc. ODM July 5, 2004"
         keywords="from-errors">
        <compile files="AspectInheritance2.java">
            <ajcmessage kind="error" line="8"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="20"/>
            <ajcmessage kind="error" line="26"/>
            <ajcmessage kind="error" line="30"/>
            <message kind="error" line="15"/>
            <message kind="error" line="16"/>
            <message kind="error" line="20"/>
            <message kind="error" line="23"/>
            <message kind="error" line="24"/>
            <message kind="error" line="30"/>
        </compile>
    </ajc-test>

    <ajc-test num="268" dir="errors" title="errors in aspect inheritance - 3"
      abccomment="ajc fails to find an additional error involving unbound
                  pointcut formals at line 15; abc bails out earlier, but ok. 
                 ODM July 5, 2004"
      keywords="from-errors">
        <compile files="AspectInheritance3.java">
            <ajcmessage kind="error" line="19"/>
            <ajcmessage kind="error" line="24"/>
            <message kind="error" line="15"/>
            <message kind="error" line="19"/>
        </compile>
    </ajc-test>

    <ajc-test num="269" dir="errors" title="errors in aspect inheritance - 4"
      keywords="from-errors">
        <compile files="AspectInheritance4.java">
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>

    <ajc-test num="270" dir="errors"
      title="Implementing a non-interface used to crash the compiler."
      keywords="from-errors,purejava">
        <compile files="PR333.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="271" dir="errors"
      title="circular dominates leading to irresolvable advice precedence"
      abccomment="We only report one error, and at the place the advice applies not the advice location"
      keywords="from-errors">
        <compile files="CircularDominates.java">
            <ajcmessage kind="error" line="12"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="20"/>
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="272" dir="errors"
      title="Should issue an error for using 'class' instead of 'aspect'"
      keywords="from-errors">
        <compile files="NoAspect.java">
            <message kind="error" line="12"/>
        </compile>
    </ajc-test>

    <ajc-test num="273" dir="errors"
      title="Should signal an error when we need an exposed value but don't provide it"
      keywords="from-errors">
        <compile files="MissingExposure.java">
            <message kind="error" line="13"/>
        </compile>
    </ajc-test>

    <ajc-test num="274" dir="errors"
      title="StackOverFlowException with circular +implements's."
      abccomment="Not an ideal error location, but ok for now. ODM July 7, 2004"
      keywords="from-errors">
        <compile files="CircularPlusImplementsIntros.java">
            <message kind="error" line="19"/>
            <ajcmessage kind="error" line="7"/>
            <ajcmessage kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="275" dir="errors"
      title="Introducing protected methods is causing a crash"
      keywords="from-errors">
        <compile files="ProtectedIntro.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>

    <ajc-test num="276" dir="errors"
      title="Introducing protected fields is causing a crash"
      keywords="from-errors">
        <compile files="ProtectedFieldIntro.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>

    <ajc-test num="277" dir="errors" pr="388"
      title="two classes with the same fully-qualified names [eachjvm]"
      abccomment="Bogus test, as it contains a syntax error that causes abc to bail out. ODM July 7, 2004"
      keywords="from-errors"
      comment="XXX error not flagging initial type">
        <compile files="DuplicatedNames.java">
            <ajcmessage kind="error" line="3"/>
            <ajcmessage kind="error" line="5"/>
            <ajcmessage kind="error" line="7"/>
            <ajcmessage kind="error" line="9"/>
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="278" dir="errors" pr="396"
      title="Undefined pointcuts were throwing exceptions in 07b11 [callsto]"
      abccomment="An extra error from abc after the first parse error. ODM 07/07/04"
      keywords="from-errors">
        <compile files="UndefinedPointCut_PR396.java">
            <ajcmessage kind="error" line="8"/>
            <message kind="error" line="8"/>
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="279" dir="errors" pr="240" title="advice on abstract pointcuts"
      abccomment = "abc catches one more error than ajc. ODM 20/07/04"
      keywords="from-errors">
        <compile files="StaticAdviceOnAbstract.java">
            <ajcmessage kind="error" line="17"/>
            <message kind="error" line="12"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>

    <ajc-test num="280" dir="errors"
      title="Whoops, I forgot to put a class in the field access PCD."
      keywords="from-errors">
        <compile files="BadGetPCD.java">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>

    <ajc-test num="281" dir="errors" pr="138"
      title="the arounds return something but there is no returns statement"
      keywords="from-errors">
        <compile files="MissingReturns.java">
            <message kind="error" line="14"/>
            <message kind="error" line="20"/>
        </compile>
    </ajc-test>

    <ajc-test num="282" dir="pureJava" title="simple tests of throws and for stmt typing"
      keywords="from-errors">
        <compile files="SimpleSpec.java">
            <message kind="error" line="4"/>
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>

	<!-- we're not implementing this error check in 1.1 -->
    <ajc-test num="283" dir="errors"
      title="checking the contra-variant errors for typing of proceed"
      abccomment="Still not implemented in ajc 1.2. abc is happy too. ODM July 7, 2004"
      keywords="from-errors,knownLimitation">
        <compile files="BadAround.java">
            <ajcmessage kind="error" line="12"/>
            <ajcmessage kind="error" line="15"/>
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="19"/>
            <ajcmessage kind="error" line="22"/>
        </compile>
    </ajc-test>

    <ajc-test num="284" dir="errors"
      title="error of no return statement detected not by ajc but by javac (line 4)"
      keywords="from-errors,purejava">
        <compile files="NoReturnStatementSimple.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="285" dir="errors" title="class and interface extension"
     abccomment="abc agrees with javac, but reports last error only upon
                 use of the interface - ok. ODM 18/08/04"
     keywords="from-errors,purejava,messages-vary">
        <compile files="BadExtension.java"
               options="!eclipse">
            <ajcmessage kind="error" line="7"/>
            <ajcmessage kind="error" line="9"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="17"/>
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="19"/>
            <ajcmessage kind="error" line="21"/>
            <ajcmessage kind="error" line="35"/>
            <ajcmessage kind="error" line="38"/>
            <message kind="error" line="9"/>
            <message kind="error" line="16"/>
            <message kind="error" line="17"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
            <message kind="error" line="21"/>
            <message kind="error" line="35"/>
        </compile>
    </ajc-test>

<ajc-test num="286" dir="abctests/errors" title="multiple conflicting introductions 1"
      abccomment="abc bails out earlier, split into several cases. ODM July 7"
      keywords="from-errors">
        <compile files="MultipleIntros1.java">
            <ajcmessage kind="error" line="5"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="19"/>
            <ajcmessage kind="error" line="22"/>
            <ajcmessage kind="error" line="27"/>
            <ajcmessage kind="error" line="30"/>
            <message kind="error" line="16"/>
        </compile>
    </ajc-test>
<ajc-test num="287" dir="abctests/errors" title="multiple conflicting introductions 2"
      abccomment="abc bails out earlier, split into several cases. ODM July 7"
      keywords="from-errors">
        <compile files="MultipleIntros2.java">
            <ajcmessage kind="error" line="5"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="19"/>
            <ajcmessage kind="error" line="22"/>
            <ajcmessage kind="error" line="27"/>
            <ajcmessage kind="error" line="30"/>
            <message kind="error" line="18"/>
        </compile>
    </ajc-test>
<ajc-test num="288" dir="abctests/errors" title="multiple conflicting introductions 3"
      abccomment="abc bails out earlier, split into several cases. ODM July 7"
      keywords="from-errors">
        <compile files="MultipleIntros3.java">
            <ajcmessage kind="error" line="5"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="19"/>
            <ajcmessage kind="error" line="22"/>
            <ajcmessage kind="error" line="27"/>
            <ajcmessage kind="error" line="30"/>
            <message kind="error" line="27"/>
        </compile>
    </ajc-test>
<ajc-test num="289" dir="abctests/errors" title="multiple conflicting introductions 4"
      abccomment="abc bails out earlier, cloned to expose each error. ODM July 7"
      keywords="from-errors">
        <compile files="MultipleIntros4.java">
            <ajcmessage kind="error" line="5"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="19"/>
            <ajcmessage kind="error" line="22"/>
            <ajcmessage kind="error" line="27"/>
            <ajcmessage kind="error" line="30"/>
            <message kind="error" line="22"/>
        </compile>
    </ajc-test>
<ajc-test num="290" dir="abctests/errors" title="multiple conflicting introductions 5"
  abccomment="abc bails out earlier, cloned to expose each error. ODM July 7"
      keywords="from-errors">
        <compile files="MultipleIntros5.java">
            <ajcmessage kind="error" line="5"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="19"/>
            <ajcmessage kind="error" line="22"/>
            <ajcmessage kind="error" line="27"/>
            <ajcmessage kind="error" line="30"/>
        </compile>
    </ajc-test>


    <ajc-test num="291" dir="errors" title="types in throws clauses"
      keywords="from-errors,purejava">
        <compile files="ThrowsClause.java">
            <message kind="error" line="2"/>
            <message kind="error" line="4"/>
            <message kind="error" line="13"/>
        </compile>
    </ajc-test>

    <ajc-test num="292" dir="errors"
      title="referencing non-static pointcuts in outer aspects"
      keywords="from-errors">
        <compile files="StaticPointcutRefs.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="293" dir="errors" title="bad switch syntax"
      keywords="from-errors,purejava">
        <compile files="Switch.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="294" dir="new"
      title="javac correct compiler error if there is no return in around returning result"
      keywords="from-errors">
        <compile files="NoReturnInProceed.java">
            <message kind="error" line="16"/>
        </compile>
    </ajc-test>

    <ajc-test num="295" dir="errors"
      title="should give an error for introducing two members with the same name"
      abccomment="abc pinpoints one cause of all four ajc messages. ODM 07/07/04"
      keywords="from-errors">
        <compile files="TwoIntros.java">
            <ajcmessage kind="error" line="10"/>
            <ajcmessage kind="error" line="14"/>
            <ajcmessage kind="error" line="16"/>
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>

    <ajc-test num="296" dir="errors"
      title="wimpy test for undeclared and uncaught exceptions"
      abccomment="abc bails out after reachability fails. ODM 07/07/04"
      keywords="from-errors">
        <compile files="UndeclaredThrows.java">
            <ajcmessage kind="error" line="12"/>
            <ajcmessage kind="error" line="18"/>
            <message kind="error" line="18"/>
        </compile>
    </ajc-test>

    <ajc-test num="297" dir="pureJava" title="test for not folding circular constants"
      keywords="from-errors">
        <compile files="CircularFolding.java">
            <message kind="error" line="6"/>
            <message kind="error" line="7"/>
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="298" dir="pureJava" title="continue targets must be continuable"
      abccomment="jlc/abc reports line of label, ajc reports line of contine
                  seems fine,  LJH July 5/04"
      keywords="from-errors">
        <compile files="BadContinueTarget.java">
            <ajcmessage kind="error" line="6"/>
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>

    <ajc-test num="299" dir="pureJava"
      title="qualified this to non-inner should be caught"
      keywords="from-errors">
        <compile files="BadQualifiedNew.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="300" dir="pureJava"
      title="Referencing various things from static contexts"
      abccomment="abc catches most of these, missings ones don't seem
                  important since fixing other problems would get rid
                  of these July 5/04"
      keywords="from-errors,purejava">
        <compile files="StaticContexts.java">
            <ajcmessage kind="error" line="11"/>
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="19"/>
            <ajcmessage kind="error" line="20"/>
            <ajcmessage kind="error" line="21"/>
            <ajcmessage kind="error" line="27"/>
            <ajcmessage kind="error" line="28"/>
            <ajcmessage kind="error" line="31"/>
            <ajcmessage kind="error" line="35"/>
            <ajcmessage kind="error" line="36"/>
            <message kind="error" line="11"/>
            <message kind="error" line="18"/>
            <message kind="error" line="20"/>
            <message kind="error" line="27"/>
            <message kind="error" line="28"/>
            <message kind="error" line="31"/>
            <message kind="error" line="35"/>
            <message kind="error" line="36"/>
        </compile>
    </ajc-test>

    <ajc-test num="301" dir="new"
      title="Given non-matching TypePattern, CE flags use of non-introduced method rather than failure to introduce"
      abccomment="abc gives precise root of the problem. ODM 07/07/04"
      keywords="from-errors">
        <compile
          files="typepatternmatch/pack1/IntroErrorLocation.java,typepatternmatch/pack2/TargetClass.java">
            <ajcmessage kind="error" line="28"
              file="pack1/IntroErrorLocation.java"
              text="TargetClass cannot be resolved"/>
            <ajcmessage kind="warning" line="33"
              file="pack1/IntroErrorLocation.java"
              text="no match for this type name: TargetClass"/>
            <ajcmessage kind="error" line="39"
              file="pack1/IntroErrorLocation.java"
              text="undefined for the type TargetClass"/>
            <message kind="error"
              file="pack1/IntroErrorLocation.java" line="28"/>
        </compile>
    </ajc-test>

    <ajc-test num="302" dir="new" pr="457"
      title="Compiler should suggest using aspect when advice, pointcuts, or introduction is in a class"
      abccomment="Good message from abc. ODM 07/07/04"
      keywords="from-errors,poorErrorMessages">
        <compile files="RecognizeAspectCE.java">
            <ajcmessage kind="error" line="3"  
            	file="RecognizeAspectCE.java"
            	text="Syntax error"/>
            <ajcmessage kind="error" line="6"  
            	file="RecognizeAspectCE.java"
            	text="Syntax error"/>
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="303" dir="errors"
      title="Some expressions are illegal expression statements"
      keywords="from-errors,purejava">
        <compile files="BadExpressionStatement.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>

    <ajc-test num="304" dir="pureJava" title="illegal forward reference"
      abccomment="jlc gets error (but on line 14), however abc
                  doesn't find it.  Reported to Oege July 5/04 LJH.
                  jlc gets the error, but only via javac. Has this
                  been reported to the Polyglot folks? ODM 07/07/04"
      keywords="from-errors,purejava">
        <compile files="IllegalForwardReference.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="305" dir="errors"
      title="declare error working with pointcut and-not (amp,amp,bang)"
      keywords="from-errors">
        <compile files="DeclareError.java">
            <message kind="error" line="5"/>
            <message kind="error" line="19"/>
        </compile>
    </ajc-test>

    <ajc-test num="306" dir="errors" title="protected accessibility"
      keywords="from-errors,purejava">
        <compile files="protectedAccess/Main.java,protectedAccess/p1/C1.java">
            <ajcmessage kind="error" line="26"/>
            <ajcmessage kind="error" line="28"/>
            <ajcmessage kind="error" line="29"/>
            <ajcmessage kind="error" line="31"/>
            <ajcmessage kind="error" line="37"/>
            <ajcmessage kind="error" line="45"/>
            <ajcmessage kind="error" line="46"/>
            <ajcmessage kind="error" line="54"/>
            <ajcmessage kind="error" line="55"/>
	    <message kind="error" line="37"/>
        </compile>
    </ajc-test>

    <ajc-test num="307" dir="errors" title="parse-time illegal modifiers"
      abccomment="abc bails out early, but ok. ODM 18/07/04"
      keywords="from-errors,purejava">
        <compile files="Modifiers1.java">
            <ajcmessage kind="error" line="2"/>
            <ajcmessage kind="error" line="3"/>
            <ajcmessage kind="error" line="6"/>
            <message kind="error" line="2"/> 
       </compile>
    </ajc-test>

    <ajc-test num="308" dir="errors" title="check-time illegal modifiers"
      abccomment="Errors on lines 8 and 11 not caught by jlc.  Reported to
                  to Nate.  July 6/04 LJH" 
      keywords="from-errors,purejava">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="Modifiers.java">
            <message kind="error" line="2"/>
            <message kind="error" line="3"/>
            <message kind="error" line="4"/>
            <message kind="error" line="6"/>
            <message kind="error" line="7"/>
            <message kind="error" line="8"/>
            <message kind="error" line="9"/>
            <message kind="error" line="11"/>
        </compile>
    </ajc-test>

    <ajc-test num="309" dir="errors" title="illegal synchronized stmts"
      keywords="from-errors,purejava,messages-vary"
      abccomment="Parser throws extra error when giving up. PA/AGS">
        <compile files="BadSynchronized.java"
               options="!eclipse">
            <ajcmessage kind="error" line="6"/>
            <message kind="error"/>
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="310" dir="pureJava" title="modifiers on interface members"
      abccomment="Errors on lines 2,3,7 and 8 missing for jlc. Reported to
                  Nate. July 6/04"
      keywords="from-errors,purejava">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="InterfaceMembers.java">
            <message kind="error" line="2"/>
            <message kind="error" line="3"/>
            <message kind="error" line="4"/>
            <message kind="error" line="5"/>
            <message kind="error" line="7"/>
            <message kind="error" line="8"/>
            <message kind="error" line="9"/>
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>

    <ajc-test num="311" dir="new" pr="534"
      title="aspect as member of interface (private and protected)"
      keywords="from-errors">
        <compile files="AspectInInterfaceCF.java">
            <message kind="error" line="11"/>
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>

    <ajc-test num="312" dir="errors"
      title="good errors (and not too many) for missing members"
      abccomment="jlc doesn't find 2 and should.  jlc exits after finding
                  1.  If 1 is commented out then 2,6,10 are not found, but
                  this is probably due to other errors that stop jlc from
                  looking for them.   Reported this case to Nate,
                  July 6/04 LJH; we bomb out after failing to find the imported
		  package - accepting this (PA/AGS/ODM)"
      comment="XXX import of class in default package"

      keywords="from-errors,purejava">
        <compile files="NotFound.java">
            <message kind="error" />
            <ajcmessage kind="error" line="1"/>
            <ajcmessage kind="error" line="2"/>
            <ajcmessage kind="error" line="6"/>
            <ajcmessage kind="error" line="9"/>
            <ajcmessage kind="error" line="10"/>
            <ajcmessage kind="error" line="14"/>
            <ajcmessage kind="error" line="16"/>
        </compile>
    </ajc-test>

    <ajc-test num="313" dir="new" pr="536"
      title="expecting compile failures with subclass narrowing scope of superclass methods or accessing private superclass variables"
      abccomment="jlc missing the error on line 46, reported to Nate,
                   July 6/04 LJH"
      keywords="from-errors,purejava">
        <compile files="RestrictingVisibilityCF.java">
            <message kind="error" line="27"/>
            <message kind="error" line="29"/>
            <message kind="error" line="31"/>
            <message kind="error" line="39"/>
            <message kind="error" line="41"/>
            <message kind="error" line="46"/>
            <message kind="error" line="48"/>
            <message kind="error" line="53"/>
        </compile>
    </ajc-test>

    <ajc-test num="314" dir="new" pr="494"
      title="introduced inner interfaces - compile should fail to bind interface name outside of Aspect or if implementing method is not public"
      abccomment="abc bails out earlier, but ok. ODM 11/08/04"
      keywords="from-errors">
        <compile files="IntroduceInnerInterfaceCF.java" options="-Xlint:ignore">
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="19"/>
            <ajcmessage kind="error" line="20"/>
            <ajcmessage kind="error" line="24"/>
            <ajcmessage kind="error" line="42"/>
            <ajcmessage kind="error" line="45"/>
            <ajcmessage kind="error" line="48"/>
            <ajcmessage kind="error" line="50"/>
            <ajcmessage kind="error" line="58"/>
            <message kind="error" line="58"/>
        </compile>
    </ajc-test>

    <ajc-test num="315" dir="errors"
      title="aspects may not implement Serializable or Cloneable"
      keywords="from-errors">
        <compile files="AspectInterfaces.java">
            <message kind="error" line="4"/>
            <message kind="error" line="5"/>
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="316" dir="errors"
      title="inner classes may not have static non-constant members"
      abccomment="ajc actually reports three errors ..."
      keywords="from-errors,purejava">
        <compile files="InnerMembers.java">
            <ajcmessage kind="error" line="8"/>
            <ajcmessage kind="error" line="9"/>
            <ajcmessage kind="error" line="10"/>
            <ajcmessage kind="error" line="11"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="17"/>
            <message kind="error" line="8"/>
	    <message kind="error" line="9"/>
	    <message kind="error" line="10"/>
	    <message kind="error" line="11"/>
	</compile>
    </ajc-test>

    <ajc-test num="317" dir="errors"
      title="explicit constructor calls can throw exceptions"
      keywords="from-errors">
        <compile files="ExplicitConstructorThrows.java">
            <message kind="error" line="3"/>
            <message kind="error" line="12"/>
            <message kind="error" line="18"/>
        </compile>
    </ajc-test>

    <ajc-test num="318" dir="pureJava" title="flow analysis with local types"
      abccomment="abc reports a range of line numbers which is fine
                  July 6/04 LJH"
      keywords="from-errors,purejava">
        <compile files="InnerFlow.java">
            <ajcmessage kind="error" line="5"/>
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>

    <ajc-test num="319" dir="errors" pr="664" title="bad proceed args good error messages"
      keywords="from-errors">
        <compile files="ProceedArgsCE.java">
            <message kind="error" line="13"/>
            <message kind="error" line="16"/>
            <message kind="error" line="19"/>
        </compile>
    </ajc-test>

    <ajc-test num="320" dir="design/intro"
      title="initial tests for new introduction style" keywords="from-design">
        <compile files="Simple.java"/>
        <run class="Simple"/>
    </ajc-test>

    <ajc-test num="321" dir="design/intro"
      title="overriding of introduced methods and accessibility"
      keywords="from-design">
        <compile files="Overriding.java"/>
        <run class="Overriding"/>
    </ajc-test>

    <ajc-test num="322" dir="design/intro"
      title="within and introductions behaves correctly" keywords="from-design">
        <compile files="Within.java"/>
        <run class="Within"/>
    </ajc-test>


	<!-- we're not implementing static inter-type fields on interfaces in 1.1 -->
    <ajc-test num="323" dir="design/intro"
      title="introduction of static methods and fields on classes and interfaces"
      abccomment="abc does not implement static intertype fields on interfaces, either. ODM 07/07/04"
      keywords="from-design,knownLimitation">
        <compile files="Statics.java">
           <message kind="error" line="46"/>
           <message kind="error" line="47"/>
           <message kind="error" line="49"/>
           <message kind="error" line="51"/>
        </compile>
        <ajcrun class="Statics"/>
    </ajc-test>

    <ajc-test num="324" dir="design/intro" pr="570"
      title="correct inheritance of multiple concrete methods"
      keywords="from-design">
        <compile files="MultiInheritCP.java"/>
        <run class="MultiInheritCP"/>
    </ajc-test>

    <ajc-test num="325" dir="abctests/design/intro" pr="570"
      title="errors in inheritance of multiple concrete methods 1"
      abccomment="abc bails out early, split into several cases. ODM 08/07/04"
      keywords="from-design">
        <compile files="MultiInheritCF1.java">
            <ajcmessage kind="error" line="21"/>
            <ajcmessage kind="error" line="41"/>
            <ajcmessage kind="error" line="42"/>
            <ajcmessage kind="error" line="43"/>
            <ajcmessage kind="error" line="45"/>
            <ajcmessage kind="error" line="46"/>
            <message kind="error" line="42"/>
            <message kind="error" line="42"/>
            <message kind="error" line="46"/>
        </compile>
    </ajc-test>

    <ajc-test num="326" dir="abctests/design/intro" pr="570"
      title="errors in inheritance of multiple concrete methods 2"
      abccomment="abc bails out early, split into several cases. ODM 08/07/04"
      keywords="from-design">
        <compile files="MultiInheritCF2.java">
            <ajcmessage kind="error" line="21"/>
            <ajcmessage kind="error" line="41"/>
            <ajcmessage kind="error" line="42"/>
            <ajcmessage kind="error" line="43"/>
            <ajcmessage kind="error" line="45"/>
            <ajcmessage kind="error" line="46"/>
            <message kind="error" line="43"/>
        </compile>
    </ajc-test>

    <ajc-test num="327" dir="abctests/design/intro" pr="570"
      title="errors in inheritance of multiple concrete methods 3"
      abccomment="abc bails out early, split into several cases. ODM 08/07/04"
      keywords="from-design">
        <compile files="MultiInheritCF3.java">
            <ajcmessage kind="error" line="21"/>
            <ajcmessage kind="error" line="41"/>
            <ajcmessage kind="error" line="42"/>
            <ajcmessage kind="error" line="43"/>
            <ajcmessage kind="error" line="45"/>
            <ajcmessage kind="error" line="46"/>
            <message kind="error" line="41"/>
        </compile>
    </ajc-test>

   <ajc-test num="328" dir="abctests/design/intro" pr="570"
      title="errors in inheritance of multiple concrete methods 4"
      abccomment="abc bails out early, split into several cases. ODM 08/07/04"
      keywords="from-design">
        <compile files="MultiInheritCF4.java">
            <ajcmessage kind="error" line="21"/>
            <ajcmessage kind="error" line="41"/>
            <ajcmessage kind="error" line="42"/>
            <ajcmessage kind="error" line="43"/>
            <ajcmessage kind="error" line="45"/>
            <ajcmessage kind="error" line="46"/>
            <message kind="error" line="21"/>        
        </compile>
    </ajc-test>


     <ajc-test num="329" dir="abctests/design/intro"
     abccomment="abc bails out early, so copied. ODM 09/07/04"
      title="declared exceptions are checked correctly on intros (errors) 1">
        <compile files="ExceptionsCF1.java">
            <ajcmessage kind="error" line="8"/>
            <ajcmessage kind="error" line="23"/>
            <message kind="error" line="23"/> 
       </compile>
    </ajc-test>

    <ajc-test num="330" dir="abctests/design/intro"
     abccomment="abc bails out early, so copied. ODM 09/07/04"
      title="declared exceptions are checked correctly on intros (errors) 2">
        <compile files="ExceptionsCF2.java">
            <ajcmessage kind="error" line="8"/>
            <ajcmessage kind="error" line="23"/>
            <message kind="error" line="8"/> 
       </compile>
    </ajc-test>
    
    <ajc-test num="331" dir="design/intro"
      title="declared exceptions are checked correctly on intros">
        <compile files="ExceptionsCP.java"/>
        <run class="ExceptionsCP"/>
    </ajc-test>

    <ajc-test num="332" dir="design/reflect"
      title="Joinpoint is not created for foo(String) when before() advice is present."
      keywords="from-design">
        <compile files="SimpleAround1.java"/>
        <run class="SimpleAround1"/>
    </ajc-test>

    <ajc-test num="333" dir="design/eachobject"
      title="more tests of eachobject with some difficult typing issues"
      keywords="from-design">
        <compile files="Tricky3.java"/>
        <run class="Tricky3"/>
    </ajc-test>

    <ajc-test num="334" dir="design/eachobject"
      title="eachobject: eachobject(receptions(...)) [eachobject]"
      abccomment="fails on account of aspect inheritance. ODM 09/07/04"
      keywords="from-design">
        <compile files="Tricky1.java"/>
        <run class="Tricky1"/>
    </ajc-test>

    <ajc-test num="335" dir="design/reflect" title="Checking new joinpoints"
      abccomment="fails on account of problems with aspectOf and aspect inheritance. ODM 09/07/04"
      keywords="from-design">
        <compile files="Coverage.java"/>
        <run class="Coverage"/>
    </ajc-test>

    <ajc-test num="336" dir="design/eachobject"
      abccomment="fails on account of aspect inheritance. ODM 09/07/04"
      title="eachobject: simple test [eachobject] (still)"
      keywords="from-design">
        <compile files="Simple.java"/>
        <run class="Simple"/>
    </ajc-test>

    <ajc-test num="337" dir="design/intro"
      title="scope issues with introduction (needs more work)"
      keywords="from-design">
        <compile files="p1/ScopeIssues.java,p1/C1.java"/>
        <run class="p1.ScopeIssues"/>
    </ajc-test>

    <ajc-test num="338" dir="new"
      title="properly make choice between cast and parenthesis in parser"
      keywords="from-resolved_10x">
        <compile files="JoinPointFields.java"/>
        <run class="JoinPointFields"/>
    </ajc-test>

    <ajc-test num="339" dir="new" pr="96"
      title="field from implemented interface not found in advice"
      keywords="from-resolved_10x">
        <compile files="FieldFromImplementsNotFound.java"/>
        <run class="FieldFromImplementsNotFound"/>
    </ajc-test>

    <ajc-test num="340" dir="new"
      title="make sure advice affects introduced methods and constructors"
      keywords="from-resolved_10x">
        <compile files="AdviceOnIntroduced.java"/>
        <run class="AdviceOnIntroduced"/>
    </ajc-test>

    <ajc-test num="341" dir="new" title="new around construct"
      keywords="from-resolved_10x">
        <compile files="AroundAdvice.java"/>
        <run class="AroundAdvice"/>
    </ajc-test>

    <ajc-test num="342" dir="new" pr="65" title="aspect redefines a parameter"
      keywords="from-resolved_10x">
        <compile files="AspectRedefinesParam.java"/>
        <run class="AspectRedefinesParam"/>
    </ajc-test>

    <ajc-test num="343" dir="new" title="introducing extends and implements"
      abccomment="Need to support I1 extends I2,I3,I4. ODM 09/07/04"
      keywords="from-resolved_10x">
        <compile files="HierarchyIntroductions.java">
        <message kind="warning" line="29"/>
        </compile>
        <run class="HierarchyIntroductions"/>
    </ajc-test>

    <ajc-test num="344" dir="new" pr="104" title="(related) aspect on interface"
      keywords="from-resolved_10x">
        <compile files="AspectOnInterface.java"/>
        <run class="AspectOnInterface"/>
    </ajc-test>

    <ajc-test num="345" dir="new" pr="106" title="advice and package visibility 1"
      keywords="from-resolved_10x">
        <compile
          files="packagevisibility/PackagesAndAdvice.java,packagevisibility/testPackage/Class1.java,packagevisibility/testPackage/Class2.java"
          options="-Xlint:ignore"/>
        <run class="packagevisibility.PackagesAndAdvice"/>
    </ajc-test>
    
    <ajc-test num="346" dir="new" pr="106" title="advice and package visibility 2"
      keywords="from-resolved_10x">
        <compile
          files="packagevisibility/PackagesAndAdviceCf.java,packagevisibility/testPackage/Class1.java,packagevisibility/testPackage/Class2.java"
          options="-Xlint:error">
        <message kind="error" line="29"/>
        </compile>
    </ajc-test>

    <ajc-test num="347" dir="new" title="advice on implied empty constructor"
      keywords="from-resolved_10x">
        <compile files="AdviceOnEmptyConstructor.java"/>
        <run class="AdviceOnEmptyConstructor"/>
    </ajc-test>

    <ajc-test num="348" dir="new" title="advice on * *(..) not mapping to initializers"
      keywords="from-resolved_10x">
        <compile files="InitializerAdvice.java"/>
        <run class="InitializerAdvice"/>
    </ajc-test>

    <ajc-test num="349" dir="new"
      title="three type declarations in the scope of an advice"
      keywords="from-resolved_10x">
        <compile files="TypeDeclInAdvice.java"/>
        <run class="TypeDeclInAdvice"/>
    </ajc-test>

    <ajc-test num="350" dir="new" pr="129"
      title="introduction fails on class with an inner class that extends or implements something"
      keywords="from-resolved_10x">
        <compile files="IntroductionFailsWithInnerClass.java"/>
        <run class="IntroductionFailsWithInnerClass"/>
    </ajc-test>

    <ajc-test num="351" dir="new" pr="126"
      title="checks that methods are introduced on the topmost class implemented"
      keywords="from-resolved_10x">
        <compile files="TopmostImplements.java"/>
        <run class="TopmostImplements"/>
    </ajc-test>

    <ajc-test num="352" dir="new/arndAdvRet" pr="140"
      title="a couple different returns from around advice"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="353" dir="new"
      title="member finally advice paired with signature advice"
      keywords="from-resolved_10x">
        <compile files="TryErrors.java"/>
        <run class="TryErrors"/>
    </ajc-test>

    <ajc-test num="354" dir="new" title="aspect of eachobject(instanceof(Interface))"
      keywords="from-resolved_10x">
        <compile files="AspectOfInterface.java"/>
        <run class="AspectOfInterface"/>
    </ajc-test>

    <ajc-test num="355" dir="new/finalMemInit" pr="162"
      title="final member initialization broken with JDK before 1.1.8"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="356" dir="new/packageNameClash" pr="205"
      title="same package and var name clash in preprocessed code when aspectOf is used"
      keywords="from-resolved_10x">
        <compile files="otherpkg/Driver.java,pkg/Aspect1.java,pkg/Class1.java"/>
        <run class="otherpkg.Driver"/>
    </ajc-test>

    <ajc-test num="357" dir="new/adviceOnStaticMeth" pr="221"
      title="and PR#201 advice on static methods fails javac compile with this"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="358" dir="new"
      title="non-static advice on inner class defined inside of method body"
     abccomment="fails on use of thisJoinPoint when advice applies inside inner class;
                 generates verify error. error goes away when use of thisJoinPoint is
                 commented out. Emailed Ganesh. ODM 09/07/04"
      keywords="from-resolved_10x">
        <compile files="MethodInner.java"/>
        <run class="MethodInner"/>
    </ajc-test>

    <ajc-test num="359" dir="new"
      title="simple single-threaded eachcflow test (includes aspectOf)"
      keywords="from-resolved_10x">
        <compile files="Client.java"/>
        <run class="Client"/>
    </ajc-test>

    <ajc-test num="360" dir="new/scopeTypingBug" pr="191"
      title="bad type resolution when var reassigned in same scope"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="361" dir="new" pr="242"
      title="generating the right throws clause for call-site advice (and around)"
      abccomment="exception checker does not work in the presence of around.
                  ODM 09/07/04"
      keywords="from-resolved_10x">
        <compile files="ComputedThrows.java"/>
        <run class="ComputedThrows"/>
    </ajc-test>

    <ajc-test num="362" dir="new" pr="246"
      title="advice on calls to static methods using several syntax"
      abccomment="reachability checker needs to be hacked so that proceed may throw
                  any exception. On Ganesh's list. ODM 09/07/04"
      keywords="from-resolved_10x">
        <compile files="StaticCalls.java"/>
        <run class="StaticCalls"/>
    </ajc-test>

    <ajc-test num="363" dir="new" pr="248"
      title=", PR#249, PR#250 advice on constructor sites"
      abccomment="reachability checker needs to be hacked so that proceed may throw
                  any exception. On Ganesh's list. ODM 09/07/04"
      keywords="from-resolved_10x">
        <compile files="NewSiteAdvice.java"/>
        <run class="NewSiteAdvice"/>
    </ajc-test>

    <ajc-test num="364" dir="new" title="test after throwing advice in several ways"
      abccomment="the usual problem with around and exception checker. ODM 09/07/04"
      keywords="from-resolved_10x">
        <compile files="AfterThrowing.java"/>
        <run class="AfterThrowing"/>
    </ajc-test>

    <ajc-test num="365" dir="new" title="fancy name patterns for method names"
      keywords="from-resolved_10x">
        <compile files="WildNames.java"/>
        <run class="WildNames"/>
    </ajc-test>

    <ajc-test num="366" dir="design/calls" title="calls: calls(...)"
      keywords="from-resolved_10x">
        <compile files="Simple.java" options="-Xlint:ignore"/>
        <run class="Simple"/>
    </ajc-test>

    <ajc-test num="367" dir="new/extraThrows" pr="259"
      title="throws Exception clause is unnecessarily added to Driver.main method"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="368" dir="new/thisUsedInMain" pr="262"
      title="javac fails when this is referenced in the static main method"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="369" dir="new/badCast" pr="275"
      title="and 276 cast error generated by ajc when type not in signature"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="370" dir="new" pr="285"
      title="calls to methods to which we don't have source"
      keywords="from-resolved_10x">
        <compile files="ExternalCalls.java"/>
        <run class="ExternalCalls"/>
    </ajc-test>

    <ajc-test num="371" dir="new/beforeNotRun" pr="265" title="more aspect inheritance"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="372" dir="new" pr="310"
      title="around and calls with both calling and called this params"
      keywords="from-resolved_10x">
        <compile files="AroundAndCalls.java"/>
        <run class="AroundAndCalls"/>
    </ajc-test>

    <ajc-test num="373" dir="new/pointcutParameter" pr="290"
      title="compiler crashes with eachobject and named pointcuts with parameters"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="374" dir="new/unqualifiedPointcutName" pr="304"
      title="lookup rules for unqualified pointcut names"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="375" dir="new" pr="321"
      title="eachcflow only instantiated if the aspect has some advice in it"
      keywords="from-resolved_10x">
        <compile files="CFlowNoAdvice.java"/>
        <run class="CFlowNoAdvice"/>
    </ajc-test>

    <ajc-test num="376" dir="new" pr="309"
      title="(DESIGN QUESTION) aspect of eachJVM advising its own initializer"
      keywords="from-resolved_10x">
        <compile files="EachJVMOnSelf.java"/>
        <run class="EachJVMOnSelf"/>
    </ajc-test>

    <ajc-test num="377" dir="new" pr="302"
      title="after returning advice on calls to constructors"
      keywords="from-resolved_10x">
        <compile files="AfterConstructorCalls.java"/>
        <run class="AfterConstructorCalls"/>
    </ajc-test>

    <ajc-test num="378" dir="new"
      title="Does annotating 'new' with a type work as desired?"
      keywords="from-resolved_10x">
        <compile files="ConstructorSignatures.java"/>
        <run class="ConstructorSignatures"/>
    </ajc-test>

    <ajc-test num="379" dir="new"
      title="Referring to inner classes as {super}.{inner} confused ajc."
      keywords="from-resolved_10x">
        <compile files="InnerClassNaming.java"/>
        <run class="InnerClassNaming"/>
    </ajc-test>

    <ajc-test num="380" dir="new" title="Advice on advice" keywords="from-resolved_10x">
        <compile files="AdviceOnAdvice.java"/>
        <run class="AdviceOnAdvice"/>
    </ajc-test>

    <ajc-test num="381" dir="new" title="Introductions on other introductions"
      keywords="from-resolved_10x">
        <compile files="IntroOnIntro.java"/>
        <run class="IntroOnIntro"/>
    </ajc-test>

    <ajc-test num="382" dir="new" title="Putting advice on array constructors."
      keywords="from-resolved_10x">
        <compile files="Orleans.java"/>
        <run class="Orleans"/>
    </ajc-test>

    <ajc-test num="383" dir="new"
      title="call points within block inner classes are doubled"
      keywords="from-resolved_10x">
        <compile files="DoubledCalls.java"/>
        <run class="DoubledCalls"/>
    </ajc-test>

    <ajc-test num="384" dir="new" title="Gets and sets with other advice"
      keywords="from-resolved_10x">
        <compile files="Counting3.java"/>
        <run class="Counting3"/>
    </ajc-test>

    <ajc-test num="385" dir="new" title="Compiler can compile correct strictfp modifiers"
      abccomment="abc fails with a compile error, which is a polyglot bug: it contradicts JLS 9.1.1.2.
                  Easy fix (just delete the relevant test), entered onto bugzilla. ODM 11/08/04"
      keywords="from-resolved_10x">
        <compile files="StrictFpCompile.java"/>
        <run class="StrictFpCompile"/>
    </ajc-test>

    <ajc-test num="386" dir="new" title="basic test of callsto pointcuts"
      keywords="from-resolved_10x">
        <compile files="CallsTo.java"/>
        <run class="CallsTo"/>
    </ajc-test>

    <ajc-test num="387" dir="new" title="package wildcards in packages"
      keywords="from-resolved_10x">
        <compile files="pack/PackageWildcards.java"/>
        <run class="pack.PackageWildcards"/>
    </ajc-test>

	<!-- only before advice implemented for handler join points in 1.1 -->
    <ajc-test num="388" dir="new" title="advice on catch clauses"
      abccomment="ajc fails this, since neither compiler 
                  supports after advice on handlers"
      keywords="from-resolved_10x,knownLimitation">
        <abckeywords><skip/></abckeywords>
        <compile files="CatchAdvice.java"/>
        <run class="CatchAdvice"/>
    </ajc-test>

    <ajc-test num="389" dir="new"
      title="around advice on calls and receptions with lots of context"
      keywords="from-resolved_10x">
        <compile files="AroundCalls.java"/>
        <run class="AroundCalls"/>
    </ajc-test>

    <ajc-test num="390" dir="new" pr="208"
      title="! modifier and char in pointcut (no longer an error)"
      abccomment="NPE in matcher. ODM 16/07/04"
      keywords="from-resolved_10x">
        <compile files="NotCharInPointcut.java"/>
        <run class="NotCharInPointcut"/>
    </ajc-test>

    <ajc-test num="391" dir="new" pr="308"
      title="right number of aspect instances per cflow"
      keywords="from-resolved_10x">
        <compile files="CFlowObjects.java"/>
        <run class="CFlowObjects"/>
    </ajc-test>

    <ajc-test num="392" dir="new" pr="310" title="many this's into around advice on calls"
      keywords="from-resolved_10x">
        <compile files="AroundCallsArgs.java"/>
        <run class="AroundCallsArgs"/>
    </ajc-test>

    <ajc-test num="393" dir="new"
      title="Ensures introduction methods can have advice placed on them"
      keywords="from-resolved_10x">
        <compile files="Dominates.java"/>
        <run class="Dominates"/>
    </ajc-test>

    <ajc-test num="394" dir="new" pr="355"
      title="No boolean appearing in the 'if' clause for around advice with eachJVM()"
      keywords="from-resolved_10x">
        <compile files="PR355.java"/>
        <run class="PR355"/>
    </ajc-test>

    <ajc-test num="395" dir="new" title="Order of super introductions."
      keywords="from-resolved_10x">
        <compile files="OrderOfExtendsPlusAndImplementsPlus.java"/>
        <run class="OrderOfExtendsPlusAndImplementsPlus"/>
    </ajc-test>

    <ajc-test num="396" dir="new" title="Ensuring backdoor methods are produced."
      keywords="from-resolved_10x">
        <compile files="BackdoorMethods.java"/>
        <run class="BackdoorMethods"/>
    </ajc-test>

    <ajc-test num="397" dir="new"
      title="no duplicate advice methods in abstract aspects"
      keywords="from-resolved_10x">
        <compile
          files="GeneratingDuplicateNamedAdviceMethodsInAbstractAspects.java"/>
        <run class="GeneratingDuplicateNamedAdviceMethodsInAbstractAspects"/>
    </ajc-test>

    <ajc-test num="398" dir="new"
      title="no duplicate advice methods in abstract aspects extended"
      keywords="from-resolved_10x">
        <compile
          files="GeneratingDuplicateNamedAdviceMethodsInAbstractAspectsWithExtendedAspect.java"/>
        <run class="GeneratingDuplicateNamedAdviceMethodsInAbstractAspectsWithExtendedAspect"
        />
    </ajc-test>

    <ajc-test num="399" dir="new"
      title="Putting after-constructor advice on the wrong types implementing the same interface."
      keywords="from-resolved_10x">
        <compile files="AfterAdviceOnConstructorsOnTheWrongType.java"/>
        <run class="AfterAdviceOnConstructorsOnTheWrongType"/>
    </ajc-test>

    <ajc-test num="400" dir="new"
      title="Instantiating non-static inner classes in advice."
      keywords="from-resolved_10x">
        <compile files="NonstaticInnerClassesInAspects.java"/>
        <run class="NonstaticInnerClassesInAspects"/>
    </ajc-test>

    <ajc-test num="401" dir="new" pr="316" title="Referring to pointcut in of clauses"
      keywords="from-resolved_10x">
        <compile files="ReferringToPointcutsInAspect_PR316.java"/>
        <run class="ReferringToPointcutsInAspect_PR316"/>
    </ajc-test>

    <ajc-test num="402" dir="new" pr="191"
      title="Confused referring to instance variables and locals"
      keywords="from-resolved_10x">
        <compile files="ScopesAndFields_PR191.java"/>
        <run class="ScopesAndFields_PR191"/>
    </ajc-test>

    <ajc-test num="403" dir="new"
      title="Parsing C+ expressions without parens in super introductions."
      keywords="from-resolved_10x">
        <compile files="ParsingSubtypesIntroductions.java"/>
        <run class="ParsingSubtypesIntroductions"/>
    </ajc-test>

    <ajc-test num="404" dir="new"
      title="Introducing methods on classes that implements inner-interfaces with +implements."
      keywords="from-resolved_10x">
        <compile files="IntroducingMethodsOnPlusImplementedInterfaces.java" options="-Xlint:ignore"/>
        <run class="IntroducingMethodsOnPlusImplementedInterfaces"/>
    </ajc-test>

    <ajc-test num="405" dir="new" pr="464"
      title="Methods with the same name are generated when abstract aspects extend another abstract aspect."
      keywords="from-resolved_10x">
        <compile
          files="AbstractAspectsExtendingAbstractAspectsGeneratesMethodsWithTheSameName_PR464.java"/>
        <run class="AbstractAspectsExtendingAbstractAspectsGeneratesMethodsWithTheSameName_PR464"
        />
    </ajc-test>

    <ajc-test num="406" dir="new" title="Making sure final variables stay final."
      keywords="from-resolved_10x">
        <compile files="RemovingFinals.java"/>
        <run class="RemovingFinals"/>
    </ajc-test>

    <ajc-test num="407" dir="new"
      title="Problem resolving meta-joinpoint names with around advice on methods called from around advice."
      keywords="from-resolved_10x">
        <compile files="AroundAdviceOnMethodsCalledInAroundAdvice.java"/>
        <run class="AroundAdviceOnMethodsCalledInAroundAdvice"/>
    </ajc-test>

    <ajc-test num="408" dir="new"
      title="Make sure that names of lifted local classes are right when referenced in call-site advice"
      keywords="from-resolved_10x">
        <compile files="CallsAndLocalClasses.java"/>
        <run class="CallsAndLocalClasses"/>
    </ajc-test>

    <ajc-test num="409" dir="new" title="matching for throws clause"
      keywords="from-resolved_10x">
        <compile files="ThrowsMatching.java"/>
        <run class="ThrowsMatching"/>
    </ajc-test>

	<!-- we will handle this by signalling a weave-time error for any around
	     advice that is applied to a join point which throws checked exceptions
	     that it can't handle.  proceeds in closures change the exceptions that
	     around advice can handle to include the greatest lower bound of the
	     checked exceptions that are legally throwable by the proceed.
	     Ideally their should be an -Xlint compile-time warning for ALL 
	     cases that could produce weave-time errors.
	-->
    <ajc-test num="410" dir="new" title="holding onto proceed calls in a closure-like way"
      abccomment="ajc fails in the same way as abc, due to a bug in the 
                  test case. Duplicated as 41001."
      keywords="from-resolved_10x,knownLimitation">
        <abckeywords><skip/></abckeywords>
        <compile files="HoldProceed.java"/>
        <run class="HoldProceed"/>
    </ajc-test>
    <ajc-test num="41001" dir="abctests/new" title="holding onto proceed calls in a closure-like way"
      abccomment="duplicated from 410 to fix bug in test case"
      keywords="from-resolved_10x,knownLimitation">
        <compile files="HoldProceed.java"/>
        <run class="HoldProceed"/>
    </ajc-test>

    <ajc-test num="411" dir="new" title="basic test of declare soft"
      keywords="from-resolved_10x">
        <compile files="DeclareSoft.java"/>
        <run class="DeclareSoft"/>
    </ajc-test>

    <ajc-test num="412" dir="new"
      title="advice on calls to constructors of anonymous inners and access to context"
      keywords="from-resolved_10x">
        <compile files="NewAnonymous.java"/>
        <run class="NewAnonymous"/>
    </ajc-test>

    <ajc-test num="413" dir="new" 
    	title="Cannot bind a name." keywords="from-resolved_10x,purejava"
        abccomment="ajc now finds a compile-time error in this benchmark,
                    as does javac.  jlc does not find the error, have
                    reported the error to Nate.  July 7/04"
        >
        <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="CannotReferenceSuper.java">
           <ajcmessage kind="ignore"/>
           <message kind="error" line="26"/>
        </compile>
        <ajcrun class="CannotReferenceSuper"/>
    </ajc-test>

    <ajc-test num="414" dir="new/innerAspectAccess" pr="211"
      title="inner aspects can't access outer pointcuts"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="415" dir="new"
      title="implements and extends are introduced before methods and fields"
      keywords="from-resolved_10x">
        <compile files="IntroOrder.java"/>
        <run class="IntroOrder"/>
    </ajc-test>

    <ajc-test num="416" dir="new"
      title="a static/inner aspect of a inner class of an aspect is pulled to the top level as static"
      keywords="from-resolved_10x">
        <compile files="StaticInnerAspect.java"/>
        <run class="StaticInnerAspect"/>
    </ajc-test>

    <ajc-test num="417" dir="new" title="Crashes with privileged aspect."
      keywords="from-resolved_10x">
        <compile files="Privileged.java"/>
        <run class="Privileged"/>
    </ajc-test>

    <ajc-test num="418" dir="new"
      title="join points exist in the execution of field initializers"
      abccomment="bug in test case, according to Erik Hilsdale 
                  (see ajc bug database: 72245,72335);
                  duplicated as 41801"
      keywords="from-resolved_10x">
        <abckeywords><skip/></abckeywords>
        <compile files="FieldInitializerJoinPoints.java"/>
        <run class="FieldInitializerJoinPoints"/>
    </ajc-test>

    <ajc-test num="41801" dir="abctests/new"
      title="join points exist in the execution of field initializers"
      abccomment="cloned from 418"
      keywords="from-resolved_10x">
        <compile files="FieldInitializerJoinPoints.java"/>
        <run class="FieldInitializerJoinPoints"/>
    </ajc-test>

    <ajc-test num="419" dir="new/privilegedAspects" title="privileged aspects"
      keywords="from-resolved_10x">
        <compile
          files="main/Main.java,fish/PrivateClass.java,fish/B.java,fowl/C.java,fowl/D.java"/>
        <run class="main.Main"/>
    </ajc-test>

    <ajc-test num="420" dir="new" title="advice on field gets in privileged aspects"
      keywords="from-resolved_10x">
        <compile files="AdviceOnPrivileged.java"/>
        <run class="AdviceOnPrivileged"/>
    </ajc-test>

    <ajc-test num="421" dir="new" title="Two anonymous classes in the same scope"
      keywords="from-resolved_10x">
        <compile files="TwoAnonymous.java"/>
        <run class="TwoAnonymous"/>
    </ajc-test>

    <ajc-test num="422" dir="new"
      title="basic tests for initializer and staticinitializer PCDs"
      keywords="from-resolved_10x">
        <compile files="InitializerTest.java"/>
        <run class="InitializerTest"/>
    </ajc-test>

    <ajc-test num="423" dir="new" pr="98"
      title="introduction of an initializer into a class"
      keywords="from-resolved_10x">
        <compile files="IntroductionOfInitializer.java"/>
        <run class="IntroductionOfInitializer"/>
    </ajc-test>

    <ajc-test num="424" dir="new/access"
      title="some method accessibility tests, particularly package-protected and inheritance"
      keywords="from-resolved_10x">
        <compile files="Test1.java,pc/C.java,psub/SubC.java,psub/A.java"/>
        <run class="Test1"/>
    </ajc-test>

    <ajc-test num="425" dir="new"
      title="fairly monotonous (and non-covering) tests for expanded dot patterns"
      keywords="from-resolved_10x">
        <compile files="ExpandedDotDotPattern.java"/>
        <run class="ExpandedDotDotPattern"/>
    </ajc-test>

    <ajc-test num="426" dir="new" title="field patterns and subtyping"
      keywords="from-resolved_10x">
        <compile files="FieldPatterns.java"/>
        <run class="FieldPatterns"/>
    </ajc-test>

    <ajc-test num="427" dir="new"
      title="Checking formal matching as in Roeder's bug in 0.7b10"
      keywords="from-resolved_10x">
        <compile files="FormalMatching.java"/>
        <run class="FormalMatching"/>
    </ajc-test>

    <ajc-test num="428" dir="new" title="Introducing synchronized methods on interfaces."
      keywords="from-resolved_10x">
        <compile files="SynchronizedMethodsOnInterfaces.java"/>
        <run class="SynchronizedMethodsOnInterfaces"/>
    </ajc-test>

    <ajc-test num="429" dir="new"
      title="The pointcut params (..,int..) is not recognizing (Object,int,Object)."
      keywords="from-resolved_10x">
        <compile files="Params.java"/>
        <run class="Params"/>
    </ajc-test>

    <ajc-test num="430" dir="new"
      title="calls advice on array objects causes error in code generation"
      keywords="from-resolved_10x">
        <compile files="CallsToArray.java"/>
        <run class="CallsToArray"/>
    </ajc-test>

    <ajc-test num="431" dir="new"
      title="join points in field initializers aren't showing up."
      keywords="from-resolved_10x">
        <compile files="NonexistentFieldInitializers.java"/>
        <run class="NonexistentFieldInitializers"/>
    </ajc-test>

    <ajc-test num="432" dir="new" pr="318" title="Handlers problem"
      keywords="from-resolved_10x">
        <compile files="PR318.java"/>
        <run class="PR318"/>
    </ajc-test>

    <ajc-test num="433" dir="new"
      title="work nicely with inner class method look-up rules and call-site advice"
      keywords="from-resolved_10x">
        <compile files="InnerMethods.java"/>
        <run class="InnerMethods"/>
    </ajc-test>

    <ajc-test num="434" dir="new" title="strictfp modifier allowed on advice"
      keywords="from-resolved_10x">
        <compile files="StrictFPAdvice.java"/>
        <run class="StrictFPAdvice"/>
    </ajc-test>

    <ajc-test num="435" dir="new" pr="415"
      title="No argthis was being created for calls advice."
      keywords="from-resolved_10x">
        <compile files="PR415.java"/>
        <run class="PR415"/>
    </ajc-test>

    <ajc-test num="436" dir="new"
      title="Ensuring no advice with instanceof(..) is run on static methods."
      keywords="from-resolved_10x">
        <compile files="StaticMethodsShouldNotReceiveInstanceofAdvice.java"/>
        <run class="StaticMethodsShouldNotReceiveInstanceofAdvice"/>
    </ajc-test>

    <ajc-test num="437" dir="new"
      title="Null pointer on gets advice showing the case causing the error"
      keywords="from-resolved_10x">
        <compile files="NullPointerOnGetsSimple.java"/>
        <run class="NullPointerOnGetsSimple"/>
    </ajc-test>

    <ajc-test num="438" dir="new"
      title="try to make sure that dynamic JoinPoint objects aren't generated when used inside of if (false) { ... }"
      keywords="from-resolved_10x">
        <compile files="IfdefsAndAdvice.java"/>
        <run class="IfdefsAndAdvice"/>
    </ajc-test>

    <ajc-test num="439" dir="new"
      title="within and withincode (doesn't all work due to local class name issues)"
      keywords="from-resolved_10x">
        <compile files="WithinInners.java"/>
        <run class="WithinInners"/>
    </ajc-test>

    <ajc-test num="440" dir="new"
      title="around advice on calls within inner classes (including protected method calls) 1"
      keywords="from-resolved_10x">
        <compile files="AroundInnerCalls13.java" options="-1.3"/>
        <run class="AroundInnerCalls13"/>
    </ajc-test>

	<ajc-test num="441" dir="new"
      title="around advice on calls within inner classes (including protected method calls) 2"
      keywords="from-resolved_10x">
        <compile files="AroundInnerCalls.java" options="-1.4"/>
        <run class="AroundInnerCalls"/>
    </ajc-test>
    
    <ajc-test num="442" dir="new" title="Arguments to runNext should be final when needed"
      keywords="from-resolved_10x">
        <compile files="Finals.java"/>
        <run class="Finals"/>
    </ajc-test>

    <ajc-test num="443" dir="new" title="Method introductions"
      keywords="from-resolved_10x">
        <compile files="MethodIntroductions.java"/>
        <run class="MethodIntroductions"/>
    </ajc-test>

    <ajc-test num="444" dir="new" title="Putting an introduced method on each interface"
      keywords="from-resolved_10x">
        <compile files="IntroducedMethodsOnEachInterface.java"/>
        <run class="IntroducedMethodsOnEachInterface"/>
    </ajc-test>

    <ajc-test num="445" dir="new" title="Extending interfaces"
      keywords="from-resolved_10x">
        <compile files="BindingInterfaces.java"/>
        <run class="BindingInterfaces"/>
    </ajc-test>

    <ajc-test num="446" dir="new" title="Introducing private methods on interfaces"
      keywords="from-resolved_10x">
        <compile files="IntroducingPrivateMethodsOnInterfaces.java"/>
        <run class="IntroducingPrivateMethodsOnInterfaces"/>
    </ajc-test>

    <ajc-test num="447" dir="new"
      title="Issuing errors for assigning variables thisJoinPoint -- not assigning thisJoinPoint."
      keywords="from-resolved_10x">
        <compile files="ThisJoinPointAssignments.java"/>
        <run class="ThisJoinPointAssignments"/>
    </ajc-test>

    <ajc-test num="448" dir="new"
      title="Static references inside of introduced bodies get bound correctly."
      keywords="from-resolved_10x">
        <compile files="StaticIntroducedReferences.java"/>
        <run class="StaticIntroducedReferences"/>
    </ajc-test>

    <ajc-test num="449" dir="new/cflowObjectCreations" pr="307"
      title="cflow and object creations [of eachcflow]"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="450" dir="new/twofiles"
      title="Doesn't import MightHaveAspect when compiling with more than 1 file. [eachobject]"
      keywords="from-resolved_10x">
        <compile files="TheObject.java,TheAspect.java"/>
        <run class="TheObject"/>
    </ajc-test>

    <ajc-test num="451" dir="new" pr="436"
      title="test binding to formals in calls to constructors (binding to null) (eachobject !!! now misnamed)"
      keywords="from-resolved_10x">
        <compile files="BindingThisInsteadOfFormal.java"/>
        <run class="BindingThisInsteadOfFormal"/>
    </ajc-test>

    <ajc-test num="452" dir="new"
      title="After advice isn't being woven into after throwing advice"
      keywords="from-resolved_10x">
        <compile files="AfterThrowingNotWoven.java"/>
        <run class="AfterThrowingNotWoven"/>
    </ajc-test>

    <ajc-test num="453" dir="new" title="Throwing an EmptyStackException."
      keywords="from-resolved_10x">
        <compile files="EmptyStack.java"/>
        <run class="EmptyStack"/>
    </ajc-test>

	<ajc-test num="454" dir="new/perThis"
	    title="check that MightHaveAspect interface is created correctly for an aspect in deep package"
	    keywords="from-resolved_10x">
	      <compile files="p/EachObjectTarget.java,the/deep/pkg/EachObjectInDeepPackage.java"/>
	      <run class="p.EachObjectTarget"/>
	</ajc-test>
  
    <ajc-test num="455" dir="new" title="Defines clfow$ajc0 more once. [eachcflow]"
      keywords="from-resolved_10x">
        <compile files="Binkley.java"/>
        <run class="Binkley"/>
    </ajc-test>

    <ajc-test num="456" dir="new"
      title="Various calls, receptions, and callsto tests [callsto]"
      keywords="from-resolved_10x">
        <compile files="CallsReceptionsCallsto.java"/>
        <run class="CallsReceptionsCallsto"/>
    </ajc-test>

    <ajc-test num="457" dir="new" pr="320"
      title="Was throwing exception, now just an error. [eachobject]"
      keywords="from-resolved_10x">
        <compile files="PR320.java"/>
        <run class="PR320"/>
    </ajc-test>

    <ajc-test num="458" dir="new"
      title="different version of aspect inheritance, particularly empty pointcuts and abstract cflows [eachcflow]"
      abccomment="There is an unbound formal in a pointcut which we correctly report as an error"
      keywords="from-resolved_10x,fail-unimplemented">
        <compile files="AspectInheritance.java">
	<message kind="error" line="24"/>
	</compile>
        <!-- run class="AspectInheritance"/> -->
	
    </ajc-test>

    <ajc-test num="459" dir="new" pr="339"
      title="set advice on member initing throwing exception [eachobject]"
      keywords="from-resolved_10x">
        <compile files="PR339.java"/>
        <run class="PR339"/>
    </ajc-test>

    <ajc-test num="460" dir="new" pr="417"
      title="Testing class names with same name's with difference case as package. [eachobject]"
      keywords="from-resolved_10x">
        <compile files="test/TraceAspect.java,test/Test.java"/>
        <run class="test.Test"/>
    </ajc-test>

    <ajc-test num="461" dir="new"
      title="Null pointer on gets advice with coverage [painful]"
      keywords="from-resolved_10x">
        <compile files="NullPointerOnGets.java"/>
        <run class="NullPointerOnGets"/>
    </ajc-test>

    <ajc-test num="462" dir="new" title="Basic test for cflow pointcuts [eachcflow]"
      keywords="from-resolved_10x">
        <compile files="CFlowPoints.java"/>
        <run class="CFlowPoints"/>
    </ajc-test>

    <ajc-test num="463" dir="new"
      title="Crashing when looking up the type of array members."
      keywords="from-resolved_10x">
        <compile files="ArrayCasts.java"/>
        <run class="ArrayCasts"/>
    </ajc-test>

    <ajc-test num="464" dir="new"
      title="PostfixExprs to various synthetic things are fixed correctly [eachobject]"
      keywords="from-resolved_10x">
        <compile files="Fixes.java"/>
        <run class="Fixes"/>
    </ajc-test>

    <ajc-test num="465" dir="new"
      title="Dave Binkley's problem with eachcflowroot. [eachcflow]"
      keywords="from-resolved_10x">
        <compile files="Binkley2.java"/>
        <run class="Binkley2"/>
    </ajc-test>

    <ajc-test num="466" dir="new" pr="105" title="advice on an inherited method"
      keywords="from-resolved_10x">
        <compile files="AdviceOnInheritedMethod.java"/>
        <run class="AdviceOnInheritedMethod"/>
    </ajc-test>

    <ajc-test num="467" dir="new" pr="114"
      title=", PR#115 checks the ordering of catch clauses"
      keywords="from-resolved_10x">
        <compile files="OrderOfCatches.java"/>
        <run class="OrderOfCatches"/>
    </ajc-test>

    <ajc-test num="468" dir="new" title="various declared exception permutations"
      keywords="from-resolved_10x">
        <compile files="DeclaredExcs.java"/>
        <run class="DeclaredExcs"/>
    </ajc-test>

    <ajc-test num="469" dir="new"
      title="ordering of advice kinds as well as cflow and dominates"
      keywords="from-resolved_10x">
        <compile files="AdviceOrdering.java"/>
        <run class="AdviceOrdering"/>
    </ajc-test>

    <ajc-test num="470" dir="new" pr="241"
      title="advice on default constructor for a class only referenced via reflection"
      keywords="from-resolved_10x">
        <compile files="OddConstructors.java"/>
        <run class="OddConstructors"/>
    </ajc-test>

    <ajc-test num="471" dir="new" pr="289"
      title="calling and called this params in calls points"
      keywords="from-resolved_10x">
        <compile files="CallsParams.java"/>
        <run class="CallsParams"/>
    </ajc-test>

    <ajc-test num="472" dir="new" pr="322"
      title="primitive parameters coercable to Object just like return values are"
      keywords="from-resolved_10x">
        <compile files="ObjectForInt.java"/>
        <run class="ObjectForInt"/>
    </ajc-test>

   <!-- This test case requires bytecode generated according to the declaring type
        rules in JLS 2nd edition.  -1.4 must be passed to the eclipse compiler for
        this behavior. -->
    <ajc-test num="473" dir="new"
      title="Does the matrix coverage thing for the new method signatures"
      keywords="from-resolved_10x">
        <compile files="MethodSignatures.java" options="-1.4,-Xlint:ignore"/>
        <run class="MethodSignatures" vm="1.4"/>
    </ajc-test>  

    <ajc-test num="474" dir="new"
      title="join points in static/dynamic initializers aren't showing up."
      keywords="from-resolved_10x">
        <compile files="NonexistentInitializers.java"/>
        <run class="NonexistentInitializers"/>
    </ajc-test>

    <ajc-test num="475" dir="new"
      title="Gets and sets on a number of variables (field access ???)"
      keywords="from-resolved_10x">
        <compile files="Gets.java"/>
        <run class="Gets"/>
    </ajc-test>

   <!-- This test case requires bytecode generated according to the declaring type
        rules in JLS 2nd edition.  -1.4 must be passed to the eclipse compiler for
        this behavior. -->
    <ajc-test num="476" dir="new" title="correct types of parameters at call-sites"
      keywords="from-resolved_10x">
        <compile files="CallTypes.java" options="-1.4,-Xlint:ignore"/>
        <run class="CallTypes" vm="1.4"/>
    </ajc-test>

    <ajc-test num="477" dir="new"
      title="Joinpoints are showing up on intermediate call sites"
      keywords="from-resolved_10x">
        <compile files="Counting1.java"/>
        <run class="Counting1"/>
    </ajc-test>

    <ajc-test num="478" dir="new" title="Reception based on strictfp modifier"
      keywords="from-resolved_10x">
        <compile files="StrictFpReceptions.java"/>
        <run class="StrictFpReceptions"/>
    </ajc-test>

    <ajc-test num="479" dir="new" pr="353"
      title="Subclasses that do not redefine a method are not being handled correctly"
      keywords="from-resolved_10x">
        <compile files="PR353b.java"/>
        <run class="PR353b"/>
    </ajc-test>

    <ajc-test num="480" dir="new"
      title="making sure that super calls are bound to the right methods"
      keywords="from-resolved_10x">
        <compile files="SupersAndInterfaces.java"/>
        <run class="SupersAndInterfaces"/>
    </ajc-test>

    <ajc-test num="481" dir="new" pr="317"
      title="inheritance, around advice and abstract pointcuts [eachobject] (still)"
      keywords="from-resolved_10x">
        <compile files="OverridingPointcuts.java"/>
        <run class="OverridingPointcuts"/>
    </ajc-test>

    <ajc-test num="482" dir="new/foemmel"
      title="Priviledged aspect methods are missing for privates. [eachobject]"
      keywords="from-resolved_10x">
        <compile files="TheAspect.java,TheObject.java">
        </compile>
        <run class="TheObject"/>
    </ajc-test>

    <ajc-test num="483" dir="new"
      title="exceptions thrown and caught in advice, particularly try+proceed"
      keywords="from-resolved_10x">
        <compile files="TryAndProceed.java"/>
        <run class="TryAndProceed"/>
    </ajc-test>

    <ajc-test num="484" dir="new" title="Not and And operators in pointcuts not working"
      keywords="from-resolved_10x">
        <compile files="NotAndPointcut.java"/>
        <run class="NotAndPointcut"/>
    </ajc-test>

    <ajc-test num="485" dir="new"
      title="Member initializers should run before the current class constructor"
      keywords="from-resolved_10x">
        <compile files="MemberInitializationsAfterExplicitConstructorCalls.java"/>
        <run class="MemberInitializationsAfterExplicitConstructorCalls"/>
    </ajc-test>

    <ajc-test num="486" dir="new"
      title="Coverage tests for Member initializers should run before the current class constructor and after super"
      keywords="from-resolved_10x">
        <compile
          files="MemberInitializationsAfterExplicitConstructorCallsCoverage.java"/>
        <run class="MemberInitializationsAfterExplicitConstructorCallsCoverage"/>
    </ajc-test>

    <ajc-test num="487" dir="new"
      title="thisJoinPoint{Static} not visible in if() pcd of named pointcut"
      keywords="from-resolved_10x">
        <compile files="IfPCDExprJoinPointVisibleCE.java"/>
        <run class="IfPCDExprJoinPointVisibleCE"/>
    </ajc-test>

    <ajc-test num="488" dir="new"
      title="pcd if() expression visibility at compile-time  (minimal operation)"
      abccomment="tries to use target,args etc as vars in pointcut - we skip"
      keywords="from-resolved_10x">
        <abckeywords><skip/></abckeywords>
        <compile files="IfPCDExprVisibility.java" options="-Xlint:ignore"/>
        <run class="IfPCDExprVisibility"/>
    </ajc-test>

    <ajc-test num="489" dir="new"
      title="pcd if() NPE in compiler when unwinding assignment in pcd if(expr)"
      keywords="from-resolved_10x">
        <compile files="IfPCDExprAssignUnparseFailure.java"/>
        <run class="IfPCDExprAssignUnparseFailure"/>
    </ajc-test>

    <ajc-test num="490" dir="new"
      title="pcd if() dup methods produced when pointcut after advice etc (javac)"
      keywords="from-resolved_10x">
        <compile files="IfPCDDupMethod.java"/>
        <run class="IfPCDDupMethod"/>
    </ajc-test>

    <ajc-test num="491" dir="new"
      title="pcd if() variants: [anonymous, named] x [execution, call, callTyped, get, set, initializations] x [before, after, around]"
      keywords="from-resolved_10x">
        <compile files="IfPCDAdviceMethods.java"/>
        <run class="IfPCDAdviceMethods"/>
    </ajc-test>

    <ajc-test num="492" dir="new/pr456" pr="456" title="advice on advice in usejavac mode"
      keywords="from-resolved_10x">
        <compile options="-usejavac"
          files="Test_AroundVarBug.java,AroundVarBug.java"/>
        <run class="Test_AroundVarBug"/>
    </ajc-test>

    <ajc-test num="493" dir="new" pr="476" title="initialization order with this"
      keywords="from-resolved_10x">
        <compile files="InitializationOrder.java"/>
        <run class="InitializationOrder"/>
    </ajc-test>

    <ajc-test num="494" dir="new" pr="496"
      title="!within and !this handling for callee-side call points"
      keywords="from-resolved_10x">
        <compile files="NotThis.java"/>
        <run class="NotThis"/>
    </ajc-test>

    <ajc-test num="495" dir="new/innerInterfaces" pr="494"
      title="private inner interfaces and bytecode visibility"
      keywords="from-resolved_10x">
        <compile files="p/Driver.java,p/InnerTest.java,other/Test.java"/>
        <run class="p.Driver"/>
    </ajc-test>

	<!-- This has a complicated set of expected join points.
	     This test should be borken up into more manageable chunks
	     and more carefully analyzed for correctness in the future.
	-->
    <ajc-test num="496" dir="new" pr="490"
      title="elaborated into testing of around on all join points"
      abccomment="around weaver internal error - Sascha emailed - AGS 1/7/04"
      keywords="from-resolved_10x">
        <compile files="AroundAll.java"/>
        <run class="AroundAll"/>
    </ajc-test>

    <ajc-test num="497" dir="new"
      title="type name hygiene when code comes from aspects in different packages"
      keywords="from-resolved_10x">
        <compile
          files="typeNameConflicts/Driver.java,typeNameConflicts/p1/C.java,typeNameConflicts/aspects/A.java"/>
        <run class="typeNameConflicts.Driver"/>
    </ajc-test>

    <ajc-test num="498" dir="new" title="cflowbelow dependencies (from Chris Dutchyn)"
      keywords="from-resolved_10x">
        <compile files="CflowBelowTest.java"/>
        <run class="CflowBelowTest"/>
    </ajc-test>

   <!-- This test case requires bytecode generated according to the declaring type
        rules in JLS 2nd edition.  -1.4 must be passed to the eclipse compiler for
        this behavior.  That means that this case will only work under 1.4.  -->
    <ajc-test num="499" dir="new"
      title="target type matching with messy interface hierarchies"
      keywords="from-resolved_10x">
        <compile files="CallTypesI.java" options="-1.4,-Xlint:ignore"/>
        <run class="CallTypesI" vm="1.4"/>
    </ajc-test>

	<!-- around advice not implemented on initializer join points -->
    <ajc-test num="500" dir="new" pr="490"
      title="PR#458 Compiler was incorrectly flagging error in advice on initialization and static initialization"
      keywords="from-resolved_10x,knownLimitation">
        <compile files="StaticInitCE.java"/>
        <run class="StaticInitCE"/>
    </ajc-test>

    <ajc-test num="501" dir="new" pr="493"
      title="Compiler incorrectly flagging *1 (non-alphabetic start to signature pattern)"
      keywords="from-resolved_10x">
        <compile files="NonAlphaSignaturePatternCE.java"/>
        <run class="NonAlphaSignaturePatternCE"/>
    </ajc-test>

    <ajc-test num="502" dir="new"
      title="Unable to bind privately-introduced field name from introduced method in the same aspect"
      keywords="from-resolved_10x">
        <compile files="IntroducedFieldsNotBinding.java"/>
        <run class="IntroducedFieldsNotBinding"/>
    </ajc-test>

    <ajc-test num="503" dir="new/anonInnerClass" pr="297"
      title="anonymous inner class with aspect" keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="504" dir="new" pr="335"
      title="Arguments are not being passed in to calls advice"
      keywords="from-resolved_10x">
        <compile files="PR335.java"/>
        <run class="PR335"/>
    </ajc-test>

    <ajc-test num="505" dir="design/intro" title="interfaces as mixins with introduction"
      abccomment="fails because we don't match I.new(..) correctly. ODM 04/07/04"
      keywords="from-resolved_10x">
        <compile files="Interfaces.java"/>
        <run class="Interfaces"/>
    </ajc-test>

    <ajc-test num="506" dir="new"
      title="functional modifiers work correctly with introduced members"
      abccomment="test depends on implementation-specific naming convention, via reflection.
                  Cloned as 50601. ODM 11/08/04"
      keywords="from-resolved_10x">
    <abckeywords> <skip/> </abckeywords>
        <compile files="IntroducedModifiers.java"/>
        <run class="IntroducedModifiers"/>
    </ajc-test>

    <ajc-test num="50601" dir="abctests/new"
      title="functional modifiers work correctly with introduced members"
      abccomment="test depends on implementation-specific naming convention, via reflection.
                  Cloned from 506. ODM 11/08/04. Impossible to get this right
                  for abc, because the field name depends on the name generator."
      keywords="from-resolved_10x">
      <abckeywords> <skip/> </abckeywords>
        <compile files="IntroducedModifiers.java"/>
        <run class="IntroducedModifiers"/>
    </ajc-test>

    <ajc-test num="507" dir="new"
      title="ExceptionInInitializerError accessing cflow in aspect initialization - before variants"
      keywords="from-resolved_10x">
        <compile files="CflowInitInAspectVariantsBefore.java"/>
        <run class="CflowInitInAspectVariantsBefore"/>
    </ajc-test>

    <ajc-test num="508" dir="new"
      title="NoClassDefFoundError accessing cflow in aspect initialization - after variants"
      keywords="from-resolved_10x">
        <compile files="CflowInitInAspectVariantsAfter.java"/>
        <run class="CflowInitInAspectVariantsAfter"/>
    </ajc-test>

    <ajc-test num="509" dir="new" title="InternalCompilerError in JpPlan when args alone"
      keywords="from-resolved_10x">
        <compile files="ArgsAlone.java"/>
        <run class="ArgsAlone"/>
    </ajc-test>

    <ajc-test num="510" dir="new" pr="527"
      title="compile error using pcd if() with advice on introduced methods."
      keywords="from-resolved_10x">
        <compile files="PR527.java"/>
        <run class="PR527"/>
    </ajc-test>

    <ajc-test num="511" dir="new" pr="528"
      title="compile errors boolean using cflow and unimplemented method using around advice on methods introduced by interface"
      keywords="from-resolved_10x">
        <compile files="PR528.java"/>
        <run class="PR528"/>
    </ajc-test>

    <ajc-test num="512" dir="new" pr="534" title="aspect as member of interface"
      keywords="from-resolved_10x">
        <compile files="AspectInInterfaceCP.java"/>
        <run class="AspectInInterfaceCP"/>
    </ajc-test>

    <ajc-test num="513" dir="new" pr="535"
      title="missing method name to synthetic invocation"
      keywords="from-resolved_10x,new-messages-vary">
        <compile files="PR535.java"/>
        <run class="PR535"/>
    </ajc-test>

    <ajc-test num="514" dir="new" pr="536"
      title="protected subclass impl of superclass method with default access and variants"
      keywords="from-resolved_10x">
        <compile files="RestrictingVisibilityCP.java"/>
        <run class="RestrictingVisibilityCP"/>
    </ajc-test>

    <ajc-test num="515" dir="new" pr="519" title="Exception planning advice"
      keywords="from-resolved_10x">
        <compile files="PR519.java" options="-Xlint:ignore"/>
        <run class="PR519"/>
    </ajc-test>

    <ajc-test num="516" dir="new" pr="521"
      title="unreproduced bug with advice - probably UTR"
      keywords="from-resolved_10x">
        <compile files="PR520.java"/>
        <run class="PR520"/>
    </ajc-test>

    <ajc-test num="517" dir="new" pr="494"
      title="introduced inner interfaces accessible inside aspect"
      keywords="from-resolved_10x">
        <compile files="IntroduceInnerInterfaceCP.java"/>
        <run class="IntroduceInnerInterfaceCP"/>
    </ajc-test>

    <ajc-test num="518" dir="new" pr="525"
      title="validate (enclosing) join point and source locations"
      keywords="from-resolved_10x">
        <compile files="NegativeSourceLocation.java" options="-Xlint:ignore"/>
        <run class="NegativeSourceLocation"/>
    </ajc-test>

    <ajc-test num="519" dir="new" pr="544"
      title="advice formals are just like method formals"
      keywords="from-resolved_10x">
        <compile files="AdviceFormalsCp.java"/>
        <run class="AdviceFormalsCp"/>
    </ajc-test>

    <ajc-test num="520" dir="new" pr="544"
      title="advice formals produce errors just like method formals"
      abccomment="we give up in each method after finding the first error"
      keywords="from-resolved_10x">
        <compile files="AdviceFormalsCf.java">
            <ajcmessage kind="error" line="28"/>
            <ajcmessage kind="error" line="29"/>
            <ajcmessage kind="error" line="36"/>
            <ajcmessage kind="error" line="37"/>
            <message kind="error" line="28"/>
            <message kind="error" line="36"/>
        </compile>
    </ajc-test>

    <ajc-test num="521" dir="new"
      title="advice throws clauses must be compatible with joinpoints they apply to"
      keywords="from-resolved_10x">
        <compile files="AdviceThrowsCp.java"/>
        <run class="AdviceThrowsCp"/>
    </ajc-test>

    <ajc-test num="522" dir="new" pr="570"
      title="potential method conflicts with introductions and interfaces and PR#561"
      keywords="from-resolved_10x">
        <compile files="MethodConflictsCP.java"/>
        <run class="MethodConflictsCP"/>
    </ajc-test>

    <ajc-test num="523" dir="new" pr="570"
      title="illegal method conflicts with introductions and interfaces and PR#561"
      abccomment="abc gives one error for one mistake, and ajc gives several. ODM 11/08/04"
      keywords="from-resolved_10x">
        <compile files="MethodConflictsCF.java">
            <ajcmessage kind="error" line="8"/>
            <ajcmessage kind="error" line="20"/>
            <ajcmessage kind="error" line="28"/>
            <message kind="error" line="28"/>
        </compile>
    </ajc-test>  

    <ajc-test num="524" dir="new" title="AspectOf available for different aspect types"
      abccomment="we don't support aspect as a variable name"
      keywords="from-resolved_10x">
        <abckeywords><skip/></abckeywords>
        <compile files="AspectOf.java"/>
        <run class="AspectOf"/>
    </ajc-test>

    <ajc-test num="525" dir="new/privilegedAspects" pr="35593"
      title="access to all members of class and inner class from privileged aspect"
      keywords="from-resolved_10x">
        <compile
          files="driver/PrivilegedAspect.java,util/Util.java,pack/DefaultTarget.java,pack/PublicTarget.java"/>
        <run class="driver.PrivilegedAspect"/>
    </ajc-test>

    <ajc-test num="526" dir="new"
      title="cflow alone with around produces compiler bcg StackOverflowError"
      keywords="from-resolved_10x">
        <compile files="CflowAlone.java"/>
        <run class="CflowAlone"/>
    </ajc-test>

    <ajc-test num="527" dir="new"
      title="get/set join points run for complex assignment operators (+=, etc.) (working)"
      keywords="from-resolved_10x">
        <compile files="AssignOps.java"/>
        <run class="AssignOps"/>
    </ajc-test>

    <ajc-test num="528" dir="new/introTypeMissing"
      title="this available in introduced field initializers"
      keywords="from-resolved_10x">
        <compile files="ThisInIntroFieldInit.java"/>
        <run class="ThisInIntroFieldInit"/>
    </ajc-test>

    <ajc-test num="529" dir="new/introTypeMissing"
      title="Introduced type unavailable to cast expressions in introduced methods"
      keywords="from-resolved_10x">
        <compile files="Cast.java,TargetClass.java,Util.java"/>
        <run class="Cast"/>
    </ajc-test>

    <ajc-test num="530" dir="new/introTypeMissing"
      title="Introduced type unavailable to qualified new expressions in introduced methods"
      keywords="from-resolved_10x">
        <compile files="Inner.java,TargetClass.java,Util.java"/>
        <run class="Inner"/>
    </ajc-test>

    <ajc-test num="531" dir="new/introTypeMissing"
      title="Introduced type unavailable to cast expressions in introduced field initializers"
      keywords="from-resolved_10x">
        <compile files="CastInFieldInit.java,TargetClass.java,Util.java"/>
        <run class="CastInFieldInit"/>
    </ajc-test>

    <ajc-test num="532" dir="new/introTypeMissing"
      title="Aspect type unavailable to qualified new expressions in body of introduced methods"
      keywords="from-resolved_10x">
        <compile files="AspectInIntroducedMethod.java"/>
        <run class="AspectInIntroducedMethod"/>
    </ajc-test>

	<!-- This behavior is different from 1.0, but we might want to consider allowing it
	     Using the eclipse compiler it would be much easier to permit than forbid. -->
    <ajc-test num="533" dir="new/introTypeMissing"
      title="Introduced type unavailable to instanceof expressions in introduced methods"
      abccomment="ajc seems to think foo instanceof int is OK!"
      keywords="from-resolved_10x,knownLimitation">
        <compile files="InstanceOf.java,TargetClass.java,Util.java">
            <ajcmessage kind="error" line="19"/>
            <ajcmessage kind="error" line="20"/>
            <ajcmessage kind="error" line="21"/>
            <ajcmessage kind="error" line="22"/>
            <ajcmessage kind="error" line="23"/>
            <ajcmessage kind="error" line="24"/>
            <ajcmessage kind="error" line="25"/>
            <ajcmessage kind="error" line="26"/>
            <message kind="error" line="19"/>
            <message kind="error" line="20"/>
            <message kind="error" line="21"/>
            <message kind="error" line="22"/>
            <message kind="error" line="23"/>
            <message kind="error" line="24"/>
            <message kind="error" line="25"/>
            <message kind="error" line="26"/>
            <message kind="error" line="29"/>
        </compile>
    </ajc-test>

    <ajc-test num="534" dir="new/introTypeMissing"
      title="Introduced type unavailable to qualified new expressions in introduced field initializers"
      keywords="from-resolved_10x">
        <compile files="InnerInFieldInit.java,TargetClass.java,Util.java"/>
        <run class="InnerInFieldInit"/>
    </ajc-test>

    <ajc-test num="535" dir="new" pr="595"
      title="variable slots and finally/catch causing verify errors"
      keywords="from-resolved_10final,from-resolved_10x">
        <compile files="AfterFinally.java"/>
        <run class="AfterFinally"/>
    </ajc-test>

    <ajc-test num="536" dir="new"
      title="enclosing join point not exported properly in pre-initialization join point"
      abccomment="we do what ajc does here, which is apparently not what is expected..."
      keywords="from-resolved_10x,knownLimitation">
        <abckeywords><skip/></abckeywords>
        <compile files="PreInitialization.java"/>
        <run class="PreInitialization"/>
    </ajc-test>

    <ajc-test num="537" dir="new" pr="590"
      title="after advice on static method with pcd if() using result"
      keywords="from-resolved_10x">
        <compile files="PR590.java">
            <message kind="error" line="20"/>
            <message kind="error" line="23"/>
        </compile>
    </ajc-test>

    <ajc-test num="538" dir="new" pr="590"
      title="after advice on static method with pcd if() using result through pointcut"
      keywords="from-resolved_10x">
        <compile files="PR590a.java" options="-Xlint:ignore">
            <message kind="error" line="29"/>
            <message kind="error" line="31"/>
        </compile>
    </ajc-test>

    <ajc-test num="539" dir="new/PR600" pr="600"
      title="AbstractMethodError for introduced methods (order 1)"
      keywords="from-resolved_10x">
        <compile files="Main.java,My_error.java,A.java,B.java,C.java"/>
        <run class="Main"/>
    </ajc-test>

    <ajc-test num="540" dir="new/PR600" pr="600"
      title="AbstractMethodError for introduced methods (order 2)"
      keywords="from-resolved_10x">
        <compile files="Main.java,My_error.java,C.java,A.java,B.java"/>
        <run class="Main"/>
    </ajc-test>

    <ajc-test num="541" dir="new/PR600" pr="600"
      title="AbstractMethodError for introduced methods (order 3)"
      keywords="from-resolved_10x">
        <compile files="My_error.java,A.java,B.java,C.java,Main.java"/>
        <run class="Main"/>
    </ajc-test>

    <ajc-test num="542" dir="new/PR600" pr="600"
      title="AbstractMethodError for introduced methods (order 4)"
      keywords="from-resolved_10x">
        <compile files="A.java,B.java,C.java,Main.java,My_error.java"/>
        <run class="Main"/>
    </ajc-test>

    <ajc-test num="543" dir="new/PR600" pr="600"
      title="AbstractMethodError for introduced methods (order 5)"
      keywords="from-resolved_10x">
        <compile files="A.java,B.java,Main.java,C.java,My_error.java"/>
        <run class="Main"/>
    </ajc-test>

    <ajc-test num="544" dir="new" title="declare error and abstract pointcuts"
      keywords="from-resolved_10x">
        <compile files="AbstractDeclare.java">
            <message kind="error" line="3"/>
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="545" dir="new/runtime"
      title="Exercise runtime classes (optionally in 1.1 VM)"
      keywords="from-resolved_10x">
        <compile files="AllRuntime.java,TesterDriver.java"/>
        <run class="TesterDriver"/>
    </ajc-test>

    <ajc-test num="546" dir="new"
      abccomment="we only generate the warning at the join point, not the advice location.
                  This should be fixed when we have multi-position errors."
      title="VerifyError after around advice falls off end of tryCatch"
      keywords="from-resolved_10x">
        <compile files="TryOffEnd.java">
            <ajcmessage kind="warning" line="13"/>
            <ajcmessage kind="warning" line="21"/>
            <message kind="warning" line="13"/>
        </compile>
        <run class="TryOffEnd"/>
    </ajc-test>

    <ajc-test num="547" dir="new" pr="635" title="Named within pointcuts failing"
      keywords="from-resolved_10x">
        <compile files="NamedWithinPointcuts.java"/>
        <run class="NamedWithinPointcuts"/>
    </ajc-test>

    <ajc-test num="548" dir="new/subaspects" pr="647"
      title="aspect with private abstract pointcut" 
   keywords="from-resolved_10x,fail-unimplemented">
        <compile files="PrivatePointcutCE.java">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>

   <ajc-test num="549" dir="new/subaspects" pr="647"
      title="concrete aspect unable to access abstract package-private pointcut in parent for overriding"
      abccomment = "abc bails out early, but ok. ODM 11/08/04"
      keywords="from-resolved_10x"
       comment="XXX getting error - confirm line numbers">
        <compile files="parent/ParentCE.java,child/ChildCE.java">
            <ajcmessage kind="error" file="child/ChildCE.java" line="21"/>
            <ajcmessage kind="error" file="child/ChildCE.java" line="31"/>
            <ajcmessage kind="error" file="parent/ParentCE.java" line="8"/>
            <ajcmessage kind="error" file="parent/ParentCE.java" line="10"/>
            <ajcmessage kind="error" file="parent/ParentCE.java" line="12"/>
            <ajcmessage kind="error" file="parent/ParentCE.java" line="22"/>
            <message kind="error" file="parent/ParentCE.java" line="22"/>
            <message kind="error" file="child/ChildCE.java" line="31"/>
        </compile>
    </ajc-test>

    <ajc-test num="550" dir="new/subaspects" pr="647"
      title="inner, outer, and outside-package subaspects of an aspect with abstract protected-, public-, and default-access pointcuts"
      keywords="from-resolved_10x">
        <compile
          files="parent/SubAspectVisibility.java,parent/ForeignChildHelper.java,child/ForeignChildAspect.java"/>
        <run class="parent.SubAspectVisibility"/>
    </ajc-test>

    <ajc-test num="551" dir="new/subaspects" pr="647"
      title="inner subaspects of an aspect with private pointcut"
      keywords="from-resolved_10x">
        <compile files="parent/PrivatePointcut.java"/>
        <run class="parent.PrivatePointcut"/>
    </ajc-test>

    <ajc-test num="552" dir="new/subaspects" pr="647"
      title="outer subaspects of an aspect with private pointcut"
      keywords="from-resolved_10x">
        <compile files="parent/PrivatePointcutOuterClass.java"/>
        <run class="parent.PrivatePointcutOuterClass"/>
    </ajc-test>

    <ajc-test num="553" dir="new/subaspects" pr="647"
      title="abstract aspect used statically should not cause instantiation of advice or pointcut"
      keywords="from-resolved_10x">
        <compile files="AbstractAspectUsedStatically.java"/>
        <run class="AbstractAspectUsedStatically"/>
    </ajc-test>

    <ajc-test num="554" dir="new"
      title="private inner interface accessible in scope when declared on outer class"
      abccomment="declare parents on a private interface goes wrong"
      keywords="from-resolved_10x">
        <compile files="DeclareAccess.java"/>
        <run class="DeclareAccess"/>
    </ajc-test>

    <ajc-test num="555" dir="new"
      title="accessing protected superclass members in and outside CCC from body of method introduction"
      keywords="from-resolved_10x">
        <compile files="SuperInIntroduction.java"/>
        <run class="SuperInIntroduction"/>
    </ajc-test>

    <ajc-test num="556" dir="new"
      title="accessing private superclass members from body of method introduction"
      keywords="from-resolved_10x">
        <compile files="SuperInIntroductionCE.java">
            <message kind="error" line="25"/>
            <message kind="error" line="26"/>
        </compile>
    </ajc-test>

    <ajc-test num="557" dir="new" title="simple test for around and casting"
      keywords="from-resolved_10x">
        <compile files="AroundCasting.java"/>
        <run class="AroundCasting"/>
    </ajc-test>

    <ajc-test num="558" dir="new/aroundinner" pr="620"
      title="aroundInner 1 - around advice inner Thread subclass running proceed but not writing field"
      keywords="from-resolved_10x">
        <compile files="ThreadNoField.java,Common.java"/>
        <run class="ThreadNoField"/>
    </ajc-test>

    <ajc-test num="559" dir="new/aroundinner" pr="620"
      title="aroundInner 2 - around advice inner Runnable running proceed and writing method-final proxy"
      keywords="from-resolved_10x">
        <compile files="Proxy.java,Common.java"/>
        <run class="Proxy"/>
    </ajc-test>

    <ajc-test num="560" dir="new/aroundinner" pr="620"
      title="aroundInner 3 - around advice inner class running proceed and writing field"
      keywords="from-resolved_10x">
        <compile files="Minimal.java,Common.java"/>
        <run class="Minimal"/>
    </ajc-test>

    <ajc-test num="561" dir="new/aroundinner" pr="620"
      title="aroundInner 4 - around advice inner Thread subclass running proceed and writing field"
      keywords="from-resolved_10x">
        <compile files="ThreadSub.java,Common.java"/>
        <run class="ThreadSub"/>
    </ajc-test>

    <ajc-test num="562" dir="new/aroundinner" pr="620"
      title="aroundInner 5 - around advice inner Runnable (subinterface) running proceed and writing field introduced on subinterface"
      keywords="from-resolved_10x">
        <compile files="RunnableSub.java,Common.java"/>
        <run class="RunnableSub"/>
    </ajc-test>

    <ajc-test num="563" dir="new" pr="636"
      title="Named local class closing over proceed invocation"
      keywords="from-resolved_10x">
        <compile files="LocalClassClosingOverProceed.java"/>
        <run class="LocalClassClosingOverProceed"/>
    </ajc-test>

    <ajc-test num="564" dir="new"
      title="beautiful recursive computation of factorial with around is now supported"
      keywords="from-resolved_10x">
        <compile files="CircularAdvice.java"/>
        <run class="CircularAdvice"/>
    </ajc-test>

    <ajc-test num="565" dir="new" pr="632"
      title="multi-dispatch not used for named pcd references"
      keywords="from-resolved_10x">
        <compile files="MultiDispatchCf.java">
            <message kind="error" line="54"/>
            <message kind="error" line="57"/>
            <message kind="error" line="60"/>
            <message kind="error" line="71"/>
        </compile>
    </ajc-test>

    <ajc-test num="566" dir="new" pr="632"
      title="multi-dispatch implemented through around + args"
      keywords="from-resolved_10x">
        <compile files="MultiDispatchCp.java"/>
        <run class="MultiDispatchCp"/>
    </ajc-test>

    <ajc-test num="567" dir="new"
      title="unrecognized aspect should not net Cloneable and Serializable warnings"
      keywords="from-resolved_10x">
        <compile files="UnrecognizedAspectCE.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>

    <ajc-test num="568" dir="new"
      title="unreachable code generated by around advice on the execution of void methods"
      abccomment="around weaver internal error - Sascha emailed - AGS 1/7/04"
      keywords="from-resolved_10x">
        <compile files="AroundVoid.java"/>
        <run class="AroundVoid"/>
    </ajc-test>

    <ajc-test num="569" dir="new" pr="654"
      title="Overriding method implementations using introduction on interfaces"
      keywords="from-resolved_10x,fail-unimplemented">
        <compile files="IntroductionsOverriding.java" options="-Xlint:ignore" />
        <run class="IntroductionsOverriding"/>
    </ajc-test>

    <ajc-test num="570" dir="new" pr="654"
      title="more coverage for around and concrete methods on interfaces"
      keywords="from-resolved_10x">
        <compile files="MultiAndAround.java" options="-Xlint:ignore"/>
        <run class="MultiAndAround"/>
    </ajc-test>

    <ajc-test num="571" dir="new" title="invalid number and type of proceed arguments"
      keywords="from-resolved_10x">
        <compile files="InvalidProceedArgsCE.java">
            <message kind="error" line="10"/>
            <message kind="error" line="15"/>
            <message kind="error" line="17"/>
            <message kind="error" line="20"/>
            <message kind="error" line="22"/>
            <message kind="error" line="27"/>
            <message kind="error" line="29"/>
            <message kind="error" line="31"/>
            <message kind="error" line="37"/>
            <message kind="error" line="39"/>
            <message kind="error" line="43"/>
            <message kind="error" line="46"/>
        </compile>
    </ajc-test>

    <ajc-test num="572" dir="new" pr="694" title="after returning advice order"
      keywords="from-resolved_10x">
        <compile files="Cricket.java"/>
        <run class="Cricket"/>
    </ajc-test>

    <ajc-test num="573" dir="new" pr="694" title="after returning advice param"
      keywords="from-resolved_10x">
        <compile files="AfterReturningParam.java"/>
        <run class="AfterReturningParam"/>
    </ajc-test>

    <ajc-test num="574" dir="new" pr="695"
      title="! and declaring types with callee-side call join points"
      keywords="from-resolved_10x">
        <compile files="NotAndDeclaringTypes.java" options="-Xlint:ignore"/>
        <run class="NotAndDeclaringTypes"/>
    </ajc-test>

    <ajc-test num="575" dir="new" pr="479"
      title=". Binding the wrong arguments in withincode(..)."
      keywords="from-resolved_10x">
        <compile files="BindingArgumentsInWithincode.java"/>
        <run class="BindingArgumentsInWithincode"/>
    </ajc-test>

    <ajc-test num="576" dir="new" pr="479"
      title=". Matching arguments in cflow correctly."
      keywords="from-resolved_10x">
        <compile files="MatchingArgumentsInCflow.java"/>
        <run class="MatchingArgumentsInCflow"/>
    </ajc-test>

    <ajc-test num="577" dir="new" pr="480"
      title=". Binding variables with numbers in their name with pertarget(..)'s."
      keywords="from-resolved_10x">
        <compile files="PerTargetAndVariablesWithNumbersInTheirNames.java"/>
        <run class="PerTargetAndVariablesWithNumbersInTheirNames"/>
    </ajc-test>

    <ajc-test num="578" dir="new" pr="554"
      title="second arg in formal on shared joinpoint with pcd if() causes verify error ??"
      keywords="from-resolved_10rc3">
        <compile files="PR554.java"/>
        <run class="PR554"/>
    </ajc-test>

    <ajc-test num="579" dir="new/privilegedAspects" pr="555"
      title="access to private members from privileged aspect"
      keywords="from-resolved_10rc3">
        <compile
          files="driver/PR555.java,util/Util.java,pack/DefaultTarget.java"/>
        <run class="driver.PR555"/>
    </ajc-test>

    <ajc-test num="580" dir="new" pr="555"
      title="inner classes of privileged aspects cannot see target class private members"
      keywords="from-resolved_10rc3">
        <compile files="InnerClassInPrivilegedAspect.java"/>
        <run class="InnerClassInPrivilegedAspect"/>
    </ajc-test>

    <ajc-test num="581" dir="new/packageAccessPR556" pr="556"
      title="aspects should get package access outside the file"
      keywords="from-resolved_10rc3">
        <compile files="base1/p/C1.java,base2/p/C2.java"/>
        <run class="p.C1"/>
    </ajc-test>

    <ajc-test num="582" dir="new" pr="559"
      title="subclass advice not run for join points selected by superclass cflow-based pointcuts"
      keywords="from-resolved_10rc3">
        <compile files="PR559.java"/>
        <run class="PR559"/>
    </ajc-test>

    <ajc-test num="583" dir="new" pr="559"
      title="more issues with abstract aspects and cflow pointcuts"
      keywords="from-resolved_10rc3,fail-unimplemented">
        <compile files="AbstractCflows.java"/>
        <run class="AbstractCflows"/>
    </ajc-test>

    <ajc-test num="584" dir="new" pr="560"
      title="compile fails for aspect derived from percflow base aspect unless pointcut excludes base aspect and subaspects"
      keywords="from-resolved_10rc3">
        <compile files="PR560.java"/>
        <run class="PR560"/>
    </ajc-test>

	<!-- pointcuts aren't checked for circularities unless they're used -->
    <ajc-test num="585" dir="new" pr="568" title="cyclic pointcut definitions"
     abccomment="abc checks for cycles whether pointcuts are used or not. ODM 21/07/04"
      keywords="from-resolved_10rc3,knownLimitation">
        <compile files="CyclicPointcuts.java">
            <ajcmessage kind="error" line="11"/>
            <ajcmessage kind="error" line="14"/>
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="32"/>
            <ajcmessage kind="error" line="43"/>
            <message kind="error" line="11"/>
            <message kind="error" line="14"/>
            <message kind="error" line="15"/>
            <message kind="error" line="19"/>
            <message kind="error" line="20"/>
            <message kind="error" line="29"/>
            <message kind="error" line="32"/>
            <message kind="error" line="40"/>
            <message kind="error" line="43"/>
        </compile>
    </ajc-test>

    <ajc-test num="586" dir="new" pr="573"
      title="pertarget stack overflow getting name of anonymous (Interface) class"
      keywords="from-resolved_10rc3">
        <compile files="PR573.java"/>
        <run class="PR573"/>
    </ajc-test>

    <ajc-test num="587" dir="new" pr="573"
      title="pertarget stack overflow getting name of anonymous (Object) class"
      keywords="from-resolved_10rc3">
        <compile files="PR573_1.java"/>
        <run class="PR573_1"/>
    </ajc-test>

    <ajc-test num="588" dir="new" pr="573"
      title="pertarget runtime stack overflow (getting name of anonymous (Object) class?)"
      keywords="from-resolved_10rc3">
        <compile files="PR573_2.java"/>
        <run class="PR573_2"/>
    </ajc-test>

    <ajc-test num="589" dir="new"
      title="PR584 Can construct inner classes using qualified expressions"
      keywords="from-resolved_10rc3,purejava">
        <compile files="PR584.java"/>
        <run class="PR584"/>
    </ajc-test>

    <ajc-test num="590" dir="new" pr="685"
      title="subaspect method declaration on superaspect inner interface (names)"
      keywords="from-resolved_104">
        <compile files="InnerInterfaceNames.java"/>
        <run class="InnerInterfaceNames"/>
    </ajc-test>

    <ajc-test num="591" dir="new" pr="685"
      title="subaspect method declaration on superaspect inner interface (access)"
      keywords="from-resolved_104">
        <compile files="InnerInterfaceAccess.java"/>
        <run class="InnerInterfaceAccess"/>
    </ajc-test>

    <ajc-test num="592" dir="new" pr="685"
      title="subaspect method declaration on superaspect inner interface (types)"
      keywords="from-resolved_104">
        <compile files="InnerInterfaceTypes.java,InnerInterfaceTypesHelper.java"/>
        <run class="InnerInterfaceTypes"/>
    </ajc-test>

    <ajc-test num="593" dir="new" pr="691" title="around AST type XXX"
      abccomment="around weaver internal error - Sascha emailed - AGS 1/7/04"
      keywords="from-resolved_104">
        <compile files="PR691.java"/>
        <run class="PR691"/>
    </ajc-test>

    <ajc-test num="594" dir="new" pr="687"
      title="around all execution with double assignment in initializer (simple)"
      abccomment="around weaver internal error - Sascha emailed - AGS 1/7/04"
      keywords="from-resolved_104">
        <compile files="AroundDoubleAssignment.java"/>
        <run class="AroundDoubleAssignment"/>
    </ajc-test>

    <ajc-test num="595" dir="new" pr="687"
      title="around all execution with double assignment in initializer (coverage)"
      abccomment="around weaver internal error - Sascha emailed - AGS 1/7/04"
      keywords="from-resolved_104">
        <compile files="AroundDoubleAssignmentC.java"/>
        <run class="AroundDoubleAssignmentC"/>
    </ajc-test>

    <ajc-test num="596" dir="new"
      title="changing this in around's proceed reported by Rich Price"
      keywords="from-resolved_104">
        <compile files="AroundChangeThis.java" options="-1.4"/>
        <run class="AroundChangeThis"/>
    </ajc-test>

    <ajc-test num="597" dir="new" pr="548"
      title="default package for aspect introductions is not the current package"
      keywords="from-resolved_10rc3,from-resolved_104">
        <compile
          files="introductionPackage/two/C.java,introductionPackage/one/C.java,introductionPackage/one/Aspect.java,introductionPackage/one/TestAspect.java"/>
        <run class="one.TestAspect"/>
    </ajc-test>

    <ajc-test num="598" dir="new/PR569" pr="569"
      title="anon class written to wrong directory" 
   keywords="from-resolved_104,from-resolved_104">
        <compile files="a/IntroAnon.java,a/MyInterface.java,b/Dest.java"/>
        <run class="a.IntroAnon"/>
    </ajc-test>

    <ajc-test num="599" dir="new" pr="603"
      title="unqualified transitive pointcut references not resolved"
      keywords="from-resolved_104">
        <compile files="PointcutQualification.java"/>
        <run class="PointcutQualification"/>
    </ajc-test>

    <ajc-test num="600" dir="new" pr="603"
      title="unqualified transitive pointcut references not resolved - 2"
      keywords="from-resolved_104">
        <compile files="PointcutQualification2.java"/>
        <run class="PointcutQualification2"/>
    </ajc-test>

    <ajc-test num="601" dir="new" pr="619"
      title="direct use outside aspect of defined abstract pointcut"
      keywords="from-resolved_104">
        <compile files="AbstractPointcutAccess.java"/>
        <run class="AbstractPointcutAccess"/>
    </ajc-test>

    <ajc-test num="602" dir="new" pr="619"
      title="direct use outside aspect of undefined abstract pointcut"
      keywords="from-resolved_104">
        <compile files="AbstractPointcutAccessCE.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="603" dir="new" pr="619"
      title="indirect use outside aspect of undefined abstract pointcut"
      abccomment="one error from abc, ok. ODM 20/07/04"
      keywords="from-resolved_104">
        <compile files="AbstractPointcutIndirectCE.java">
            <ajcmessage kind="error" line="9"/>
            <ajcmessage kind="error" line="5"/>
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>

    <ajc-test num="604" dir="new" pr="658"
      title="simple call join point tests for JoinPoint SourceLocation context"
      keywords="from-resolved_104">
        <compile files="SourceLocationCall.java"/>
        <run class="SourceLocationCall"/>
    </ajc-test>

    <ajc-test num="605" dir="new" pr="661"
      title="!target with second advice on casted call"
      keywords="from-resolved_104">
        <compile files="CallNotTarget.java"/>
        <run class="CallNotTarget"/>
    </ajc-test>

    <ajc-test num="606" dir="new" pr="666" title="name binding in around cflow"
      abccomment="around weaver internal error - Sascha emailed - AGS 1/7/04"
      keywords="from-resolved_104">
        <compile files="AroundCall.java"/>
        <run class="AroundCall"/>
    </ajc-test>

    <ajc-test num="607" dir="new" pr="660" title="name binding in around cflow - 2"
      abccomment="around weaver internal error - Sascha emailed - AGS 1/7/04"
      keywords="from-resolved_104">
        <compile files="ArgsInCflow2.java"/>
        <run class="ArgsInCflow2"/>
    </ajc-test>

    <ajc-test num="608" dir="new" pr="677"
      title="around name-binding in cflows using factorial"
      keywords="from-resolved_104">
        <compile files="FactorialCflow.java"/>
        <run class="FactorialCflow"/>
    </ajc-test>

    <ajc-test num="609" dir="new" pr="715" title="incrementing objects, arrays - 2"
      keywords="from-resolved_104,purejava">
        <compile files="ArrayInc2CE.java">
            <message kind="error" line="12"/>
            <message kind="error" line="13"/>
            <message kind="error" line="14"/>
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>

    <ajc-test num="610" dir="new" pr="715" title="incrementing objects, arrays CE"
      abccomment="slightly different errors reported"
      keywords="from-resolved_104,purejava,messages-vary">
        <compile files="ArrayIncCE.java"
               options="!eclipse">
            <ajcmessage kind="error" line="15"/>
            <ajcmessage kind="error" line="16"/>
            <ajcmessage kind="error" line="17"/>
            <ajcmessage kind="error" line="18"/>
            <ajcmessage kind="error" line="19"/>
            <message kind="error" line="15"/>
            <message kind="error" line="16"/>
            <message kind="error" line="17"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
            <message kind="error" line="20"/>
        </compile>
    </ajc-test>

    <ajc-test num="611" dir="new" pr="715" title="incrementing objects, arrays - 3"
      keywords="from-resolved_104,purejava">
        <compile files="ArrayInc3CE.java">
            <message kind="error" line="15"/>
            <message kind="error" line="16"/>
            <message kind="error" line="17"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
        </compile>
    </ajc-test>

    <ajc-test num="612" dir="new" pr="715" title="incrementing objects, arrays"
      keywords="from-resolved_104,purejava">
        <compile files="ArrayInc.java"/>
        <run class="ArrayInc"/>
    </ajc-test>

    <ajc-test num="613" dir="new" title="replacing this or target in around advice"
      keywords="from-resolved_104">
        <compile files="TargetObjectReplacement.java"/>
        <run class="TargetObjectReplacement"/>
    </ajc-test>

    <ajc-test num="614" dir="new"
      title="after returning from initialization and after executing constructor"
      abccomment="we don't support target as a variable name in pointcuts"
      keywords="from-resolved_104">
        <abckeywords><skip/></abckeywords>
        <compile files="ConstructorExecInit.java"/>
        <run class="ConstructorExecInit"/>
    </ajc-test>

    <ajc-test num="61401" dir="abctests/new"
      title="after returning from initialization and after executing constructor"
      keywords="from-resolved_104">
        <compile files="ConstructorExecInit.java"/>
        <run class="ConstructorExecInit"/>
    </ajc-test>

    
    <ajc-test num="615" dir="new"
      abccomment="we don't support target as a variable name in pointcuts"
      title="after returning from initialization causes ExceptionInInitializer in aspect">
        <abckeywords><skip/></abckeywords>
        <compile files="ConstructorExecInitFails.java"/>
        <run class="ConstructorExecInitFails"/>
    </ajc-test>

    <ajc-test num="61501" dir="abctests/new"
      title="after returning from initialization causes ExceptionInInitializer in aspect">
        <compile files="ConstructorExecInitFails.java"/>
        <run class="ConstructorExecInitFails"/>
    </ajc-test>

    <ajc-test num="616" dir="new" pr="659"
      title="name binding in before cflow containing cflowbelow"
      keywords="from-resolved_104">
        <compile files="ArgsInCflow.java" options="!eclipse">
            <ajcmessage kind="error" line="29"/>
            <ajcmessage kind="error" line="32"/>
            <message kind="error" line="32"/>
        </compile>
    </ajc-test>


    <ajc-test num="617" dir="pureJava" pr="737"
      title="no circularity errors simply because of inners (1)"
      keywords="from-resolved_105,purejava">
        <compile files="circle/Test1CP.java"/>
        <run class="circle.Test1CP"/>
    </ajc-test>

    <ajc-test num="618" dir="pureJava" pr="737"
      title="no circularity errors simply because of inners (2)"
      keywords="from-resolved_105,purejava">
        <compile files="circle/Test2CP.java"/>
        <run class="circle.Test2CP"/>
    </ajc-test>

    <ajc-test num="619" dir="pureJava" pr="737"
      title="should have circular inheritance errors (1)"
      keywords="from-resolved_105,purejava,messages-vary">
      <abckeywords> <nate/><laurie/></abckeywords>
        <compile files="circle/Test1CF.java"
               options="!eclipse">
            <message kind="error" line="7"/>
            <message kind="error" line="15"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>

    <ajc-test num="620" dir="pureJava" pr="737"
      title="should have circular inheritance errors (2)"
      abccomment="we only report one error for each inheritance loop"
      keywords="from-resolved_105,purejava,messages-vary">
      <abckeywords> <nate/><laurie/></abckeywords>
        <compile files="circle/Test2CF.java"
               options="!eclipse">
            <ajcmessage kind="error" line="6"/>
            <ajcmessage kind="error" line="10"/>
            <ajcmessage kind="error" line="15"/>
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>

    <ajc-test num="621" dir="new/pr728" pr="728" title="file order in type searching"
      keywords="from-resolved_105">
        <compile files="AnotherClass.java,Interface.java"/>
        <run class="AnotherClass"/>
    </ajc-test>

    <ajc-test num="622" dir="pureJava" pr="728"
      title="interface using preceding subinterface in its definition"
      abccomment="in abc get IncompatibleClassChangeError. Example sent
                  to Jennifer.  July 6/04 LJH"
      keywords="from-resolved_105,purejava">
        <abckeywords> <jennifer/> <laurie/> </abckeywords>
        <compile files="ParentUsingChild.java"/>
        <run class="ParentUsingChild"/>
    </ajc-test>

    <ajc-test num="623" dir="new" pr="645"
      title="Parent interface using public inner interface of child in same file"
      abccomment="in abc get IncompatibleClassChangeError. Example sent
                  to Jennifer.  July 6/04 LJH"
      keywords="from-resolved_105,purejava">
        <abckeywords> <jennifer/> <laurie/> </abckeywords>
        <compile files="ParentInterfaceUsingChildInnerInterface.java"/>
        <run class="ParentInterfaceUsingChildInnerInterface"/>
    </ajc-test>

    <ajc-test num="624" dir="errors"
      title="a type is not allowed to extend or implement its own innner type"
      abccomment="jlc does not catch error, reported to Nate July 6/04 LJH"
      keywords="from-resolved_105,purejava">
        <abckeywords> <nate/> <laurie/> </abckeywords>
        <compile files="NestedInterfaceTest.java">
            <message kind="error" line="1"/>
        </compile>
    </ajc-test>

    <ajc-test num="625" dir="pureJava" title="try requires block JLS 14.19"
      keywords="from-resolved_105,purejava,messages-vary"
      abccomment="abc parser throws extra error. PA/AGS">
        <compile files="TryBlockRequiredCE.java"
               options="!eclipse">
            <ajcmessage kind="error" line="6"/>
	    <message kind="error"/>
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="626" dir="pureJava" pr="722" title="loop expressions not declarations"
      keywords="from-resolved_105,purejava,messages-vary"
      abccomment="really has three errors.  July 3.04 LJH" >
        <compile files="DeclarationsInLoopsCE.java"
                options="!eclipse">
            <ajcmessage kind="error" line="7"/>
            <message kind="error" line="7"/>
            <message kind="error" line="8"/>
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>

    <ajc-test num="627" dir="new" pr="663"
      title="no error when public class is in file of a different name"
      keywords="from-resolved_105,purejava">
        <compile options="-strict" files="PublicClassWrongFilename.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>

    <ajc-test num="628" dir="pureJava" pr="739"
      title="local variables must be final to be accessed from inner class"
      abccomment="ajc finds spurious errors about not being able to
                     resolve anonymous classes.   Found another bug
                   about not finding a uninit var and reported both
                   to Nate July 6/04 LJH"
      keywords="from-resolved_105,purejava">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="LocalsFromInnerCE.java">
            <message kind="error" line="6"/>
            <message kind="error" line="13"/>
            <message kind="error" line="19"/>
            <message kind="error" line="25"/>
            <message kind="error" line="32"/>
            <message kind="error" line="40"/>
            <message kind="error" line="51"/>
            <message kind="error" line="61"/>
            <message kind="error" line="67"/>
            <message kind="error" line="75"/>
            <message kind="error" line="81"/>
        </compile>
    </ajc-test>

    <ajc-test num="629" dir="pureJava" pr="739"
      title="final local variables may be accessed from inner class"
      keywords="from-resolved_105,purejava">
        <compile files="LocalsFromInnerCP.java"/>
        <run class="LocalsFromInnerCP"/>
    </ajc-test>


    <ajc-test num="630" dir="pureJava" pr="723" title="missing package identifier"
      keywords="from-resolved_105,purejava">
        <compile files="MissingPackageCE.java">
            <message kind="error" line="2"/>
        </compile>
    </ajc-test>

    <ajc-test num="631" dir="pureJava" pr="721"
      title="interface declaration not permitted in local method scope"
      abccomment="jlc doesn't find illegal nested interfaces"
      keywords="from-resolved_105">
      <abckeywords> <laurie/> <nate/> </abckeywords>
        <compile files="LocalInterfaceCE.java">
            <message kind="error" line="5"/>
            <message kind="error" line="8"/>
            <message kind="error" line="11"/>
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>

    <ajc-test num="632" dir="new" title="simple declare warning (NPE)"
      abccomment="we move the warning to a different line"
      keywords="from-resolved_105">
        <compile files="DeclareWarningMain.java">
            <ajcmessage kind="warning" line="5"/>
            <message kind="warning" line="4"/>
        </compile>
        <run class="DeclareWarningMain"/>
    </ajc-test>

    <ajc-test num="633" dir="new"
      title="package typepattern with no packages (in default package)"
      keywords="from-resolved_105,knownLimitation">
     <abckeywords> <warningbehaviour/> </abckeywords>
        <compile options="-Xlint" files="TypeNames.java">
            <message kind="warning" line="34"/>
            <message kind="warning" line="39"/>
            <message kind="warning" line="43"/>
            <message kind="warning" line="47"/>
        </compile>
        <run class="TypeNames"/>
    </ajc-test>

    <ajc-test num="634" dir="new" pr="701"
      title="CE for ambiguous type reference (two files in package)"
      abccomment="jlc doesn't find error when two classes in same package
                  have same name.  Reported to Nate July 6/04. LJH
                  Still not fixed as of August 26/04,  Nate says it will
                  take a while for it."
      keywords="from-resolved_105,purejava">
     <abckeywords> <nate/> <laurie/> </abckeywords>
        <compile
          files="ambiguousClass/AmbiguousReferent.java,ambiguousClass/AmbiguousClassReference.java">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>

    <ajc-test num="635" dir="new"
      title="initializer can throw so long as all constructors declare so"
      keywords="from-resolved_105,purejava">
        <compile files="InitializerWithThrow.java"/>
        <run class="InitializerWithThrow"/>
    </ajc-test>

    <ajc-test num="636" dir="pureJava"
      title="interfaces may not contain initializers (bug found by jacks)"
      abccomment="syntax errors, abc gives up after the first one, but
                  when the first is commented out, it finds the second
                  one.  I think this test case is fine.  July 6/04 LJH"
      keywords="from-resolved_105,purejava">
        <compile files="InterfaceMembersCf.java">
            <ajcmessage kind="error" line="2"/>
            <ajcmessage kind="error" line="3"/>
            <message kind="error" line="2"/>
        </compile>
    </ajc-test>

    <ajc-test num="637" dir="new" pr="755"
      title="ajc dies on cflow into field init anon class see knownbugs.txt"
      keywords="from-resolved_105">
        <compile files="CflowOfFieldInitAnonMethods.java" options="!eclipse">
        </compile>
        <run class="CflowOfFieldInitAnonMethods" options="!eclipse"/>
    </ajc-test>

    <ajc-test num="638" dir="pureJava"
      title="initializers must be able to complete normally (found by jacks)"
      abccomment="errors of abnormal exit from init and clinit not
                  found by jlc.  Example sent to Nate July 6/04 LJH"
      keywords="from-resolved_105,purejava,messages-vary">
      <abckeywords> <nate/> <laurie/> </abckeywords>
        <compile files="InitializerFlowCf.java"
               options="!eclipse">
            <message kind="error" line="2"/>
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="639" dir="new" pr="757" title="Incrementing interface-introduced field"
      keywords="from-resolved_105">
        <compile files="IntroducedFieldInc.java"/>
        <run class="IntroducedFieldInc"/>
    </ajc-test>


    <ajc-test num="640" dir="pureJava" title="more tests of super alone"
      keywords="from-resolved_105,purejava">
        <compile files="SuperIsWeird.java">
            <message kind="error" line="9"/>
            <message kind="error" line="13"/>
            <message kind="error" line="20"/>
            <message kind="error" line="21"/>
        </compile>
    </ajc-test>

    <ajc-test num="641" dir="new"
      title="The dynamic type, not the static one, should be used in if pcds"
      keywords="from-resolved_105">
        <compile files="StaticTypeInIf.java"/>
        <run class="StaticTypeInIf"/>
    </ajc-test>

    <ajc-test num="642" dir="new"
      abccomment="around weaver internal error - Sascha emailed - AGS 1/7/04"
      title="bad interaction with after returning, around and void methods (from Rich Price)"
      keywords="from-resolved_105">
        <compile files="AfterReturningResult.java"/>
        <run class="AfterReturningResult"/>
    </ajc-test>

    <ajc-test num="643" dir="new"
      abccomment="we don't support this kind of package name usage"
      title="type pattern matching for inner classes (from Ken Horn)"
      keywords="from-resolved_105">
        <abckeywords><skip/></abckeywords>
        <compile files="TypePat.java"/>
        <run class="test.TypePat"/>
    </ajc-test>

    <ajc-test num="64301" dir="abctests/new"
      title="type pattern matching for inner classes (from Ken Horn)"
      keywords="from-resolved_105">
        <compile files="test/TypePat.java"/>
        <run class="test.TypePat"/>
    </ajc-test>

    <ajc-test num="644" dir="new" pr="771" title="static initializer member name"
      keywords="from-resolved_105">
        <compile files="StaticInitName.java"/>
        <run class="StaticInitName"/>
    </ajc-test>

    <ajc-test num="645" dir="new" pr="770" title="cflow pcd syntax error"
      keywords="from-resolved_105">
        <compile files="IllegalCflowCE.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="646" dir="new" pr="764"
      title="binding args with indeterminate prefix and suffix"
      keywords="from-resolved_105">
        <compile files="IndeterminateArgs.java"/>
        <run class="IndeterminateArgs"/>
    </ajc-test>

    <ajc-test num="647" dir="new" pr="764"
      title="flag errors when binding args with indeterminate prefix and suffix"
      abccomment="ajc reports errors in named pointcuts at use; we report
                  the error at the point of declaration. ODM 13/08/04"
      keywords="from-resolved_105,knownLimitation">
        <compile files="IndeterminateArgsCE.java">
            <ajcmessage kind="error" line="67"/>
            <ajcmessage kind="error" line="68"/>
            <ajcmessage kind="error" line="70"/>
            <ajcmessage kind="error" line="72"/>
            <message kind="error" line="65"/>
            <message kind="error" line="66"/>
            <message kind="error" line="67"/>
            <message kind="error" line="68"/>
        </compile>
    </ajc-test>

    <ajc-test num="648" dir="new" pr="764"
      title="check arg types with indeterminate prefix and suffix"
      keywords="from-resolved_105">
        <compile files="IndeterminateArgType.java"/>
        <run class="IndeterminateArgType"/>
    </ajc-test>

    <ajc-test num="649" dir="new" pr="764"
      title="testing and binding args with single indeterminate prefix and suffix"
      keywords="from-resolved_105">
        <compile files="IndeterminateArg.java"/>
        <run class="IndeterminateArg"/>
    </ajc-test>

    <ajc-test num="650" dir="new" pr="764"
      title="binding handler args with indeterminate prefix and suffix"
      keywords="from-resolved_105">
        <compile files="IndeterminateHandlerArg.java"/>
        <run class="IndeterminateHandlerArg"/>
    </ajc-test>


    <ajc-test num="651" dir="pureJava"
      title="Locals inside other locals, ordering of processing [eh]"
      abccomment="Verify error in abc and j2j (when --app used).
                  Reported to Jennifer, July 1/04 LJH, Fixed July 2/04"
      keywords="from-resolved_105">
        <compile files="LocalInners2.java"/>
        <run class="LocalInners2"/>
    </ajc-test>

    <ajc-test num="652" dir="pureJava" pr="752"
      title="subclass access to enclosing super class private members"
      keywords="from-resolved_105,purejava,fail-unimplemented">
        <compile files="SubclassAccessToEnclosingSuperClassPrivate.java"/>
        <run class="SubclassAccessToEnclosingSuperClassPrivate"/>
    </ajc-test>

	<ajc-test num="653" dir="new/nolang" pr="762"
	  title="Compiling java.lang.Object with ajc yields non-verifying bytecode"
	  keywords="from-resolved_105"
	   comment="XXX weak/bad test">
	    <compile files="java/lang/Object.java,java/lang/String.java">
	    </compile>
	</ajc-test>

    <ajc-test num="654" dir="new"
      title="method-local class defined in around return statement"
      keywords="from-resolved_105">
        <compile files="MethodLocalAroundReturns.java"/>
        <run class="MethodLocalAroundReturns"/>
    </ajc-test>

    <ajc-test num="655" dir="new" title="CE expected for assignment to arg in if pcd"
      keywords="from-resolved_105">
        <compile files="IfPCDAssignmentCE.java">
            <message kind="error" line="16"/>
            <message kind="error" line="20"/>
        </compile>
    </ajc-test>

    <ajc-test num="656" dir="new" title="advising field get/sets when accessing via super"
      keywords="from-resolved_105">
        <compile files="SuperField.java"/>
        <run class="SuperField"/>
    </ajc-test>

    <ajc-test num="657" dir="new" title="accessing private members in outer types"
      keywords="from-resolved_105">
        <compile files="FieldInnerAccess.java"/>
        <run class="FieldInnerAccess"/>
    </ajc-test>

    <ajc-test num="658" dir="pureJava" title="various tests of switch bounds"
      keywords="from-resolved_106,purejava">
        <compile files="SwitchBounds.java"/>
        <run class="SwitchBounds"/>
    </ajc-test>

    <ajc-test num="659" dir="new" pr="601"
      title="VerifyError if nested sync returning result"
      comment="XXX inconsistent behavior?"
      abccomment="skipping since javac can't pass this either"
      keywords="from-resolved_10final,purejava">
        <compile files="NestedSyncWithResult.java"/>
        <run class="NestedSyncWithResult"/>
        <abckeywords><skip/></abckeywords>
    </ajc-test>

    <ajc-test num="660" dir="new" pr="853"
      title="declare interface extends class">
        <compile files="DeclareInterfaceExtendsClass.java">
           <message kind="error" line="10"/>
        </compile>
    </ajc-test>

    <ajc-test num="661" dir="new" pr="853"
      title="declare interface implements class">
        <compile files="DeclareInterfaceImplementsClass.java">
           <message kind="error" line="10"/>
        </compile>
    </ajc-test>

    <ajc-test num="662" dir="pureJava" title="assert flow"
      abccomment="assert b=false  should not definitely assign to b,
        so jlc does not give a later var not assigned error.  Reported
        to Polyglot bugzilla July 7/04 LJH"
      keywords="from-14tests,purejava">
        <compile options="-source,1.4" files="AssertsCF.java">
            <ajcmessage kind="error" line="8"/>
            <ajcmessage kind="error" line="11"/>
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="663" dir="pureJava" title="assert flow - 2"
      keywords="from-14tests,purejava">
        <compile options="-source,1.4" files="AssertsCF2.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>

    <ajc-test num="664" dir="pureJava" title="assert typing"
      keywords="from-14tests,purejava,fail-publicType">
        <compile options="-source,1.4" files="AssertsCF1.java">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>

    <ajc-test num="665" dir="pureJava" title="asserts" keywords="from-14tests">
        <compile options="-source,1.4" files="Asserts.java"/>
        <run class="Asserts" vm="1.4"/>
    </ajc-test>


    <ajc-test num="666" dir="pureJava" title="assert coverage tests [requires 1.4]"
      abccomment="seems to be broken in j2j, sent to Jennifer July 7/04 LJH"
      keywords="from-14tests,purejava">
        <abckeywords> <jennifer/> <laurie/> </abckeywords>
        <compile options="-source,1.4" files="AssertsCv.java"/>
        <run class="AssertsCv" vm="1.4"/>
    </ajc-test>

    <ajc-test num="667" dir="pureJava"
      title="assert coverage tests in one package [requires 1.4]"
      abccomment="seems to be broken in j2j, sent to Jennifer July 7/04 LJH"
      keywords="from-14tests,purejava,fail-unimplemented">
        <abckeywords> <jennifer/> <laurie/> </abckeywords>
        <compile options="-source,1.4" files="AssertInOnePackage.java"/>
        <run class="AssertInOnePackage" vm="1.4"/>
    </ajc-test>

    <ajc-test num="668" dir="new" title="assert tests in introduction [requires 1.4]"
      keywords="from-14tests,fail-unimplemented">
        <compile options="-source,1.4" files="AssertInIntro.java"/>
        <run class="AssertInIntro" vm="1.4"/>
    </ajc-test>

    <ajc-test num="669" dir="pureJava" title="compiling asserts in methods"
      keywords="from-14tests,purejava">
        <compile options="-source,1.4,-usejavac" files="AssertInMethod.java"/>
        <run class="AssertInMethod" vm="1.4"/>
    </ajc-test>

    <ajc-test num="670" dir="pureJava" pr="725"
      title="asserts in aspect and declared methods [requires 1.4]"
      keywords="from-14tests,purejava">
        <compile options="-source,1.4,-usejavac"
          files="IntroducedAssertion.java"/>
        <run class="IntroducedAssertion" vm="1.4"/>
    </ajc-test>

    <ajc-test num="671" dir="design/around"
      title="around and return types + inlining optimizations"
      comment="-XOcodeSize not in 1.1, source uses 1.4 APIs"
      keywords="from-14tests,knownLimitation">
        <compile options="-XOcodeSize,-source,1.4"
          files="ReturnCastProceed.java,StackChecker.java">
            <message kind="warning" line="68"/>
        </compile>
        <run class="ReturnCastProceed" vm="1.4"/>
    </ajc-test>


    <ajc-test num="672" dir="base/test131"
      title="various forms of package name pattern matching work"
      keywords="from-broken14usejavac">
        <compile files="Driver.java,p1/C1.java,p1/p2/C2.java" />
        <run class="Driver"/>
    </ajc-test>

    <ajc-test num="673" dir="new" pr="134"
      title="import of a class in the default package"
      abccomment="we get an extra (spurious, but not terrible) error"
      keywords="from-broken14usejavac,purejava">
        <compile files="ImportFromUnnamed.java,DeclaredExcs.java">
          <ajcmessage kind="error" line="2"/>
          <message kind="error" line="3"/>
          <message kind="error" line="12"/>
        </compile>
        <ajcrun class="ImportFromUnnamed"/>
    </ajc-test>

    <ajc-test num="674" dir="pureJava" pr="386"
      abccomment="javac can't pass this test case"
      title="Referencing static interfaces with import statements"
      keywords="from-broken14usejavac,purejava">
        <abckeywords><skip/></abckeywords>
        <compile files="ClassWithStaticInnerInterfaces.java"/>
        <compile includeClassesDir="true"
                 files="ImportingStaticInnerInterfaces_PR386.java"/>
        <run class="ImportingStaticInnerInterfaces_PR386"/>
    </ajc-test>

    <ajc-test num="675" dir="pureJava" pr="386"
      abccomment="tries to import inner classes invalidly.
                   Neither javac nor jikes pass this test.
                   It used to work with javac 1.3.1. See
                   http://www.geocities.com/herong_yang/jdk/unnamed_package.html
                   Decided to skip 18/08/04 ODM/OL/PA/AGS"
      title="Referencing static interfaces with import statements stars"
      keywords="purejava,from-broken14usejavac">
       <abckeywords> <skip/> </abckeywords>
        <compile files="ClassWithStaticInnerInterfaces.java"/>
        <compile includeClassesDir="true"
                 files="ImportingStaticInnerInterfacesStars_PR386.java"/>
        <run class="ImportingStaticInnerInterfacesStars_PR386"/>
    </ajc-test>

    <ajc-test num="676" dir="pureJava" pr="386"
      abccomment="See 675 : javac can't pass this"
      title="Referencing static interfaces with import statements stars 2"
      keywords="purejava,from-broken14usejavac">
       <abckeywords> <skip/> </abckeywords>
        <compile files="ClassWithStaticInnerInterfaces.java"/>
        <compile includeClassesDir="true"
                 files="ImportingStaticInnerInterfacesStars2_PR386.java"/>
        <run class="ImportingStaticInnerInterfacesStars2_PR386"/>
    </ajc-test>

    <ajc-test num="677" dir="pureJava" pr="386"
      abccomment="See 676 : javac can't pass this"
      title="Referencing static interfaces with import statements stars 3"
      keywords="purejava,from-broken14usejavac">
      <abckeywords> <skip/> </abckeywords>
        <compile files="ClassWithStaticInnerInterfaces.java"/>
        <compile includeClassesDir="true"
                 files="ImportingStaticInnerInterfacesStars3_PR386.java"/>
        <run class="ImportingStaticInnerInterfacesStars3_PR386"/>
    </ajc-test>

    <ajc-test num="678" dir="pureJava" pr="386"
      title="Referencing interfaces with import statements"
      abccomment="See 676" 
      keywords="purejava,from-broken14usejavac">
        <abckeywords><skip/></abckeywords>
        <compile
          files="ClassWithInnerInterfaces.java,ImportingInnerInterfaces_PR386.java"/>
        <run class="ImportingInnerInterfaces_PR386"/>
    </ajc-test>

    <ajc-test num="679" dir="pureJava" pr="386"
      abccomment="See 676"
      title="Referencing interfaces with import statements stars"
      keywords="purejava,from-broken14usejavac">
      <abckeywords><skip/></abckeywords>
        <compile
          files="ClassWithInnerInterfaces.java,ImportingInnerInterfacesStars_PR386.java"/>
        <run class="ImportingInnerInterfacesStars_PR386"/>
    </ajc-test>

    <ajc-test num="680" dir="pureJava" pr="386"
      abccomment="See 676"
      title="Referencing interfaces with import statements stars 2"
      keywords="purejava,from-broken14usejavac">
      <abckeywords><skip/></abckeywords>
        <compile
          files="ClassWithInnerInterfaces.java,ImportingInnerInterfacesStars2_PR386.java"/>
        <run class="ImportingInnerInterfacesStars2_PR386"/>
    </ajc-test>

    <ajc-test num="681" dir="pureJava" pr="386"
      title="Referencing interfaces with import statements stars 3"
      abccomment="See 676"
      keywords="purejava,from-broken14usejavac">
      <abckeywords><skip/></abckeywords>
        <compile
          files="ClassWithInnerInterfaces.java,ImportingInnerInterfacesStars3_PR386.java"/>
        <run class="ImportingInnerInterfacesStars3_PR386"/>
    </ajc-test>

    <ajc-test num="682" dir="new" pr="657"
      title="assert statement in advice coverage [requires 1.4]"
      keywords="from-14tests,fail-in-eclipse">
        <compile options="-source,1.4" files="AssertInAdvice.java"/>
        <run class="AssertInAdvice" vm="1.4"/>
    </ajc-test>

    <ajc-test num="683" dir="new" pr="657"
      title="assert statement in advice  [requires 1.4]" 
   keywords="from-14tests,fail-in-eclipse">
        <compile options="-source,1.4" files="AssertInAdviceBug.java"/>
        <run class="AssertInAdviceBug" vm="1.4"/>
    </ajc-test>

    <ajc-test num="684" dir="new" pr="823"
      title="declaring a private method on an inner interface"
      keywords="tofix">
        <compile files="PrivateMethodOnInnerInterface.java"/>
        <run class="PrivateMethodOnInnerInterface"/>
    </ajc-test>

    <ajc-test num="685" dir="new" pr="829"
      title="CE expected when declaring fields on arrays" keywords="tofix">
        <compile files="ArrayFieldDeclarationCE.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>

    <ajc-test num="686" dir="pureJava" pr="866"
      title="non-constant static final fields marked as final in .class">
        <compile files="FinalStaticField.java"/>
        <run class="FinalStaticField"/>
    </ajc-test>

    <ajc-test num="687" dir="new" pr="883"
      title="signature of handler join point">
        <compile files="HandlerSignature.java"/>
        <run class="HandlerSignature"/>
    </ajc-test>

    <ajc-test num="688" dir="new" pr="885"
      title="source locations within expressions">
        <compile files="SourceLocationWithinExpr.java"/>
        <run class="SourceLocationWithinExpr"/>
    </ajc-test>
    
    
    <ajc-test num="689" dir="new" pr="885" keywords="knownLimitation"
      abccomment="the pointcut in the source file refers to the wrong class, which means
                  that neither abc nor ajc can pass. Cloned in 68901"
      comment="this behaves differently in 1.3 from 1.4 for unknown reasons, merge with above when resolved"
      title="source locations within expressions (hard case of constructor start)">
        <abckeywords><skip/></abckeywords>
        <compile files="SourceLocationWithinExprHard.java"/>
        <run class="SourceLocationWithinExprHard"/>
    </ajc-test>

    <ajc-test num="68901" dir="abctests/new" pr="885" keywords="knownLimitation"
      abccomment="cloned from 689 and source file changed slightly"
      comment="this behaves differently in 1.3 from 1.4 for unknown reasons, merge with above when resolved"
      title="source locations within expressions (hard case of constructor start)">
        <compile files="SourceLocationWithinExprHard.java"/>
        <run class="SourceLocationWithinExprHard"/>
    </ajc-test>

    <ajc-test num="690" dir="new" pr="888"
      title="crashes given method in declared method">
        <compile files="DeclareMethodCE.java">
          <message kind="error" line="8"/>
        </compile>
    </ajc-test>

    <ajc-test num="691" dir="new" pr="889"
      title="after returning advice on interface constructor">
        <compile files="AfterReturningInterfaceConstructor.java"/>
        <run class="AfterReturningInterfaceConstructor"/>
    </ajc-test>
    
    <ajc-test num="692" dir="new" pr="889"
      abccomment="abc gives two errors, but ok. ODM 13/08/04"
      title="after returning advice on interface constructor - error">
        <compile files="AfterReturningInterfaceConstructorCE.java">
        	<ajcmessage kind="error" line="26"/>
        	<ajcmessage kind="warning" line="30"/>
                <message kind="error" line="26"/>
                <message kind="error" line="26"/>
                <message kind="warning" line="30"/>
        </compile>
    </ajc-test>

    <ajc-test num="693" dir="bugs" pr="900"
      title="after advice on static call join point">
        <compile files="AfterStaticCall.java"/>
        <run class="AfterStaticCall"/>
    </ajc-test>

    <ajc-test num="694" dir="bugs" pr="901"
      title="incompatible class change error"
      comment="XXX Jim and Erik found/fixed this - need basis">
        <compile files="IncompatibleClassChangeErrorBug.java"/>
        <run class="IncompatibleClassChangeErrorBug"/>
    </ajc-test>

    <ajc-test num="695" dir="bugs" pr="903"
      title="simple cflow of method execution">
        <compile files="ExecutionCflow.java"/>
        <run class="ExecutionCflow"/>
    </ajc-test>

    <ajc-test num="696" dir="bugs" pr="909"
      abccomment="LJH - the Soot -O option breaks on this one,  with
                   creating code with a bad stack height.  Comments in
                   the benchmark indicate that is it intended to cause
                   an error like this. LJH  July 10/04"
      title="using instance as class reference to constant field"
      comment="XXX need to verify run">
        <compile files="InstanceAsClassRefToConstant.java"/>
    </ajc-test>

    <!-- .................................... option tests -->
    <!-- .................................... -warn tests -->
      <ajc-test num="697" dir="options/deprecated" 
      title="options -warn:deprecation">
      <abckeywords> <warningbehaviour/> </abckeywords>
        <compile files="WarnDeprecated.java,OldStuff.java"
        	options="!eclipse,-warn:deprecation">
            <message kind="warning" line="10"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="698" dir="options/deprecated" 
      title="options -warn:deprecation not enabled">
        <compile files="WarnDeprecated.java,OldStuff.java"
        	options="!eclipse">
        </compile>
    </ajc-test>
 
    <!-- .................................... -Xlint tests -->
    <!-- ............... positive -Xlint tests -->
    <ajc-test num="699" dir="options" 
      title="options -Xlint args()" 
      keywords="lint">
     <abckeywords> <warningbehaviour/> </abckeywords>
        <compile files="XLintTypeArgsPCD.java"
             options="!Xlint">
            <message kind="warning" line="10"/>
        </compile>
    </ajc-test>
 
    <ajc-test num="700" dir="options" 
      title="options declare field on bad type">
        <compile files="XLintTypeDeclareField.java" options="!eclipse">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="701" dir="options" 
      title="options declare method on bad type">
        <compile files="XLintTypeDeclareMethod.java" options="!eclipse">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="702" dir="options" 
      title="options -Xlint declare parent" 
      keywords="lint">
     <abckeywords> <warningbehaviour/> </abckeywords>
        <compile files="XLintTypeDeclareParent.java"
        	options="!Xlint">
            <message kind="warning" line="10"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="703" dir="options" 
      title="options -Xlint target()" 
      keywords="lint">
      <abckeywords> <warningbehaviour/> </abckeywords>
        <compile files="XLintTypeTargetPCD.java"
        	options="!Xlint">
            <message kind="warning" line="10"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="704" dir="options" 
      title="options -Xlint this()" 
      keywords="lint">
     <abckeywords> <warningbehaviour/> </abckeywords>
        <compile files="XLintTypeThisPCD.java"
        	options="!Xlint">
            <message kind="warning" line="10"/>
        </compile>
    </ajc-test>

    <!-- ............... negative -Xlint tests -->
    <ajc-test num="705" dir="options" 
      title="options negative -Xlint args()" 
      keywords="lint">
        <abckeywords><skip/></abckeywords>
        <compile files="XLintTypeArgsPCD.java" options="-Xlint:ignore"/>
    </ajc-test>
    
    <ajc-test num="706" dir="options" 
      title="options negative -Xlint declare parent" 
      keywords="lint">
        <abckeywords><skip/></abckeywords>
        <compile files="XLintTypeDeclareParent.java" options="-Xlint:ignore"/>
    </ajc-test>
    
    <ajc-test num="707" dir="options" 
      title="options negative -Xlint target()" 
      keywords="lint">
        <abckeywords><skip/></abckeywords>
        <compile files="XLintTypeTargetPCD.java" options="-Xlint:ignore"/>
    </ajc-test>
    
    <ajc-test num="708" dir="options" 
      title="options negative -Xlint this()" 
      keywords="lint">
        <abckeywords><skip/></abckeywords>
        <compile files="XLintTypeThisPCD.java" options="-Xlint:ignore"/>
    </ajc-test>

   
    <!-- .................................... -injars tests -->

    <ajc-test num="709" dir="options/injars/simple" 
      title="source for options -injars">
        <compile files="Simple.java,Main.java"/>
        <run class="Main"/>
    </ajc-test>
 
    <ajc-test num="710" dir="options/injars/simple" 
      title="options -injars">
        <compile files="Simple.java,main.jar"
        	options="!eclipse"/>
        <run class="Main"/>
    </ajc-test>

    <!-- .................................... aspectpath tests -->
	<!-- The jars used by this test can be regenerated with
	     org.aspectj.ajdt.core/testsrc/org.aspectj.ajdt.internal.compiler.batch.BcweaverJarMaker
	-->
    <ajc-test num="711" dir="new/options11" 
      comment="XXX not validated correct yet"
      title="testing new options">
        <compile files="Main.java,injar.jar,Aspect.java" 
            aspectpath="aspectlib1.jar,aspectlib2.jar"/>
        <!-- can't run until we support classpath including the above jars
        <run class="Main"/>
        -->
    </ajc-test>
    
    
    <ajc-test num="712" dir="new" pr="774"
      title="interface self-reference in anonymous instance">
        <compile files="AnonymousSelfReference.java"/>
        <run class="AnonymousSelfReference"/>
    </ajc-test>
    
    <ajc-test num="713" dir="new" pr="776"
      title="self-reference from (aspect-declared) method-local class">
        <compile files="MethodSelfReference.java"/>
        <run class="MethodSelfReference"/>
    </ajc-test>
    
    <ajc-test num="714" dir="new" 
         abccomment="the ajc error is much nicer than the abc one"
         title="expect CE for unterminated declare error">
        <compile files="UnterminatedDeclareErrorCE.java">
            <ajcmessage kind="error" line="4"/>
            <message kind="error" line="5"/>
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="715" dir="new"
      title="expect CE for declaration collision between subaspects instead of domination order">
        <compile files="DeclarationCollisionCE.java">
            <ajcmessage kind="error" line="10"/>
            <ajcmessage kind="error" line="20"/>
            <ajcmessage kind="error" line="27"/>
	    <message kind="error" line="20"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="716" dir="new"
      title="subtype pattern in dominates should pick out aspect subtypes">
        <compile files="DominatesTypePattern.java"/>
        <run class="DominatesTypePattern"/>
    </ajc-test>
    
    <ajc-test num="717" dir="new"
      title="subtype pattern in dominates will conflict with type pattern">
        <compile files="DominatesTypePatternCE.java">
        	<message kind="error" line="15"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="718" dir="new" pr="827"
      abccomment="abc doesn't support 'before' as an identifier inside an aspect.
                Cloned test case with different identifier name. PA"
      title="after returning advice on interface and implementation constructor"
      keywords="tofix">
        <abckeywords><skip/></abckeywords>
        <compile files="AfterReturningConstructor.java"/>
        <run class="AfterReturningConstructor"/>
    </ajc-test>

    <ajc-test num="71801" dir="abctests/new" pr="827"
      abccomment="Cloned from 718. PA"
      title="after returning advice on interface and implementation constructor - fixed"
      keywords="tofix">
        <compile files="AfterReturningConstructor.java"/>
        <run class="AfterReturningConstructor"/>
    </ajc-test>

    <ajc-test num="719" dir="new" pr="832"
      title="after throwing advice with non-throwable formal">
        <compile files="AfterThrowingNonThrowable.java">
            <message kind="error" line="41"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="720" dir="new" pr="829" title="declare array field using postfix"
      keywords="tofix">
        <compile files="ArrayFieldDeclaration.java">
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="721" dir="new" pr="851"
      title="prohibit declaring new aspect constructor with arguments">
        <compile files="DeclareAspectConstructorCE.java">
          <message kind="error" line="10"/>
        </compile>
    </ajc-test>

    <ajc-test num="722" dir="new" pr="851"
      title="prohibit declaring only aspect constructor with arguments">
        <compile files="DeclareOnlyAspectConstructorCE.java">
          <message kind="error" line="10"/>
        </compile>
    </ajc-test>
    
	<!-- The follwing three idioms are allowed.  Within a declare parents,
	     implements and extends can be used interchangably.  We could
	     provide -Xlint style warnings for misuse.
	-->

    <ajc-test num="723" dir="new" pr="853"
      abccomment="we should accept extends instead of implements"
      title="declare class extends interface">
        <compile files="DeclareClassExtendsInterface.java">
        </compile>
    </ajc-test>

    <ajc-test num="724" dir="new" pr="853"
      abccomment="AJC does not treat this as an error, and some
                  programs depend on it.
                  ASC 27/09/04"
      title="declare class implements class">
        <abckeywords><skip/></abckeywords>
        <compile files="DeclareClassImplementsClass.java">
          <message kind="error" line="10"/>
        </compile>
    </ajc-test>

    <ajc-test num="725" dir="new" pr="853"
      abccomment="we already accept implements instead of extends here"
      title="declare interface implements interface">
        <compile files="DeclareInterfaceImplementsInterface.java">
        </compile>
    </ajc-test>
    
    <ajc-test num="726" dir="new"
      title="if and cflow arg binding">
        <compile files="CflowBinding.java">
          <message kind="error" line="13"/>
        </compile>
    </ajc-test>

    <ajc-test num="727" dir="bugs" pr="902"
      title="circularity in declare dominates">
        <compile files="CircularDominates.java">
		  <message kind="error" line="18"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="728" dir="bugs" pr="28702" title="percflow code hangs compiler">
        <compile files="CloseConnectionsCflow.java">
        </compile>
    </ajc-test>
    
    <ajc-test num="729" dir="bugs" pr="28703" title="assert and pertarget crashes compiler">
        <compile files="EnsureOverriding.java" options="-source,1.4"/>
        <run class="EnsureOverriding" vm="1.4"/>
    </ajc-test>
    
    <ajc-test num="730" dir="bugs" pr="28852"
      title="Verification error tracing constructor that takes arguments">
        <compile files="ConstructorArgTracing.java"/>
        <run class="ConstructorArgTracing"/>
    </ajc-test>
    
    <ajc-test num="731" dir="bugs" pr="29106" title="declared exceptions in inter-type decls">
        <compile files="ExceptionsOnInters.java"/>
        <run class="ExceptionsOnInters"/>
    </ajc-test>
    
    <ajc-test num="732" dir="bugs" pr="28921"
      title="Verify error on non-Throwable in declare soft">
    <abckeywords> <warningbehaviour/> </abckeywords>
        <compile files="DeclareSoftCf.java" options="-Xlint:warning">
		  <message kind="warning" line="28"/>
		  <message kind="error" line="29"/>
		  <message kind="warning"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="733" dir="bugs" pr="29113" title="inter-type fields with array types">
        <compile files="InterFieldArrays.java"/>
        <run class="InterFieldArrays"/>
    </ajc-test>
    
    <ajc-test num="734" dir="new"
      title="unmatched type name in a declare parents should result in a warning in -Xlint mode"
      keywords="tofix">
     <abckeywords> <warningbehaviour/> </abckeywords>
        <compile options="-Xlint" files="MissingTypeInDeclareParents.java">
            <message kind="warning" line="20"/>
        </compile>
        <run class="MissingTypeInDeclareParents"/>
    </ajc-test>
    
    <ajc-test num="735" dir="new" pr="838"
      abccomment="we just report the error in one place"
      title="checking around join point for advice return type - numeric">
        <compile files="AroundNumericCastCE.java">
            <ajcmessage kind="error" line="12"/>
            <ajcmessage kind="error" line="17"/>
            <message kind="error" line="11"/>
        </compile>
    </ajc-test>

    <ajc-test num="736" dir="new" pr="836" 
        abccomment="we just report the error in one place"
        title="void around advice without proceed">
        <compile files="VoidAround.java">
            <message kind="error" line="11"/>
            <ajcmessage kind="error" line="11"/>
            <ajcmessage kind="error" line="29"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="737" dir="new/PR852" pr="852"
      title="declaring method on superclass and subclass">
        <compile files="aspectPack/Aspect.java,target/SubClass.java,target/SuperClass.java">
          <dir-changes added="target.SubClass,target.SuperClass"/>
        </compile>
        <run class="aspectPack.Aspect"/>
    </ajc-test>
    
    <ajc-test num="738" dir="new/PR852" pr="852"
      abccomment="we can't handle packages named aspect"
      title="declaring method on superclass and subclass"
      keywords="knownLimitation">
        <abckeywords><skip/></abckeywords>
        <compile files="aspect/Aspect.java,target/SubClass.java,target/SuperClass.java">
          <dir-changes added="target.SubClass,target.SuperClass"/>
        </compile>
        <run class="aspect.Aspect"/>
    </ajc-test>
    
	<!-- The correct behavior of this program is to produce an Xlint
	     warning for the lack of access to the needed type, and then
	     to generate code with link errors that will throw a NoSuchMethodError
	     when run.
	-->
    <ajc-test num="739" dir="bugs" pr="906"
      title="privileged access to code outside the control of the compiler">
        <compile files="PrivilegeBeyondScope.java" options="-Xlint:warning">
		  <ajcmessage kind="warning" line="23"/>
		  <message kind="error" line="23"/>
        </compile>
    </ajc-test>    

    <ajc-test num="740" dir="new/PR862" pr="862"
      title="import any inner from interface implementor"
      abccomment="it is not legal to import inner classes"
      keywords="purejava">
        <compile files="pack/ImportInnerFromInterfaceImplementor.java">
          <dir-changes added="pack.ImportInnerFromInterfaceImplementor"/>
        </compile>
        <run class="pack.ImportInnerFromInterfaceImplementor"/>
    </ajc-test>
    
    <ajc-test num="741" dir="new/finalfield" pr="28974"
      title="introducing final fields (simple)">
        <compile files="Introducer.java,Receiver.java,User1.java"/>
        <run class="User1"/>
    </ajc-test>

    <ajc-test num="742" dir="new/finalfield" pr="28974"
      title="introducing final fields and using as constants">
        <compile files="Introducer.java,Receiver.java,User2.java"/>
        <run class="User2"/>
    </ajc-test>

    <ajc-test num="743" dir="new/finalfield" pr="28974"
      title="introducing final fields and checking errors">
        <compile files="Introducer.java,Receiver.java,UserCf.java">
            <message kind="error" line="6"/>        
        </compile>
    </ajc-test>
    
    <ajc-test num="744" dir="bugs" pr="29691"
    		title="Static inner aspects cannot reference user defined pointcuts 1">
        <compile files="PcdLookup.java" />
        <run class="PcdLookup"/>
    </ajc-test>
    
    <ajc-test num="745" dir="bugs" pr="29691"
    		title="Static inner aspects cannot reference user defined pointcuts 2">
        <compile files="SoftWithin.java" />
        <run class="SoftWithin"/>
    </ajc-test>
    
    <ajc-test num="746" dir="bugs" pr="29689"
    		title="Declare precedence should not allow multiple * patterns">
        <compile files="CircularPrecedence.java">
            <message kind="error" line="14"/> 
        </compile>
    </ajc-test>
    
    <ajc-test num="747" dir="bugs" pr="29662"
    		title="VerifyError on accessing objects not accessible to the weaver">
        <compile files="AroundAccess.java">
        </compile>
        <run class="AroundAccess"/>
    </ajc-test>
    
    <ajc-test num="748" dir="new" pr="804"
      title="aspect static initializers should run before instance constructed"
      keywords="tofix">
        <compile files="AspectStaticInit.java"/>
        <run class="AspectStaticInit"/>
    </ajc-test>
    
    <ajc-test num="749" dir="bugs" pr="29959"
            title="super call in intertype method declaration body causes VerifyError">
        <compile files="SuperToIntro.java"/>
        <run class="SuperToIntro"/>
    </ajc-test>
    
    <ajc-test num="750" dir="bugs/crashes" pr="30168" 
    		title="Error with certain combination of advice">
        <compile files="test/Test3.java"/>
        <run class="test.Test3"/>
    </ajc-test>

    <ajc-test num="751" dir="bugs" pr="31423" 
    		title="Pointcut adviceexecution() does not work">
        <compile files="AdviceExec.java"/>
        <run class="AdviceExec"/>
    </ajc-test>
    
    <ajc-test num="752" dir="bugs" pr="30026" 
    		title="problems with finalize call">
        <compile files="Finalizer.java">
            <message kind="error" line="22"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="753" dir="bugs" pr="33635" 
    		title="Negation of if pointcut does not work">
        <compile files="NotIf.java"/>
        <run class="NotIf"/>
    </ajc-test>
    
    
    <ajc-test num="754" dir="bugs" pr="32463" 
    		title="ajc reports error when encountering static declaration of nested classes">
        <compile files="WeaveLocal.java"/>
        <run class="WeaveLocal"/>
    </ajc-test>
    
    <ajc-test num="755" dir="bugs" pr="32428" 
    		title="can't use pointcuts defined in inner aspects ">
        <compile files="InnerPointcut.java"/>
        <run class="InnerPointcut"/>
    </ajc-test>

    <ajc-test num="756" dir="bugs/interfaceNames" pr="32421" 
    		title="can't resolve nested public interfaces (also PR#32399)">
        <compile files="TransactionTest.java,sub/ExecutionMonitor.java,sub/ObserverProtocol.aj"/>
        <run class="TransactionTest"/>
    </ajc-test>
    
    <ajc-test num="757" dir="bugs" pr="34210" 
    		title="thisJoinPoint.getArgs() causes IncompatibleClassChangeError">
        <compile files="ThisJoinPointAndVerifier.java"/>
        <run class="ThisJoinPointAndVerifier"/>
    </ajc-test>
    
    <ajc-test num="758" dir="errors"  keywords="error"
    		title="inter-type declaration of void field">
        <compile files="VoidFieldDeclarationCE.java">
			<message kind="error" line="7"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="759" dir="binding"
      title="no such constructor for proceed argument (error)">
        <compile files="UnfoundConstructor.java">
        	<message kind="error" line="25"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="760" dir="new/declare" pr="31724"
            title="omnibus declare warning context with no initializer/constructor">
        <compile files="DeclareWarningEmpty.java">
            <message kind="warning" line="3" text="2 - initialization(DeclareWarningEmpty)"/>
            <message kind="warning" line="3" text="1 - staticinitialization(DeclareWarningEmpty)"/>
        </compile>
    </ajc-test>
    

    <ajc-test num="761" dir="new/declare" pr="31724"
            abccomment="different positions for execution-type joinpoints"
            title="omnibus declare warning context">
        <compile files="DeclareWarning.java">
            <ajcmessage kind="warning" line="5" text="staticinitialization(DeclareWarning)"/>
            <ajcmessage kind="warning" line="12" text="call(DeclareWarning.new())"/>
            <ajcmessage kind="warning" line="13" text="get staticInt"/>
            <ajcmessage kind="warning" line="14" text="get instanceInt"/>
            <ajcmessage kind="warning" line="15" text="set staticInt"/>
            <ajcmessage kind="warning" line="16" text="set instanceInt"/>
            <ajcmessage kind="warning" line="17" text="call(void run())"/>
            <ajcmessage kind="warning" line="18" text="call(void irun())"/>
            <ajcmessage kind="warning" line="21" text="execution(void run())"/>
            <ajcmessage kind="warning" line="22" text="execution(void irun())"/>
            <ajcmessage kind="warning" line="23" text="execution(DeclareWarning.new())"/>
            <ajcmessage kind="warning" line="23" text="initialization(DeclareWarning)"/>
            <ajcmessage kind="warning" line="33" text="handler(OutOfMemoryError) &amp;&amp; within(DeclareWarning)"/>
            <ajcmessage kind="warning" line="36" text="handler(Error)"/>
            <ajcmessage kind="warning" line="39" text="handler(RuntimeException) &amp;&amp; withincode(DeclareWarning.new())"/>
            <ajcmessage kind="warning" line="74" text="adviceExecution() &amp;&amp; within(A)"/>
            <message kind="warning" line="3" text="staticinitialization(DeclareWarning)"/>
            <message kind="warning" line="12" text="call(DeclareWarning.new())"/>
            <message kind="warning" line="13" text="get staticInt"/>
            <message kind="warning" line="14" text="get instanceInt"/>
            <message kind="warning" line="15" text="set staticInt"/>
            <message kind="warning" line="16" text="set instanceInt"/>
            <message kind="warning" line="17" text="call(void run())"/>
            <message kind="warning" line="18" text="call(void irun())"/>
            <message kind="warning" line="21" text="execution(void run())"/>
            <message kind="warning" line="22" text="execution(void irun())"/>
            <message kind="warning" line="23" text="execution(DeclareWarning.new())"/>
            <message kind="warning" line="23" text="initialization(DeclareWarning)"/>
            <message kind="warning" line="33" text="handler(OutOfMemoryError) &amp;&amp; within(DeclareWarning)"/>
            <message kind="warning" line="36" text="handler(Error)"/>
            <message kind="warning" line="39" text="handler(RuntimeException) &amp;&amp; withincode(DeclareWarning.new())"/>
            <message kind="warning" line="72" text="adviceExecution() &amp;&amp; within(A)"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="762" dir="new" pr="29934"
      title="can't apply around advice to the execution of around advice"
      keywords="from-resolved_10x">
        <compile files="CflowCycles.java"/>
        <run class="CflowCycles"/>
    </ajc-test>
    
    <ajc-test num="763" dir="new"
      abccomment="we don't report the advice positions too"
      title="incompatible advice throws clause are a compile-time error"
      keywords="from-resolved_10x">
        <compile files="AdviceThrowsCf.java">
            <ajcmessage kind="error" line="13"/>
            <ajcmessage kind="error" line="28"/>
            <ajcmessage kind="error" line="47"/>
            <ajcmessage kind="error" line="48"/>
            <ajcmessage kind="error" line="50"/>
            
            <ajcmessage kind="error" line="70"/>
            <ajcmessage kind="error" line="74"/>
            <ajcmessage kind="error" line="76"/>
            <ajcmessage kind="error" line="78"/>
            
            <ajcmessage kind="error" line="85"/>

            <message kind="error" line="13"/>
            <message kind="error" line="13"/>
            <message kind="error" line="28"/>
            <message kind="error" line="28"/>
            <message kind="error" line="47"/>
            <message kind="error" line="48"/>
            <message kind="error" line="50"/>
            <message kind="error" line="50"/>

        </compile>
    </ajc-test>
    
    <ajc-test num="764" dir="bugs" pr="34858"
      title="cflow binding issues with ignoring state">
        <compile files="CflowBinding.java"/>
        <run class="CflowBinding"/>
    </ajc-test>

    <ajc-test num="765" dir="bugs" pr="34858"
      title="cflow binding -- original weaver crash">
        <compile files="CflowBindingOrig.java"/>
        <run class="CflowBindingOrig"/>
    </ajc-test>
    
    <ajc-test num="766" dir="errors"  
    		title="type not imported in around advice">
        <compile files="TypeNotImportedInAroundCE.java">
        	<message kind="error" line="10"/>
        </compile>
	</ajc-test>

    <ajc-test num="767" dir="errors"  
    		title="type not imported in aspect">
        <compile files="TypeInAspectNotImportedCE.java">
        	<message kind="error" line="6"/>
        </compile>
	</ajc-test>
	
    <ajc-test num="768" dir="errors"  keywords="error"
    		title="class extending abstract aspect">
        <compile files="ClassExtendingAbstractAspectCE.java">
			<message kind="error" line="20"/>
        </compile>
    </ajc-test>

    <ajc-test num="769" dir="new" pr="660" 
      title="illegal name binding in around cflow"
      abccomment="ajc doesn't report errors either and then breaks at runtime,
                  just like we do"
      keywords="from-resolved_104,knownLimitation">
        <compile files="ArgsInCflowCf.java">
            <message kind="error" line="19"/>
            <message kind="error" line="29"/>
            <message kind="error" line="35"/>
        </compile>
    </ajc-test>

    <ajc-test num="770" dir="incremental/stringliteral"   
    	keywords="knownLimitation"
    	title="incrementally change string size and wire in injar classes">
        <compile staging="true" options="-incremental" 
        	files="oneInjar.jar,twoInjar.jar"
        	sourceroots="src"/>
		<run class="packageOne.Main"
			options="in packageOne.Main.main(..),
					 before main packageOne.Main"/>
        <inc-compile tag="20">
        	<dir-changes updated="packageOne.Main"/>
        </inc-compile>
        <!-- now failing here.  This step passes in non-injar variant. -->
		<run class="packageOne.Main"
			options="in longer packageOne.Main.main(..),
					 before main packageOne.Main"/>
        <inc-compile tag="30">
        	<dir-changes added="RunInjarMains"/>
        </inc-compile>
		<run class="packageOne.Main"
			options="in longer packageOne.Main.main(..),
					 before main InjarOneMain,
					 before main InjarTwoMain,
					 before main packageOne.Main"/>
    </ajc-test>

    <ajc-test num="771" dir="bugs" pr="34206" 
    	keywords="knownLimitation"
        abccomment="ajc throws the same exception at runtime that we do"
    	title="before():execution(new(..)) does not throw NoAspectBoundException"
    	comment="correct behavior of this case needs to be thought through">
        <abckeywords><skip/></abckeywords>
        <compile files="AspectInitError.java"/>
        <run class="AspectInitError"/>
    </ajc-test>
    
    <ajc-test num="772" dir="bugs" pr="34925"
      abccomment="bug in test itself.
                  brackets around type in declare soft. Java does not
                  allow bracketing of types (because of confusion with
                  casts), and abc sticks to that. Cloned to 77201.
                  ODM 17/08/04"
      title="declare soft and throw statements">
      <abckeywords><skip/></abckeywords>
        <compile files="ConvertToUnchecked.java"/>
        <run class="ConvertToUnchecked"/>
    </ajc-test>

   <ajc-test num="77201" dir="abctests/bugs" pr="34925"
      abccomment="Cloned from 772, removing the offending parentheses.
                  ODM 17/08/04"
      title="declare soft and throw statements">
        <compile files="ConvertToUnchecked.java"/>
        <run class="ConvertToUnchecked"/>
    </ajc-test>
    
    <ajc-test num="773" dir="bugs/interAbstract"
      title="inter-type declaration bug with abstract classes"
      pr="36046">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    
    <ajc-test num="774" dir="bugs/interInherit" pr="35725"
      title="Inter type declaration to base class not seen by derived class">
        <compile files="a_impl/AImpl.java,a_impl/Af.java,a_intf/A.java,b_impl/BImpl.java,b_intf/B.java"/>
        <run class="b_impl.BImpl"/>
    </ajc-test>

    <ajc-test num="775" dir="new/declareParents"
      title="Declare parents with intermediate ancestor"
      keywords="from-new">
        <compile files="Driver.java">
        <message kind="warning" line="29"/>
        </compile>
        <run class="Driver"/>
    </ajc-test>
    
    <ajc-test num="776" dir="new/declareParents" 
      title="Declare parents removing ancestor"
      keywords="from-new">
        <compile files="IllegalAdoption.java">
            <message kind="error" line="13"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="777" dir="options/injars/simple"  pr="35865"
      title="options -injars checking declare parents interactions">
        <compile files="DecParents.java,main.jar"
        	options="!eclipse"/>
        <run class="DecParents"/>
    </ajc-test>
    
    <ajc-test num="778" dir="bugs/interSpecials" title="IllegalAccessError while accessing introduced variable / 1.1rc1"
      pr="36110">
        <compile files="p1/C.java,p2/A1.java"/>
        <run class="p2.A1"/>
    </ajc-test>
    
    <ajc-test num="779" dir="bugs/interSpecials" title="testing that assert works like .class"
      pr="36110">
        <compile files="p1/C.java,p2/A2.java" options="-source,1.4"/>
        <run class="p2.A2" vm="1.4"/>
    </ajc-test>

    <ajc-test num="780" dir="new" pr="36736"
      title="implemented abstract pointcut">
        <compile files="AbstractImplementedPointcut.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="781" dir="new/verifyError" pr="36673"
      title="privileged aspect main verify error">
        <compile files="Privilege.java"/>
        <run class="Privilege"/>
    </ajc-test>
    
    <ajc-test num="782" dir="bugs" pr="36564"
      title="Internal compiler error with thisJoinPoint.getStaticPart()">
        <compile files="tjpStaticPart/Test.java,tjpStaticPart/Exceptions.java"/>
        <run class="tjpStaticPart.Test"/>
    </ajc-test>
    
    <ajc-test num="783" dir="bugs" pr="29665"
      title="Inconsistant stack height with around">
        <compile files="StackError.java"/>
        <run class="StackError"/>
    </ajc-test>
    

	<ajc-test num="784" dir="bugs/messyAround" pr="36056"
         abccomment="we only report the warning in one location. Also,
	         the main class is not declared public, which makes
		 this fail from the test harness. Cloned. PA. 
                 The test also imports org.aspectj.runtime.* for no
                 apparent reason."
      title="Ajc 1.1 rc1 java.lang.VerifyError with messy arounds">
      <abckeywords><skip/></abckeywords>
        <compile files="aspects/Trace.aj,cap/OptionList.java,DebugTrace.aj">
                <ajcmessage kind="warning" line="102"/>
        	<ajcmessage kind="warning" line="124"/>
        	<ajcmessage kind="warning" line="138"/>
                <message kind="warning" line="102"/>
        	<message kind="warning" line="124"/>
        </compile>
        <run class="cap.OptionList"/>
    </ajc-test>  

	<ajc-test num="78401" dir="abctests/bugs/messyAround" pr="36056"
         abccomment="we only report the warning in one location. Also,
	         the main class is not declared public, which makes
		 this fail from the test harness. Cloned. PA"
      title="Ajc 1.1 rc1 java.lang.VerifyError with messy arounds - fixed">
        <compile files="aspects/Trace.aj,cap/OptionList.java,DebugTrace.aj">
                <ajcmessage kind="warning" line="102"/>
        	<ajcmessage kind="warning" line="124"/>
        	<ajcmessage kind="warning" line="138"/>
		<message kind="warning" line="102"/>
        	<message kind="warning" line="124"/>
        </compile>
        <run class="cap.OptionList"/>
    </ajc-test>  

    <ajc-test num="785" dir="new"
      abccomment="around weaver internal error - Sascha emailed - AGS 1/7/04"
      title="try/finally in around advice (same as ...messy arounds?)">
        <compile files="TryFinallyInAround.java"/>
        <run class="TryFinallyInAround"/>
    </ajc-test>
    
    <ajc-test num="786" dir="new" pr="36778"
      title="advise join points in subclass of empty interface">
        <compile files="EmptyInterface.java"/>
        <run class="EmptyInterface"/>
    </ajc-test>
    
    <ajc-test num="787" dir="new" pr="36778"
      abccomment="we just produce a warning, and just in one place"
      title="can't put around advice on interface static initializer"
      comment="this tests for a nice message given a compiler limitation">
        <compile files="EmptyInterfaceCE.java">
        	<ajcmessage kind="error" line="20"/>
        	<ajcmessage kind="error" line="23"/>
        	<message kind="warning" line="20"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="788" dir="bugs" pr="36803"
      title="cflow concretization causing assertion failure">
        <compile files="CflowConcrete.java"/>
        <run class="CflowConcrete"/>
    </ajc-test>
    
   <ajc-test num="789" dir="new/options11"  pr="36329"
   	  comment="the line number might change, we're really interested only in the files here"
	  abccomment="this is testing binary aspects from jars and is not
	              supported by abc.  LJH August 23/04"
      title="The compiler crashes when using aspect libraries created without using -noweave">
        <abckeywords> <skip/></abckeywords>
        <compile files="Main.java,injar.jar,Aspect.java,aspectlib1.jar,aspectlib2.jar">
            <message kind="error" line="0"/>
        </compile>
   </ajc-test>
   
    <ajc-test num="790" dir="bugs" title="lame error message: negation doesn't allow binding"
      pr="30663">
        <compile files="BadBindingError.java">
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="791" dir="bugs/interSpecials" pr="36936"
      title="Error when introducing members of type Class">
        <compile files="Trg.java,Asp.java"/>
        <run class="Trg"/>
    </ajc-test>
    
    <ajc-test num="792" dir="new"
      comment="this is a pureJava test, but we always want to run it"
      title="arrays via Class.forName()">
        <compile files="ClassForName.java"/>
        <run class="ClassForName"/>
    </ajc-test>

    <ajc-test num="793" dir="new/binaryWarnings/src" pr="37020"
         abccomment="we report slightly different positions"
   	 title="declare warnings on main">
        <compile files="aspects/MainWarnings.java,app/Main.java">
        	<ajcmessage line="6"  text="staticinitialization(Main)" kind="warning" file="app/Main.java" />
        	<ajcmessage line="6"  text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<ajcmessage line="8"  text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<ajcmessage line="12" text="get(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<ajcmessage line="14" text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<ajcmessage line="16" text="call(Main.new())" kind="warning" file="app/Main.java" />
        	<ajcmessage line="19" text="call(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<ajcmessage line="23" text="initialization(Main.new())" kind="warning" file="app/Main.java" />
        	<ajcmessage line="23" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<ajcmessage line="23" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<ajcmessage line="26" text="execution(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<ajcmessage line="29" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<ajcmessage line="31" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<ajcmessage line="32" text="D.go withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<ajcmessage line="33" text="handler(RuntimeException)" kind="warning" file="app/Main.java" />
        	<ajcmessage line="35" text="withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<ajcmessage line="42" text="withincode(void Main.stop())" kind="warning" file="app/Main.java" />
        	<ajcmessage line="50" text="preinitialization(app.C.new())" kind="warning" file="app/Main.java" />
        	<message line="4"  text="staticinitialization(Main)" kind="warning" file="app/Main.java" />
        	<message line="6"  text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="8"  text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="12" text="get(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="14" text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="16" text="call(Main.new())" kind="warning" file="app/Main.java" />
        	<message line="19" text="call(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="23" text="initialization(Main.new())" kind="warning" file="app/Main.java" />
        	<message line="23" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="23" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="26" text="execution(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="29" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="31" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="32" text="D.go withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="33" text="handler(RuntimeException)" kind="warning" file="app/Main.java" />
        	<message line="35" text="withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="42" text="withincode(void Main.stop())" kind="warning" file="app/Main.java" />
        	<message line="50" text="preinitialization(app.C.new())" kind="warning" file="app/Main.java" />
        </compile>
        <run class="app.Main"/>
    </ajc-test>

    <ajc-test num="794" dir="new/binaryWarnings/src"  pr="37020"
   	title="declare warnings on binary javac 1.4 classes">
        <compile files="aspects/MainWarnings.java,../injars/app-javac-1.4.jar">
        	<message line="6"  text="staticinitialization(Main)" kind="warning" file="app/Main.java" />
        	<message line="6"  text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="8"  text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="12" text="get(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="14" text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="16" text="call(Main.new())" kind="warning" file="app/Main.java" />
        	<message line="19" text="call(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="23" text="initialization(Main.new())" kind="warning" file="app/Main.java" />
        	<message line="23" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="23" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="26" text="execution(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="29" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="31" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="32" text="D.go withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="33" text="handler(RuntimeException)" kind="warning" file="app/Main.java" />
        	<message line="35" text="withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="42" text="withincode(void Main.stop())" kind="warning" file="app/Main.java" />
        	<message line="50" text="preinitialization(app.C.new())" kind="warning" file="app/Main.java" />
        </compile>
        <run class="app.Main"/>
    </ajc-test>
    
   <ajc-test num="795" dir="new/binaryWarnings/src" pr="37023"
        abccomment="we fail because of an off-by one error on the handler line number info"
   	title="declare warnings on binary ajc 1.1 classes">
        <compile files="aspects/MainWarnings.java,../injars/app-ajc-1.1.jar">
        	<message line="6"  text="staticinitialization(Main)" kind="warning" file="app/Main.java" />
        	<message line="6"  text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="8"  text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="12" text="get(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="14" text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="16" text="call(Main.new())" kind="warning" file="app/Main.java" />
        	<message line="19" text="call(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="23" text="initialization(Main.new())" kind="warning" file="app/Main.java" />
        	<message line="23" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="23" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="26" text="execution(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="29" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="31" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="32" text="D.go withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="33" text="handler(RuntimeException)" kind="warning" file="app/Main.java" />
        	<message line="35" text="withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="42" text="withincode(void Main.stop())" kind="warning" file="app/Main.java" />
        	<message line="50" text="preinitialization(app.C.new())" kind="warning" file="app/Main.java" />
        </compile>
        <run class="app.Main"/>
	</ajc-test>

   <ajc-test num="796" dir="new/binaryWarnings/src" pr="37020"
   	keywords="knownLimitation"
        abccomment="ideally we'd get the message at line 6, but 12 is about the best we can do. 
                    6 isn't reported in the bytecode anywhere, so there's no hope of that. 
                    ajc does the same as us."
   	comment="source loc of binary jp depends on first code, not block start"
   	title="declare error on handler/method execution with no code on binary ajc 1.1 classes">
        <compile files="aspects/MainExecStartLinesErrors.java,../injars/appStartLines-ajc-1.1.jar">
        	<ajcmessage kind="error" file="app/MainExecStartLines.java"
        	  line="6" text="execution(void MainExecStartLines.main(String[]))"/>
        	<ajcmessage kind="error" file="app/MainExecStartLines.java"
        	  line="17" text="handler(RuntimeException)"/>        	  
        	<message kind="error" file="app/MainExecStartLines.java"
        	  line="12" text="execution(void MainExecStartLines.main(String[]))"/>
        	<message kind="error" file="app/MainExecStartLines.java"
        	  line="17" text="handler(RuntimeException)"/>        	  
        </compile>
    </ajc-test>

   <ajc-test num="797" dir="new/binaryWarnings/src" pr="37020"
   	keywords="knownLimitation"
        abccomment="ideally we'd get the message at line 6 and 17, but 12 and 20 is the best we can do
                    given what the bytecode has. ajc does the same as us."
   	comment="source loc of binary jp depends on first code, not block start; XXX need javac inlining example"
   	title="declare error on handler/method execution with no code on binary javac 1.4 classes">
        <compile files="aspects/MainExecStartLinesErrors.java,../injars/appStartLines-javac-1.4.jar">
        	<ajcmessage kind="error" file="app/MainExecStartLines.java"
        	  line="6" text="execution(void MainExecStartLines.main(String[]))"/>
        	<ajcmessage kind="error" file="app/MainExecStartLines.java"
        	  line="17" text="handler(RuntimeException)"/>        	  
        	<message kind="error" file="app/MainExecStartLines.java"
        	  line="12" text="execution(void MainExecStartLines.main(String[]))"/>
        	<message kind="error" file="app/MainExecStartLines.java"
        	  line="20" text="handler(RuntimeException)"/>        	  
        </compile>
    </ajc-test>

    <ajc-test num="798" dir="incremental/initialTests/classAdded" 
    	title="expect class added in initial incremental tests" 
    	keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental"
        	sourceroots="."/>
        <run class="main.Main"/>
        <inc-compile tag="20" >
            <dir-changes added="main.Target"/>
        </inc-compile>
        <run class="main.Main"  skipTester="true"/>
    </ajc-test>

    <ajc-test num="799" dir="incremental/initialTests/classRemoved" 
    	title="expect class removed in initial incremental tests" 
    	keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental" 
        	sourceroots="."/>
        <run class="main.Main"/>
        <inc-compile tag="20">
            <dir-changes removed="main.Target"/>
        </inc-compile>
        <run class="main.Main"/>
    </ajc-test>

    <ajc-test num="800" dir="incremental/initialTests/classUpdated" 
    	title="expect class updated in initial incremental tests" 
    	keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental"
        	sourceroots="."/>
        <run class="main.Main"/>
        <inc-compile tag="20">
            <dir-changes updated="main.Main"/>
        </inc-compile>
        <run class="main.Main"/>
    </ajc-test>

     <ajc-test num="801" dir="incremental/initialTests/sourceAdded" 
    	title="add file with class"
    	comment="only expecting pickup if sourceroots"    
    	keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental"
        	sourceroots="."/>
        <run class="main.Main"/>
        <inc-compile tag="20">
            <dir-changes added="main.Target"/>
        </inc-compile>
        <inc-compile tag="30">
            <dir-changes updated="main.Main"/>
        </inc-compile>
        <run class="main.Main"/>
    </ajc-test>

    <ajc-test num="802" dir="incremental/initialTests/sourceDeleted" 
        title="delete source file before incremental compile"
        comment="build config should permit file deletions for incremental (sourceroots)"
        keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental"
    		sourceroots="."/>
        <run class="delete.Main"/>
        <inc-compile tag="20">
            <dir-changes removed="delete.DeleteMe"/>
        	<message kind="error" line="6" file="delete/Target.java"/>
        </inc-compile>
        <inc-compile tag="30"/> 
        <run class="delete.Main"/>
    </ajc-test>

    <ajc-test num="803" dir="incremental/initialTests/expClasses" 
    	title="expected class tree" >
        <compile files="Main.java">
            <dir-changes expDir="expected"/>
        </compile>
        <run class="Main"/>
    </ajc-test>
    
    <ajc-test num="804" dir="incremental/initialTests/defaultPackage" 
    	title="do everything in default package (sourceroots)" 
    	keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental"
    		sourceroots="."/>
        <run class="Main"/>
        <inc-compile tag="20">
            <dir-changes added="Target"/>
        </inc-compile>
        <run class="Target" skipTester="true"/>
        <inc-compile tag="30">
            <dir-changes updated="Main"/>
        </inc-compile>
        <run class="Main" skipTester="true"/>
        <inc-compile tag="40"> 
			<message kind="error" line="6" file="Main.java"/>
        </inc-compile>
        <inc-compile tag="50"/>
        <run class="Main"/>
    </ajc-test>


    <ajc-test num="805" dir="bugs/inlineAround" pr="37152"
      title="perthis and inline arounds">
        <compile files="aspect1/Base.java,aspect2/Concrete.java,p1/Main.java">
        </compile>
        <run class="p1.Main"/>
    </ajc-test>
    

   <ajc-test num="806" dir="incremental/defaultPackage"
    keywords="incremental-test"
   	title="change sources in default package">
        <compile 
        	staging="true"
        	options="-incremental" 
        	sourceroots="src"/>
        <run class="Main"/>
        <inc-compile tag="20"/>
        <run class="Main"/>
    </ajc-test>

   <ajc-test num="807" dir="incremental/interPackage"
    keywords="incremental-test"
   	title="change source">
        <compile 
        	staging="true"
        	options="-incremental" 
        	sourceroots="src"/>
        <run class="app.Main"/>
        <inc-compile tag="20"/>
        <run class="app.Main"/>
    </ajc-test>

    <ajc-test num="808" dir="bugs" pr="37325"  
      title="Weaver fails with NPE for very large source files ">
        <compile files="LongFile.java"/>
        <run class="LongFile"/>
    </ajc-test>   

    <ajc-test num="809" dir="harness" 
    	keywords="command-line-error,knownLimitation"
    	comment="can't test -help: has to abort, but returns 0, normal status"    
		title="CLE: -help usage">
        <compile  badInput="true" options="-help">
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>

    <ajc-test num="810" dir="harness" keywords="command-line-error"
      title="CLE: no sources" abccomment="abc fails this test because
      when invoked without sources, it runs through and does nothing,
      while ajc aborts with an error.">
        <abckeywords><skip/></abckeywords>
        <compile badInput="true">
            <message kind="error" text="no sources"/>
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>

    <ajc-test num="811" dir="harness" 
    	keywords="command-line-error,knownLimitation-ajctaskCompiler,knownLimitation-ajdeCompiler"
	abccomment="abc only throws one error - correctly, in our opinion. PA/AGS"
    	comment="ajde omits usage"
      title="CLE: bad filename">
        <compile  badInput="true" files="NoSuchFile.java">
            <ajcmessage kind="error" text="NoSuchFile.java"/>
            <ajcmessage kind="abort" text="Usage"/>
	    <message kind="error" file="NoSuchFile.java"/>
        </compile>
    </ajc-test>

    <ajc-test num="812" dir="harness" keywords="command-line-error"
    	comment="XXX test skipped - harness ignores -sourceroot option"
      title="CLE: no dir specified for sourceroots">
        <compile badInput="true" files="ErrorTest.java" 
        	options="-sourceroots">
            <message kind="error" text="no sources specified"/>
            <message kind="error" text="bad sourceroot"/>
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>

    <ajc-test num="813" dir="harness" keywords="command-line-error,knownLimitation-ajdeCompiler"
    	comment="ajde has same errors, different wording"
      title="CLE: no sourceroot specified for incremental">
        <compile badInput="true" options="-incremental">
            <message kind="error" text="no sources specified"/>
            <message kind="error" text="specify a source root"/>
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>

    <ajc-test num="814" dir="harness" keywords="command-line-error,knownLimitation-ajdeCompiler"
    	comment="ajde has same errors, different wording"
      title="CLE: file specified with incremental">
        <compile badInput="true" files="ErrorTest.java"
        	options="-incremental">
            <message kind="error" text="incremental mode only handles source files using -sourceroots"/>
            <message kind="error" text="no sources specified"/>
            <message kind="error" text="specify a source root"/>
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="815" dir="bugs" pr="37739"
   	 title="Unexpected Xlint:unresolvableMember warning with withincode">
        <compile files="CatchSig.java">
        </compile>
        <run class="CatchSig"/>
    </ajc-test>
   
    <ajc-test num="816" dir="bugs" pr="37304"
   	 title="public static fields being ignored">
        <compile files="FinalFields.java"/>
        <run class="FinalFields"/>
    </ajc-test>
    
    <ajc-test num="817" dir="bugs/lines" pr="37758"
   	 title="Weaving rt.jar results in stack overflow">
        <compile files="A.java,big.jar">
 			<!-- message no longer produced as a result of bug fix 44190
        	<message kind="warning" text="manifest not copied"/>
        	-->
        </compile>
        <run class="Big"/>
    </ajc-test>

   <ajc-test num="818" dir="harness" 
        title="setting -warn:constructorName works">
         <abckeywords> <warningbehaviour/> </abckeywords>
        <compile files="ConstructorNameWarning.java" 
        	options="-warn:constructorName">
        	<message kind="warning" line="5" text="constructor name"/>
    	</compile>
    </ajc-test>

    <ajc-test num="819" dir="harness" 
        title="valid XLintWarningTest file, default level of warning">
        <abckeywords> <warningbehaviour/> </abckeywords>
        <compile files="XLintWarningTest.java">
        	<message kind="warning" line="5"
        		 text="Xlint:invalidAbsoluteTypeName"/> 
        </compile>
    </ajc-test>

    <ajc-test num="820" dir="harness" 
        title="XLint:ignore suppresses XLint warnings">
        <compile files="XLintWarningTest.java" options="-Xlint:ignore"/>
    </ajc-test>

    <ajc-test num="821" dir="harness" 
        title="XLint:error promotes XLint warnings to error">
    <abckeywords> <warningbehaviour/> </abckeywords>
        <compile files="XLintWarningTest.java" options="-Xlint:error">
        	<message kind="error" line="5" 
        		text="Xlint:invalidAbsoluteTypeName"/> 
        </compile>
    </ajc-test>

    <!-- The next three tests are all about the same issue.  The source
         line for a constructor execution is returned as the first executable
         line within the constructor-execution join point rather than the declaration
         line of the constructor.  Any other definition will require collusion between
         the source->bytecode compiler and the weaver and will only work in
         those case where such collusion is possible.
    -->

    <ajc-test num="822" dir="new/binaryWarnings/src" pr="37020" keywords="knownLimitation"
   	 title="declare warnings on main - constructor execution">
        <compile files="aspects/ConstructorExecutionWarning.java,app/Main.java">
        	<message kind="warning" file="app/Main.java"
        	  line="23" text="execution(Main.new())"/>
        </compile>
        <run class="app.Main"/>
    </ajc-test>

    <ajc-test num="823" dir="new/binaryWarnings/src" pr="37020" keywords="knownLimitation"
   	 title="declare warnings on binary javac 1.4 main - constructor execution">
        <compile files="aspects/ConstructorExecutionWarning.java,../injars/app-javac-1.4.jar">
        	<message kind="warning" file="app/Main.java"
        	  line="23" text="execution(Main.new())"/>
        </compile>
        <run class="app.Main"/>
    </ajc-test>

    <ajc-test num="824" dir="new/binaryWarnings/src" pr="37020" keywords="knownLimitation"
   	 title="declare warnings on binary ajc 1.1 main - constructor execution">
        <compile files="aspects/ConstructorExecutionWarning.java,../injars/app-ajc-1.1.jar">
        	<message kind="warning" file="app/Main.java"
        	  line="23" text="execution(Main.new())"/>
        </compile>
        <run class="app.Main"/>
    </ajc-test>

    <ajc-test num="825" dir="bugs/handlers" pr="37898" keywords="knownLimitation"
                abccomment="we only report the error at the join point shadow, not the advice 
                            body too."
		title="advice on handler join points should not throw unpermitted checked exceptions">
        <compile files="ExceptionCheckCE.java">
			<ajcmessage kind="warning" line="8" text="expected"/>
			<ajcmessage kind="error" line="25" text="throw checked exception" />
			<ajcmessage kind="error" line="8" text="throw checked exception" />
			<message kind="error" line="8" />
			<message kind="warning" line="8" text="expected"/>
        </compile>
    </ajc-test>

    <ajc-test num="826" dir="incremental/stringliteral"
    	keywords="incremental-test"
		title="incrementally change only string literal, still expect advice">
        <compile staging="true" options="-incremental" 
        	sourceroots="src"/>
		<run class="packageOne.Main"
			options="in packageOne.Main.main(..),
					 before main packageOne.Main"/>
        <inc-compile tag="20">
        	<dir-changes updated="packageOne.Main"/>
        </inc-compile>
		<run class="packageOne.Main"
			options="in longer packageOne.Main.main(..),
					 before main packageOne.Main"/>
    </ajc-test>

   <ajc-test num="827" dir="harness" pr="38134" keywords="knownLimitation"
   		comment="behavior is correct for 1.1 - revisit for 1.2"
        title="-nowarn suppresses XLint warnings">
        <compile files="XLintWarningTest.java" options="-nowarn"/>
    </ajc-test>

   <ajc-test num="828" dir="harness" pr="38134" keywords="knownLimitation"
   		comment="behavior is correct for 1.1 - revisit for 1.2"
        title="warn:none suppresses XLint warnings">
        <compile files="XLintWarningTest.java" options="-warn:none"/>
    </ajc-test>

    <ajc-test num="829" dir="harness" pr="38134" keywords="knownLimitation"
   		comment="behavior is correct for 1.1 - revisit for 1.2"
        title="-nowarn suppresses declare warnings">
        <abckeywords> <warningbehaviour/> </abckeywords>
        <compile files="WarningTest.java" options="-nowarn"/>
    </ajc-test>

    <ajc-test num="830" dir="harness" pr="38134" keywords="knownLimitation"
   		comment="behavior is correct for 1.1 - revisit for 1.2"
        title="-warn:none suppresses declare warnings">
        <abckeywords> <warningbehaviour/> </abckeywords>
        <compile files="WarningTest.java" options="-warn:none"/>
    </ajc-test>
<!--
    <ajc-test num="831" dir="bugs" pr="38168" keywords="knownLimitation"
   	 title="insertion of lots of advice code can make branch offset for if too large">
        <compile files="WideJumps.java"/>
        <run class="WideJumps"/>
    </ajc-test>
-->    
    <!-- This doesn't actually reproduce the bug, but no test case has been submitted
         that does so this is here as a place-holder and to verify that we're mostly
         working.
    -->
    <ajc-test num="832" dir="bugs/accessMethods" pr="38212"
   	 title="can not resolve this member warning">
        <compile files="p1/Base.java,p2/Derived.java"/>
        <run class="p2.Derived"/>
    </ajc-test>
    
    <ajc-test num="833" dir="bugs" pr="38345"
   	 title="try switch VerifyError, InconsistentStackHeight">
        <compile files="TrySwitch.java"/>
        <run class="TrySwitch"/>
    </ajc-test>
    
    <ajc-test num="834" dir="bugs" pr="39458"
     abccomment="abc bails out early"
   	 title="Compiler crash in ajc 1.1 - terrible error for inaccessible constructor">
        <compile files="NewVoid.java">
            <ajcmessage kind="error" line="17"/>        
            <ajcmessage kind="error" line="20"/>        
            <ajcmessage kind="error" line="21"/>
                  
            <ajcmessage kind="error" line="28"/>        
            <ajcmessage kind="warning" line="29"/>        
            <ajcmessage kind="warning" line="30"/>            

            <message kind="error" line="20"/>        
            <message kind="error" line="28"/>        
        </compile>
    </ajc-test>
    
    <ajc-test num="835" dir="bugs" pr="39460"
   	 title="Missing import crashes compiler">
        <compile files="MissingImport.java">
            <message kind="error" line="13"/>       
        </compile>
    </ajc-test>
    
    <ajc-test num="836" dir="bugs" pr="39479"
   	 title="NPE in bcel.LazyMethodGen when delegating from one ctor to a second that includes a switch">
        <compile files="NewSwitch.java"/>
        <run class="NewSwitch"/>
    </ajc-test>

    <ajc-test num="837" dir="bugs" pr="40109"
   	 title="switch statement in aspects crashes weaving">
        <compile files="SwitchInAround.java"/>
        <run class="SwitchInAround"/>
    </ajc-test>
    
    <ajc-test num="838" dir="bugs" pr="39993"
   	 title="ajc stack trace on declaring hashcode() method in aspect">
        <compile files="OverridingInterfaceObjectMethod.java"/>
        <run class="OverridingInterfaceObjectMethod"/>
    </ajc-test>

    <ajc-test num="839" dir="bugs"
   	 title="using super in method introduced on interface with multiple supertypes">
        <compile files="MultipleSuperCf.java">
        	<message kind="error" line="14"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="840" dir="bugs/cflowAndJar" pr="39462"
   	 title="Compiler crashes in jar and cflow (with no .jar)">
        <compile files="TestAspect.aj,Test.java,AbstractAspect.aj">
        	<message kind="warning" line="16"/>
        </compile>
        <run class="Test"/>
    </ajc-test>

    <ajc-test num="841" dir="bugs/cflowAndJar" pr="39462"
   	 title="Compiler crashes in jar and cflow (with .jar)"
         abccomment = "aspectpath tests should be skipped. ODM 16/07/04"
   	 comment="make lib.jar with ajc -outjar lib.jar AbstractAspect.aj">
        <abckeywords> <skip/> </abckeywords>
        <compile files="TestAspect.aj,Test.java" aspectpath="lib.jar">
        	<message kind="warning" line="16"/>
        </compile>
        <run class="Test"/>
    </ajc-test>
    
    <ajc-test num="842" dir="bugs" pr="40589"
   	 title="Default method impl for interface causes internal exception.">
        <compile files="CloneMethod.java"/>
        <run class="CloneMethod"/>
    </ajc-test>
    
    <ajc-test num="843" dir="bugs" pr="39711"
   	 title="Class Literals as non final fields (also assert, and this$0)">
        <compile files="ClassLiteralField.java" options="-source,1.4"/>
        <run vm="1.4" class="ClassLiteralField"/>
    </ajc-test>

	<ajc-test num="844" dir="errors"
         abccomment="better errors from abc. 19/07/04 ODM"
		title="compile error expected for abstract pointcut outside abstract aspect">
		<compile files="AbstractPointcutCE.java">
			<ajcmessage kind="error" line="5"/>
			<ajcmessage kind="error" line="10"/>
                        <message kind="error" line="4"/>
                        <message kind="error" line="5"/>
                        <message kind="error" line="9"/>
		</compile>
	</ajc-test>
	
	<ajc-test num="845" dir="bugs"
		pr="40876"
		title="subtype-qualified pointcut reference">
		<compile files="PointcutLibraryTest.java"/>
		<run class="PointcutLibraryTest"/>
	</ajc-test>
	
	<ajc-test num="846" dir="bugs"
		pr="40858"
		comment="super is not permitted in pointcuts in 1.1"
		title="weaver trace on mis-qualified pointcut reference">
		<compile files="SuperPointcutCE.java">
			<message kind="error" line="23"/>
			<message kind="error" line="26"/>
		</compile>
	</ajc-test>

	<ajc-test num="847" dir="bugs"
		pr="40814"
               abccomment="an extra message from abc. ODM 19/07/04"
		title="compile error expected for interface pointcuts">
		<compile files="AbstractPointcutCE.java">
			<ajcmessage kind="error" line="7"/>
			<ajcmessage kind="error" line="11"/>		
			<ajcmessage kind="error" line="15"/>
	                <message kind="error" line="7"/>
			<message kind="error" line="11"/>
                        <message kind="error" line="14"/>		
			<message kind="error" line="15"/>                        
		</compile>
	</ajc-test>

	<ajc-test num="848" dir="bugs"
		pr="40805" 
		title="interface call signatures when declaring method in aspect">
		<compile files="DeclareWarningAndInterfaceMethodCW.java">
			<message kind="warning" line="27" text="call getSomething"/>
			<message kind="warning" line="27" text="call ICanGetSomething.getSomething"/>
			<message kind="warning" line="31" text="call getSomething"/>
			<message kind="warning" line="31" text="call ICanGetSomething.getSomething"/>
			<message kind="warning" line="33" text="call getSomething"/>
			<message kind="warning" line="33" text="call ICanGetSomething.getSomething"/>
			<message kind="warning" line="35" text="call getSomething"/>
			<message kind="warning" line="35" text="call ICanGetSomething.getSomething"/>
			<message kind="warning" line="38" text="call getSomething"/>
			<message kind="warning" line="38" text="call ICanGetSomething.getSomething"/>
		</compile>
	</ajc-test>

	<ajc-test num="849" dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - baseline">
		<compile files="lib/LibraryInterface.java,
						Client.java,
						LibraryAspect.java"/>
		<run class="Client"/>
		</ajc-test>
		
	<ajc-test num="850" dir="new/interfaceLibrary"
		comment="prove that LibraryAspect is required"
                abccomment="don't do aspectpath. ODM 19/07/04"
		title="aspect-declared interface members in libraries - interfaceOnly.jar">
		<compile 
			files="Client.java" 
			aspectpath="interfaceOnly.jar">
			<message kind="error" line="5"/>
			</compile>
		</ajc-test>

	<ajc-test num="851" dir="new/interfaceLibrary"
               abccomment="don't do aspectpath. ODM 19/07/04"
		title="aspect-declared interface members in libraries - aspectOnly.jar">
		<compile 
			files="lib/LibraryInterface.java,
					Client.java" 
			aspectpath="aspectOnly.jar"/>
            <abckeywords> <skip/> </abckeywords>
		<run class="Client"/>
		</ajc-test>
		
	<ajc-test num="852" dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectedInterfaceOnly.jar"
                abccomment="only one error, but ok. ODM 27/07/04"
		comment="prove aspect is required even if interface is woven"
		>
		<compile 
			files="Client.java" 
			classpath="aspectedInterfaceOnly.jar">
			<ajcmessage kind="error" line="0" text="LibraryAspect"/>
			<ajcmessage kind="error" line="9" text="LibraryInterface"/>
	                <message kind="error" line="9" text="LibraryInterface"/>
			</compile>
		</ajc-test>

	<ajc-test num="853" dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectedInterfaceOnly.jar,aspectOnly.jar"
                comment="weaving required for implementations of interface? 
		         XXX Would prefer to support javac compiles of Client here, mimicked with classpath only"
		>
		<compile 
			files="Client.java" 
			classpath="aspectedInterfaceOnly.jar,aspectOnly.jar">
			<message kind="error" line="9"/>
                        </compile>
		</ajc-test>

	<ajc-test num="854" dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectedInterfaceOnlyBinary.jar,aspectOnly.jar"
		comment="works if aspect is only on the classpath?, i.e., no weaving XXX need javac run"
		>
		<compile 
			files="Client.java" 
			classpath="aspectedInterfaceOnlyBinary.jar,aspectOnly.jar">
			<message kind="error" line="9"/>
			</compile>
		</ajc-test>

	<ajc-test num="855" dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectedInterfaceOnly.jar,aspectpath=aspectOnly.jar 1"
		abccomment="abc doesn't support aspect path. ODM 19/07/04"
               comment="can weave to create library, and then weave clients"
		>
        <abckeywords> <skip/> </abckeywords>
		<compile 
			files="Client.java" 
			classpath="aspectedInterfaceOnly.jar"
			aspectpath="aspectOnly.jar"/>
		<run class="Client"/>
		</ajc-test>

	<ajc-test num="856" dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectedInterfaceOnly.jar,aspectpath=aspectOnly.jar 2"
                abccomment ="abc doesn't support aspectpath. ODM 19/07/04"
		comment="works if source aspect and binary classpath woven with aspect? 
		         should NOT warn about affected type not since affected type is already woven?"
		>
        <abckeywords> <skip/> </abckeywords>
		<compile 
			files="Client.java,LibraryAspect.java" 
			classpath="aspectedInterfaceOnly.jar"/>
			
		<run class="Client"/>
		</ajc-test>

	<ajc-test num="857" 
		dir="bugs/interfaceLibrary"
                abccomment="problem with loosing exception clauses on newly created soot methods. emailed abc list 19/07/04. ODM"
		title="exception clause for aspect-declared interface methods - positive">
		<compile files="Client.java,LibraryAspect.java,lib/LibraryInterface.java"/>
		<run class="Client"/>
		</ajc-test>

	<ajc-test num="858" 
		dir="bugs/interfaceLibrary"
		title="exception clause for aspect-declared interface methods - negative">
		<compile files="ClientCE.java,LibraryAspect.java,lib/LibraryInterface.java">
			<message kind="error" file="ClientCE.java" line="5"/>
			</compile>
		</ajc-test>

	<ajc-test num="859" 
		dir="bugs/interfaceLibrary"
		title="exception clause for aspect-declared class methods - positive">
		<compile files="ClassClient.java,LibraryClassAspect.java,lib/LibraryClass.java"/>
		<run class="ClassClient"/>
		</ajc-test>

	<ajc-test num="860" 
		dir="bugs/interfaceLibrary"
		title="exception clause for aspect-declared class methods - negative">
		<compile files="ClassClientCE.java,LibraryClassAspect.java,lib/LibraryClass.java">
			<message kind="error" file="ClassClientCE.java" line="5"/>
			</compile>
		</ajc-test>
		
	<ajc-test num="861" dir="bugs"
		pr="41175"
                abccomment="soot seems to loose declared exceptions on new methods. mailed abc list. 19/07/04 ODM.
                            Jennifer found it is due to Jasmin; she will fix. 27/07/04 ODM"
		title="reflective check of declared exceptions from aspect-declared methods">
		<compile files="DeclaredExceptions.java"/>
		<run class="DeclaredExceptions"/>
		</ajc-test>

	<ajc-test num="862" dir="bugs/interfaceLibrary"
		pr="41175"
		title="exception clause for aspect-declared interface methods - positive binary">
		<compile files="Client.java" aspectpath="lib.jar"/>
		<run class="Client"/>
		</ajc-test>

	<ajc-test num="863" dir="bugs/interfaceLibrary"
		pr="41175"
		title="exception clause for aspect-declared interface methods - negative binary">
		<compile files="ClientCE.java" aspectpath="lib.jar">
			<message kind="error" file="ClientCE.java" line="5"/>
			</compile>
		</ajc-test>

	<ajc-test num="864" dir="bugs/interfaceLibrary"
		pr="41175"
		title="exception clause for aspect-declared class methods - positive binary">
		<compile files="ClassClient.java" aspectpath="libClass.jar"/>
		<run class="ClassClient"/>
		</ajc-test>

	<ajc-test num="865" dir="bugs/interfaceLibrary"
		pr="41175"
		title="exception clause for aspect-declared class methods - negative binary">
		<compile files="ClassClientCE.java" aspectpath="libClass.jar">
			<message kind="error" file="ClassClientCE.java" line="5"/>
			</compile>
		</ajc-test>
		
		
	<ajc-test num="866" dir="bugs/moreInterfaceLibrary"
		pr="41123"
		title="Weaving failure when using injars (no jars)">
		<compile
			files="lib/ExecutionMonitor.aj,model/BusObj.java,model/MonitorBusObj.java">
		</compile>
	</ajc-test>
	
	<ajc-test num="867" dir="bugs/moreInterfaceLibrary"
		pr="41123"
		title="Weaving failure when using injars (on aspectpath)">
		<compile
			files="model/BusObj.java,model/MonitorBusObj.java"
			aspectpath="lib.jar">
		</compile>
	</ajc-test>

	<ajc-test num="868" dir="bugs/moreInterfaceLibrary"
        abccomment = "test with aspect in a jar - not supported by abc. ODM 27/07/04"
		pr="41123"
		title="Weaving failure when using injars (on classpath)">
        <abckeywords> <skip/> </abckeywords>
		<compile
			files="model/BusObj.java,model/MonitorBusObj.java"
			classpath="lib.jar">
		    <message kind="error" line="3"/>
		</compile>
	</ajc-test>
	
	<ajc-test num="869" dir="bugs/moreInterfaceLibrary"
		pr="41123"
                abccomment ="abc doesn't support weaving aspects from jars - error irrelevant. ODM 19/07/04"
		title="Weaving failure when using injars (actual injars)">
        <abckeywords> <skip/> </abckeywords>
		<compile
			files="model/BusObj.java,model/MonitorBusObj.java,lib.jar">
		    <message kind="error" line="3"/>
		</compile>
	</ajc-test>
	
	<ajc-test num="870" dir="bugs/perCflowAndJar"
		pr="41359"
		title="percflow aspects compiled from jars share one instance for all entry points">
		<compile files="PerCFlowCompileFromJar.java,PerCFlowCompileFromJarTest.java"/>
		<run class="PerCFlowCompileFromJarTest"/>
	</ajc-test>
	
	<ajc-test num="871" dir="bugs/perCflowAndJar"
		pr="41359"
		title="(using aspectpath) percflow aspects compiled from jars share one instance for all entry points">
		<compile files="PerCFlowCompileFromJarTest.java"
				aspectpath="lib.jar"/>
		<run class="PerCFlowCompileFromJarTest"/>
	</ajc-test>
	
	<ajc-test num="872" dir="bugs/throwsSignature"
		pr="42539"
		title="throw derivative pointcuts not advised">
		<compile files="ExceptionBugTest.java,ExceptionAspect.java">
		    <message line="5" kind="warning" text="throws both"/>
		    <message line="5" kind="error" text="throws Exception"/>
		    <message line="7" kind="warning" text="throws both"/>
                </compile>
	</ajc-test>
	
    <ajc-test num="873" dir="bugs" pr="42652"
   	 title="perthis and signature bad interaction">
        <compile files="InterPerCall.java"/>
        <run class="InterPerCall"/>
    </ajc-test>
    
	<ajc-test num="874" dir="bugs/declareBinding"
		pr="42740"
                abccomment="awaiting tags with source locs, ok. ODM 19/07/04"
		title="declare error fails on pointcuts composed from multiple classes">
		<compile files="SampleExceptionHandling1.java">
		    <ajcmessage line="2" kind="error"/>
		    <message kind = "error"/>
                </compile>
	</ajc-test>

	<ajc-test num="875" dir="bugs/declareSoftWithin"
		pr="42740"
		title="declare error fails on pointcuts composed from multiple classes">
		<compile files="aspects/Softener.aj,test/NoSoftener.java"/>
		<run class="test.NoSoftener"/>
	</ajc-test>
	
    <ajc-test num="876" dir="bugs" pr="42993"
   	    title="Interaction between pointcut binding and declare parents">
        <compile files="ParentsAndPointcuts.java"/>
        <run class="ParentsAndPointcuts"/>
    </ajc-test>
    
    <ajc-test num="877" dir="bugs" pr="43194"
   	 title="Non-functional concretezation of ReferencePointcut">
        <compile files="AdviceInteraction.java"/>
        <run class="AdviceInteraction"/>
    </ajc-test>
    
  	<ajc-test num="878" dir="bugs/concretizeNpe" pr="43033"
		title="NPE in concretization error path"
                abccomment = "parse error location ok. ODM 19/07/04 Also extra 'parser couldn't recover' error - AGS"
		keywords="poorErrorMessages">
		<compile files="base/ExceptionHandling.java,model/ModelExceptionHandling.java">
		<!--
		  <message line="5" kind="error" text="pointcut base.ExceptionHandling.scope() is abstract"/>
		  <message line="4" kind="error" text="inherited abstract pointcut base.ExceptionHandling.scope() is not made concrete"/>
		  <message line="8" kind="error" text="inherited abstract pointcut base.ExceptionHandling.scope() is not made concrete"/>
		  <message line="12" kind="error" />
		  <message line="13" kind="error" />
		-->
		  <ajcmessage line="12" kind="error" />		
		  <ajcmessage line="13" kind="error" />
                  <message kind="error" />
                  <message line="13" kind="error" />
		</compile>
	</ajc-test>

    <ajc-test num="879" dir="bugs/jpOptimization" 
    	pr="45441"
    	title="JoinPoint Optimization when targetting 1.4">
        <compile 
        	files="de/test/MyMain.java,
        		   de/test/MyAspect.java"
            options="-1.4"/>
        <run class="de.test.MyMain"/>
    </ajc-test>

	<ajc-test num="880" dir="bugs/extdirs" 
		pr="42574"
		title="zip and jar suffixes for extdirs entries"
		abccomment="Skipping this case as we're not sure what the extdirs option
		       is meant to do. PA/AGS">
		<abckeywords> <skip/> </abckeywords>
		<compile files="extdirs-src/main/Main.java"
			extdirs="lib/lowercase"/>
	</ajc-test>

	<ajc-test num="881" dir="bugs/privilege/packageProtected" pr="42711"
            title="priviledged aspects calling methods from advice"> 
        <compile files="concern/ContextUser.java,concern/BaseTarget.java,core/Base.java" /> 
    </ajc-test> 

    <ajc-test num="882" dir="bugs" pr="49457"
         abccomment="abc messages differ but ok. ODM 19/07/04"
   	 title="No error on overloaded pointcuts in class">
        <compile files="OverloadedPointcutsInClass.java">
        	<ajcmessage kind="error" line="3" text="duplicate pointcut name: pc1"/>
        	<ajcmessage kind="error" line="4" text="duplicate pointcut name: pc1"/>
        	<ajcmessage kind="error" line="6" text="duplicate pointcut name: pc2"/>
        	<ajcmessage kind="error" line="7" text="duplicate pointcut name: pc2"/>
                <message kind="error" line="4"/>
                <message kind="error" line="6"/>
        	<message kind="error" line="7"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="883" dir="bugs" pr="49457"
         abccomment ="abc text different but ok. ODM 19/07/04"
   	 title="No error on overloaded pointcuts unless binding variables">
        <compile files="OverloadedPointcutsInAspect.java">
        	<ajcmessage kind="error" line="15" text="duplicate pointcut name: pc"/>
        	<ajcmessage kind="error" line="16" text="duplicate pointcut name: pc"/>
        	<ajcmessage kind="error" line="18" text="incompatible type"/>
        	<ajcmessage kind="error" line="20" text="incompatible type"/>
                <message kind="error" line="15"/>
        	<message kind="error" line="16"/>
                <message kind="error" line="16"/>
                <message kind="error" line="17"/>
                <message kind="error" line="18"/>
                <message kind="error" line="19"/>
        	<message kind="error" line="20"/>
                <message kind="error" line="21"/>
        </compile>
    </ajc-test>

    <ajc-test num="884" dir="bugs" pr="49250"
      title="alias getCause for getWrappedThrowable in SoftException">
        <compile files="GetCauseOnSoftException.java" options="-Xlint:warning">
        </compile>
        <run vm="1.3" class="GetCauseOnSoftException"/>
    </ajc-test>

    <ajc-test num="885" dir="bugs" pr="48522"
      title="Declare soft softening other exception types">
        <compile files="SofteningTooMuch.java">
 	        <message kind="error" line="6" text="Unhandled exception"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="886" dir="bugs" pr="47754"
      abccomment ="text of message is better in abc. ODM 19/07/04"
      title="static method introduction on interfaces, should not be allowed">
        <compile files="StaticInterfaceMethods.java">
		  <ajcmessage kind="error" line="7" text="methods in interfaces cannot be declared static"/>
                  <message kind="error" line="7"/>
        </compile>
    </ajc-test>

	<ajc-test num="887" dir="bugs" pr="45184"
      abccomment="awaiting source pos tags. OK for now ODM 19/07/04"
      title="External pointcut refs not resolved if named pointcut used by declare">
        <compile files="DeclareErrorNamedPointcutCE.java">
 	        <ajcmessage kind="error" line="10" text="ref"/>
                <message kind="error"/>
        </compile>
    </ajc-test>

	<ajc-test num="888" dir="bugs"
		title="XLint warning for call PCD's using subtype of defining type"
		pr="41952"
		>
         <abckeywords> <warningbehaviour/> </abckeywords>
		<compile 
			files="DeclaringTypeWarning.java"
			options="-1.3" >
			<message kind="warning" line="6" text="declaring type">
				<source line="12" file="DeclaringTypeWarning.java" />
			</message>
			<message kind="warning" line="6"  text="declaring type">
				<source line="14" file="DeclaringTypeWarning.java" />
			</message>			
		</compile>
		</ajc-test>

   <ajc-test num="889" dir="bugs"
		title="XLint warning for call PCD's using subtype of defining type (-1.3 -Xlint:ignore)"
		pr="41952"
		>
        <abckeywords><skip/></abckeywords>
       		<compile
			options="-Xlint:ignore,-1.3" 
			files="DeclaringTypeWarning.java" >
		</compile>
	</ajc-test>
	
	<ajc-test num="890" dir="bugs"
		title="XLint warning for call PCD's using subtype of defining type (-1.4 -Xlint:ignore)"
		pr="41952"
		>
                <abckeywords> <warningbehaviour/> </abckeywords>
		<compile
			options="-Xlint:ignore,-1.4" 
			files="DeclaringTypeWarning.java" >
            <message kind="warning" line="12"/>
		</compile>
	</ajc-test>
	
	<ajc-test num="891" dir="bugs"
		title="XLint warning for call PCD's using subtype of defining type (-1.4)"
		pr="41952"
		>
                <abckeywords> <warningbehaviour/> </abckeywords>
		<compile
			options="-1.4" 
			files="DeclaringTypeWarning.java" >
			<message kind="warning" line="6" text="declaring type">
				<source line="14" file="DeclaringTypeWarning.java"/>
			</message>
			<message kind="warning" line="12" text="declare warning">
				<source line="19" file="DeclaringTypeWarning.java"/>
			</message>
		</compile>
	</ajc-test>

	<ajc-test num="892" dir="bugs"
		title="Appropriate message for 'after() thowing(Throwable th)' syntax error"
         abccomment="Polyglot continues beyond parse errors and throws another problem. ODM 07/07/04"
		pr="49638"
		>
		<compile 
			files="AfterThrowingAdviceSyntaxError.java" >
			<ajcmessage kind="error" line="21" />
			<ajcmessage kind="error" line="23" />
			<message kind="error" line="21" />
                        <message kind="error" line="22" />
			<message kind="error" line="23" />
                </compile>
	</ajc-test>

   <ajc-test num="893" dir="bugs/faultingInSource" pr="46671"
      abccomment="we don't have -verbose"
      title="Ensure we don't look for source on the classpath when binary not found">
        <abckeywords><skip/></abckeywords>
        <compile files="SimpleTracing.java" classpath="." options="-verbose">
		  <message kind="warning" line="4" text="no match for this type name: SampleClass"/>
        </compile>
    </ajc-test>   
    
   	<ajc-test num="894" dir="bugs" pr="46750" title="inner aspect containing declare soft">
       <compile files="TestSoftening.java">
       </compile>
    </ajc-test>
    
     <ajc-test num="895" dir="bugs" pr="45663"
      abccomment="Polyglot continues beyond parse, and thus has another error. ODM 07/07/04"
      title="Bad parser error recovery in advice">
        <compile files="ParserRecoveryTest.java">
		  <ajcmessage kind="error" line="7"/>
                  <message kind="error" line="5"/>
                  <message kind="error" line="7"/>
        </compile>
    </ajc-test>   
    
<ajc-test num="896" dir="bugs" pr="45663"
      title="Bad parser error recovery in java source"
      abccomment="error on line 8 is not reported by abc, but it is
                  ok.  July 6/04 LJH. abc now reports both. July 19/04 ODM."
      >
        <compile files="ParserRecoveryTestPureJava.java">
		  <message kind="error" line="6"/>
		  <message kind="error" line="8"/>
        </compile>
    </ajc-test>     
    
    <ajc-test num="897" dir="bugs" 
		pr="46280"
		title="compiler issues error on inner aspects when privilieged">
        <compile files="PrivilegedParsing.java"/>
        <run class="PrivilegedParsing"/>
    </ajc-test>

    <ajc-test num="898" dir="bugs" pr="44586"
      abccomment = "ITD field initialisers should not appear in the exec jps of host constructors, but
                    they do appear in initialisation jps of the same. Need to discuss with Ganesh.
                    ODM 19/07/04"
      title="After throwing advice on ctors doesn't execute for inter-type decl field inits">
        <compile files="AfterThrowingCtor.java">
        </compile>
  		<run class="AfterThrowingCtor"/>
    </ajc-test>
    
    <ajc-test num="899" dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on abstract class not implemented by subtype">
        <compile files="abstractClass/C.java"
        		 aspectpath="abstractClass/jars/AandB.jar">
            <message kind="error" line="1"/>
        </compile>
    </ajc-test>

    <ajc-test num="900" dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on interface not implemented by subtype (weave altogether)">
        <compile files="interface/C.java,interface/A.java,interface/B.java" />
        <run class="C"/>
    </ajc-test>
 
    
    <ajc-test num="901" dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on interface not implemented by subtype (injars)">
       <compile files="interface/C.java,interface/jars/AandB.jar"> 
            <message kind="error" line="1"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="902" dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on interface not implemented by subtype (aspectpath)">
        <compile files="interface/C.java"
        		 aspectpath="interface/jars/AandB.jar" />
        <run class="C"/>
    </ajc-test>
    
    <ajc-test num="903" dir="bugs/abstractMethods" pr="49784"
         abccomment="abc gives message at intertype decl rather than class. ODM July 14,2004"
   	 title="Introduced abstract method on abstract class not implemented by subtype (single source file)">
        <compile files="singlesource/C.java">
        	<ajcmessage kind="error" line="9"/>
                <message kind="error" line="4"/>
        </compile>
    </ajc-test>

    <ajc-test num="904" dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on abstract class with introduced concrete method (single source file)">
        <compile files="singlesource/C1.java"/>
        <run class="C1"/>
    </ajc-test>

    <ajc-test num="905" dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on abstract class with existing concrete method (single source file)">
        <compile files="singlesource/C2.java"/>
        <run class="C2"/>
    </ajc-test>

    <ajc-test num="906" dir="bugs/interAbstract" 
		pr="49784"
		title="aspect declares interface method (no modifiers)">
        <compile files="InterfaceMethodDeclarationNone.java" >
        	<message kind="error" line="32" text="requires a body" />
        </compile>
    </ajc-test>
	
	<ajc-test num="907" dir="bugs/interAbstract" 
		pr="49784"
                abccomment="I believe this to be an ajc bug. The program makes perfect sense,
                            it compiles fine, and the test runs ok. ODM 19/07/4"
		title="aspect declares interface method (abstract)">
        <compile files="InterfaceMethodDeclarationAbstract.java">
        	<ajcmessage kind="error" line="40" text="must implement" />
        </compile>
        <run class="InterfaceMethodDeclarationAbstract"/>
    </ajc-test>

    <ajc-test num="908" dir="bugs/interAbstract" 
		pr="49784"
		comment="working in 1.1.1 - keep with others?"
		title="aspect declares interface method (public abstract)">
        <compile files="InterfaceMethodDeclarationFull.java" />
        <run class="InterfaceMethodDeclarationFull"/>
    </ajc-test>

    <ajc-test num="909" dir="bugs/interfaceDefinition" 
    	pr="43972"
        abccomment = "abc doesn't do separate compilation. ODM 19/07/04 "
    	title="Use class implementing interface via aspect (not woven together)">
        <abckeywords> <skip/> </abckeywords>
        <compile 
        	files="pack/DefineInterface.java,
        		   pack/InterfaceDefinition.java,
        		   pack/MyInterface.java"/>
        <run class="pack.InterfaceDefinition"/>
        <compile 
        	includeClassesDir="true"
        	files="Main.java">
        	<message kind="error" line="3"/>
       </compile>
    </ajc-test>
    
    <ajc-test num="910" dir="bugs/interfaceDefinition" 
    	pr="43972"
    	title="Use class implementing interface via aspect (weave all together)">
        <compile 
        	files="pack/DefineInterface.java,
        		   pack/InterfaceDefinition.java,
        		   pack/MyInterface.java,
        		   Main.java"/>
        <run class="pack.InterfaceDefinition"/>
        <run class="Main"/>
    </ajc-test>
    
    <ajc-test num="911" dir="bugs/interfaceDefinition" 
    	pr="43972"
        abccomment="don't do separate compilation. ODM 19/07/04"
    	title="Use class implementing interface via aspect (only one implementer)">
     <abckeywords> <skip/> </abckeywords>
        <compile 
        	files="pack/DefineInterface.java,
        		   pack/InterfaceDefinition.java,
        		   pack/MyInterface.java"/>
        <run class="pack.InterfaceDefinition"/>
        <compile 
        	includeClassesDir="true"
        	files="Main1.java"/>
        <run class="Main1"/>
    </ajc-test>

    <ajc-test num="912" dir="bugs" pr="44587"
      title="Erroneous exception conversion">
        <compile files="ErroneousExceptionConversion.java">
        </compile>
        <run class="ErroneousExceptionConversion"/>
    </ajc-test>
    
  <ajc-test num="913" dir="bugs" pr="34206"
      title="before():execution(new(..)) does not throw NoAspectBoundException">
        <compile files="ErroneousExceptionConversion1.java">
        </compile>
        <run class="ErroneousExceptionConversion1"/>
    </ajc-test>

	<ajc-test num="914" dir="bugs" pr="38824"
	      title="Anomalous handling of inter-type declarations to abstract base classes in aspectj 1.1">
	        <compile files="AbstractBaseAndInterTypeInterface.java">
	        </compile>
	</ajc-test>

  <ajc-test num="915" dir="bugs/caseSensitivity" pr="42515"
      title="NPE When compiling intertype declaration">
        <compile files="uniqueId/Numbered.java,uniqueId/Bug.aj">
		  <message kind="error" line="4"/>
        </compile>
  </ajc-test>   
        
    <ajc-test num="916" dir="bugs" 
		pr="49295"
                abccomment="Fixed grammar to allow space between dots in formal pattern. ODM 14/07/04"
		title="declare warning on subtype constructor">
        <compile files="SubtypeConstructorCW.java" >
			<ajcmessage kind="warning" line="5" text="String as first"/>
			<ajcmessage kind="warning" line="10" text="String as first"/>
                        <message kind="warning" line="5"/>
                        <message kind="warning" line="10"/>
        </compile>
        <run class="SubtypeConstructorCW"/>
    </ajc-test>
        
    <ajc-test num="917" dir="bugs" pr="50570"
      title="CatchClauseSignature has broken operation">
        <compile files="HandlerSig.java"/>
        <run class="HandlerSig"/>
    </ajc-test>
    

    <ajc-test num="918" dir="new" pr="42668"
   	 title="after returning with parameter: matching rules">
        <compile files="AfterReturningParamMatching.java" />
        <run class="AfterReturningParamMatching"/>
    </ajc-test>
    
    <ajc-test num="919" dir="bugs/binaryCompat" pr="50641"
      abccomment= "abc does not support binary compatibility. ODM 16/07/04"
      title="binary compatibility of advice method names - expect no error 1">
        <compile files="Main.java,TraceV1.aj"/>
        <abckeywords> <skip/> </abckeywords>
        <run class="Main"/>
        <compile files="TraceV2.aj"/>
        <run class="Main"/>
    </ajc-test>
   
    <ajc-test num="920" dir="bugs/binaryCompat" pr="50641"
      abccomment = "abc does not support binary compatibility. ODM 16/07/04"
      title="binary compatibility of advice method names - expect error">
      <abckeywords> <skip/> </abckeywords>
        <compile files="Main.java,TraceV1.aj"/>
        <run class="Main"/>
        <compile files="TraceRE.aj"/>
        <run class="Main"/>
    </ajc-test>
    
     <ajc-test num="921" dir="bugs/binaryCompat" pr="50641"
      abccomment="abc does not support binary compatibility. ODM 16/07/04"
      title="binary compatibility of advice method names - expect no error 2">
        <abckeywords> <skip/> </abckeywords>
        <compile files="Main.java,TraceWithInnerV1.aj"/>
        <run class="Main"/>
        <compile files="TraceWithInnerV2.aj"/>
        <run class="Main"/>
    </ajc-test>
    
	<ajc-test num="922" dir="bugs/protectedvf"
         abccomment="Need to make all aspects public prior to jimplification.
                     ODM 16/07/04"
		title="mail list VerifyError with protected access">
		<compile files="main/Driver.java,main/p2/AbstractTest.aj,main/p1/ConcreteTest.aj"/>
		<run class="main.Driver"/>
	</ajc-test>
	
        <ajc-test num="923" dir="abctests/design/reflection" title="thisJoinPoint etc inside if pointcut">
           <compile files="InsideIf.java"/>
           <run class="InsideIf"/>
        </ajc-test>
        
	<ajc-test num="924" dir="abctests/design/cflow" title="cflow at handler joinpoints">
           <compile files="Handler.java"/>
           <run class="Handler"/>
        </ajc-test>

	<ajc-test num="925" dir="bugs" pr="51919"
   	 title="Polymorphic ITD fails in CVS HEAD (From ajdt 1.1.6)">
        <compile files="OverloadedITDNPE.java" />
    </ajc-test>
    
    <ajc-test num="926" dir="bugs" pr="51320"
   	 title="ClasscastException on concretization of if(false) 1"
         abccomment="abc does indirect checks in later phase, and bails out too early,
                     hence cloned this test. ODM 10/8/04">
        <compile files="DecwClassCastException.java">
        
         <!-- These are the illegal PCDs against a deow -->
         <ajcmessage kind="error" line="27" text="if() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="29" text="if() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="31" text="cflow() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="33" text="cflow() pointcut designator cannot be used"/>
         
         <ajcmessage kind="error" line="35" text="cflowbelow() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="37" text="cflowbelow() pointcut designator cannot be used"/>
         
         <ajcmessage kind="error" line="39" text="this() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="41" text="this() pointcut designator cannot be used"/>
         
         <ajcmessage kind="error" line="43" text="target() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="45" text="target() pointcut designator cannot be used"/>
         
         <ajcmessage kind="error" line="47" text="args() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="49" text="args() pointcut designator cannot be used"/>
         <message kind="error" line="27" text="if() pointcut designator cannot be used"/>
         <message kind="error" line="31" text="cflow() pointcut designator cannot be used"/>
         <message kind="error" line="35" text="cflowbelow() pointcut designator cannot be used"/>
         <message kind="error" line="39" text="this() pointcut designator cannot be used"/>
         <message kind="error" line="43" text="target() pointcut designator cannot be used"/>
         <message kind="error" line="47" text="args() pointcut designator cannot be used"/>
        </compile>
    </ajc-test>

  <ajc-test num="92601" dir="abctests/bugs" pr="51320"
         abccomment="cloned from 926"
   	 title="ClasscastException on concretization of if(false) 1-1">
        <compile files="DecwClassCastExceptionIndirect.java">
        
         <!-- These are the illegal PCDs against a deow -->
         <message kind="error" line="29" text="if() pointcut designator cannot be used"/>
         <message kind="error" line="33" text="cflow() pointcut designator cannot be used"/>
         <message kind="error" line="37" text="cflowbelow() pointcut designator cannot be used"/>
         <message kind="error" line="41" text="this() pointcut designator cannot be used"/>
         <message kind="error" line="45" text="target() pointcut designator cannot be used"/>
         <message kind="error" line="49" text="args() pointcut designator cannot be used"/>
        </compile>
    </ajc-test>
	
	 <ajc-test num="927" dir="bugs" pr="51320"
   	 	title="ClasscastException on concretization of if(false) 2-1">
        <compile files="DeclareSoftDynamicPCDs.java">
        
         <!-- These are the illegal PCDs against a deow -->
         <ajcmessage kind="error" line="27" text="if() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="29" text="if() pointcut designator cannot be used"/>
         
         <ajcmessage kind="error" line="31" text="cflow() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="33" text="cflow() pointcut designator cannot be used"/>
         
         <ajcmessage kind="error" line="35" text="cflowbelow() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="37" text="cflowbelow() pointcut designator cannot be used"/>
         
         <ajcmessage kind="error" line="39" text="this() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="41" text="this() pointcut designator cannot be used"/>
         
         <ajcmessage kind="error" line="43" text="target() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="45" text="target() pointcut designator cannot be used"/>
         
         <ajcmessage kind="error" line="47" text="args() pointcut designator cannot be used"/>
         <ajcmessage kind="error" line="49" text="args() pointcut designator cannot be used"/>
         
         <message kind="error" line="27" text="if() pointcut designator cannot be used"/>
         <message kind="error" line="31" text="cflow() pointcut designator cannot be used"/>
         
         <message kind="error" line="35" text="cflowbelow() pointcut designator cannot be used"/>
         <message kind="error" line="39" text="this() pointcut designator cannot be used"/>
         
         <message kind="error" line="43" text="target() pointcut designator cannot be used"/>
         
         <message kind="error" line="47" text="args() pointcut designator cannot be used"/>
        </compile>
    </ajc-test>

    	 <ajc-test num="92701" dir="abctests/bugs" pr="51320"
   	 	title="ClasscastException on concretization of if(false) 2-2">
        <compile files="DeclareSoftDynamicPCDsIndirect.java">
        
         <!-- These are the illegal PCDs against a deow -->
         <message kind="error" line="29" text="if() pointcut designator cannot be used"/>
         
         <message kind="error" line="33" text="cflow() pointcut designator cannot be used"/>
         
         <message kind="error" line="37" text="cflowbelow() pointcut designator cannot be used"/>
         
         <message kind="error" line="41" text="this() pointcut designator cannot be used"/>
         
         <message kind="error" line="45" text="target() pointcut designator cannot be used"/>
         
         <message kind="error" line="49" text="args() pointcut designator cannot be used"/>
         
        </compile>
    </ajc-test>
    
    <ajc-test num="928" dir="bugs/serialVersionUID"
		title="SUID: Before execution advice" pr="41181">
		<compile files="Test.java, Util.java"/>
        <run class="Test"/>
		<compile files="Test.java, Util.java, BeforeExecutionAdvice.aj" options="-Xlint:warning"/>
        <run class="Util"/>
	</ajc-test>

	<ajc-test num="929" dir="bugs/serialVersionUID"
                abccomment="we don't make any serialVersionUID guarantees"
		title="SUID: Around execution advice" comment="OK because around_body private" pr="41181">
                <abckeywords><skip/></abckeywords>
		<compile files="Test.java, Util.java"/>
        <run class="Test"/>
		<compile files="Test.java, Util.java, AroundExecutionAdvice.aj" options="-Xlint:warning"/>
        <run class="Util"/>
	</ajc-test>

	<ajc-test num="930" dir="bugs/serialVersionUID" 
	    title="SUID: Around closure execution advice (-Xlint:ignore)" comment="OK because ignoring warnings"
		pr="41181">
		<compile files="Test.java, Util.java">
		</compile>
        <run class="Test"/>
		<compile files="Test.java, Util.java, AroundClosureExecutionAdvice.aj" options="-Xlint:ignore">
		<message kind="warning"/>
		</compile>
        <run class="Util" options="-fail"/>
	</ajc-test>

	<ajc-test num="931" dir="bugs/serialVersionUID"
                abccomment="we don't make any serialVersionUID guarantees"
		title="SUID: Around closure execution advice" comment="Warning because around_body non-private"
		pr="41181">
                <abckeywords><skip/></abckeywords>
		<compile files="Test.java, Util.java"/>
        <run class="Test"/>
		<compile files="Test.java, Util.java, AroundClosureExecutionAdvice.aj"
		  xlintfile="Xlint.properties">
            <message kind="warning" line="9"/>
		</compile>
        <run class="Util" options="-fail"/>
	</ajc-test>

	<ajc-test num="932" dir="bugs/serialVersionUID"
                abccomment="we don't make any serialVersionUID guarantees"
		title="SUID: thisJoinPoint" comment="Warning because of introduced clinit"	pr="41181">
                <abckeywords><skip/></abckeywords>
		<compile files="Test.java, Util.java"/>
        <run class="Test"/>
		<compile
			files="Test.java, Util.java, TJP.aj" options="-Xlint:warning">
            <message kind="warning" line="6"/>
            <message kind="warning" line="13"/>
            <message kind="warning" line="17"/>
            <message kind="warning" line="24"/>
            <message kind="warning" line="31"/>
		</compile>
        <run class="Util" options="-fail"/>
	</ajc-test>

	<ajc-test num="933" dir="bugs/serialVersionUID"
		title="SUID: thisJoinPoint with clinit method" comment="OK if tjp private and existing clinit"
		pr="41181">
		<compile files="ClinitTest.java, Util.java"/>
        <run class="ClinitTest"/>
		<compile files="ClinitTest.java, Util.java, TJP.aj" options="-Xlint:warning"/>
        <run class="Util" options="-read"/>
	</ajc-test>

	<ajc-test num="934" dir="bugs/serialVersionUID"
                abccomment="we don't make any serialVersionUID guarantees"
		title="SUID: After returning staticinitialization advice" comment="Warning because of added clinit"
		pr="41181">
                <abckeywords><skip/></abckeywords>
		<compile files="Test.java, Util.java"/>
        <run class="Test"/>
		<compile
		  files="Test.java, Util.java, AfterReturningStaticinitializationAdvice.aj" options="-Xlint:warning">
            <message kind="warning" line="6"/>
		</compile>
        <run class="Util" options="-fail"/>
	</ajc-test>

	<ajc-test num="935" dir="bugs/serialVersionUID"
		title="SUID: After returning staticinitialization advice with serialVersionUID field"
		comment="OK because of serialVersionUID field" pr="41181">
		<compile files="SuidTest.java, Util.java" />
        <run class="SuidTest"/>
		<compile files="SuidTest.java, Util.java, AfterReturningStaticinitializationAdvice.aj" options="-Xlint:warning"/>
        <run class="Util"/>
	</ajc-test>

	<ajc-test num="936" dir="bugs/serialVersionUID"
                abccomment="we don't make any serialVersionUID guarantees"
		title="SUID: ITD field" comment="Error because added field may not be initialized" pr="41181">
                <abckeywords><skip/></abckeywords>
		<compile files="Test.java, Util.java"/>
        <run class="Test"/>
		<compile files="Test.java, Util.java, ITDField.aj" options="-Xlint:error">
            <message kind="error" line="0"/>
		</compile>
	</ajc-test>

	<ajc-test num="937" dir="bugs/serialVersionUID"
                abccomment="we don't make any serialVersionUID guarantees"
		title="SUID: ITD method" comment="Warning because of added method" pr="41181">
                <abckeywords><skip/></abckeywords>
		<compile files="Test.java, Util.java" />
        <run class="Test"/>
		<compile files="Test.java, Util.java, ITDMethod.aj" options="-Xlint:warning">
            <message kind="warning" line="3"/>
		</compile>
        <run class="Util" options="-fail"/>
	</ajc-test>
    
	<ajc-test num="938" dir="bugs/serialVersionUID"
		title="SUID: Declare extends" comment="OK" pr="41181">
		<compile files="Test.java, Util.java" />
        <run class="Test"/>
		<compile files="Test.java, Util.java, DeclareExtends.aj" options="-Xlint:warning"/>
        <run class="Util"/>
	</ajc-test>

	<ajc-test num="939" dir="bugs/serialVersionUID"
                abccomment="we don't make any serialVersionUID guarantees"
		title="SUID: Declare implements (compile)" comment="Warning because of added interface" pr="41181">
                <abckeywords><skip/></abckeywords>
		<compile files="Test.java, Util.java" />
        <run class="Test"/>
		<compile files="Test.java, Util.java, DeclareImplements.aj" options="-Xlint:warning">
            <message kind="warning"/>
		</compile>
        <run class="Util" options="-fail"/>
	</ajc-test>
 
 	<ajc-test num="940" dir="bugs/serialVersionUID"
		title="SUID: Declare implements non-Serializable (compile)" comment="OK because not Serializable"
		pr="41181">
		<compile files="NonSerializableTest.java, DeclareImplements.aj" options="-Xlint:warning"/>
	</ajc-test>
 
 	<ajc-test num="941" dir="bugs/serialVersionUID"
		title="SUID: Declare implements Serializable (compile)" comment="OK because adding Serializable"
		pr="41181">
		<compile files="NonSerializableTest.java, DeclareImplementsSerializable.aj" options="-Xlint:warning"/>
	</ajc-test>

	<ajc-test num="942" dir="bugs/serialVersionUID"
                abccomment="we don't make any serialVersionUID guarantees"
		title="SUID: Declare implements (weave)" comment="Warning because of added interface" pr="41181">
                <abckeywords><skip/></abckeywords>
		<compile files="Test.java, Util.java" />
        <run class="Test"/>
		<compile files="injar.jar, DeclareImplements.aj" options="-Xlint:warning">
            <message kind="warning" line="0"/>
		</compile>
        <run class="Util" options="-fail"/>
	</ajc-test>

	<ajc-test num="943" dir="bugs/serialVersionUID" 
                abccomment="we don't make any serialVersionUID guarantees"
                  title="SUID: Priviliged aspect" pr="41181">
                <abckeywords><skip/></abckeywords>
		<compile files="Test.java, Util.java"/>
        <run class="Test"/>
		<compile files="Test.java, Util.java, PrivilegedAspect.aj" options="-Xlint:warning">
            <message kind="warning" line="1"/>
		</compile>
        <run class="Util" options="-fail"/>
	</ajc-test>

	<ajc-test num="944" dir="bugs/serialVersionUID"
                abccomment="we don't make any serialVersionUID guarantees"
		title="SUID: Perthis aspect"
		comment="Warning because added of added interface MightHaveAspect. Added field is private transient"
		pr="41181">
                <abckeywords><skip/></abckeywords>
		<compile files="Test.java, Util.java" />
        <run class="Test"/>
		<compile files="Test.java, Util.java, PerThisAspect.aj" options="-Xlint:warning">
            <message kind="warning" line="0"/>
		</compile>
        <run class="Util" options="-fail"/>
	</ajc-test>
    
   	<ajc-test num="945" dir="bugs/fieldsOnInterfaces"
		pr="52107"
                abccomment="this is an error for us"
		title="declare String field on interface">
		<compile files="StringFieldOnInterface.java">
			<message kind="error" line="16"/>
			<message kind="error" line="17"/>
			<ajcmessage kind="warning" line="16" text="this affected type is not exposed"/>
         	<ajcmessage kind="warning" line="17" text="this affected type is not exposed"/>
		</compile>	   
	</ajc-test>

	<ajc-test num="946" dir="bugs/fieldsOnInterfaces"
		pr="52107"
                abccomment="this is an error for us"
		title="declare int field on interface">
		<compile files="IntFieldOnInterface.java">
		<message kind="error" line="27"/>
		<message kind="error" line="28"/>
		<ajcmessage kind="warning" line="27" text="this affected type is not exposed"/>
         	<ajcmessage kind="warning" line="28" text="this affected type is not exposed"/>
		</compile>
	</ajc-test>
	
	<ajc-test num="947" dir="bugs/fieldsOnInterfaces"
		pr="52107"
                abccomment="this is an error for us"
		title="declare Object field on interface">
		<compile files="ObjectFieldOnInterface.java">
			<message kind="error" line="20"/>
			<message kind="error" line="21"/>
			<ajcmessage kind="warning" line="20" text="this affected type is not exposed"/>
         	<ajcmessage kind="warning" line="21" text="this affected type is not exposed"/>
		</compile>
	</ajc-test>

	<ajc-test num="948" dir="bugs" pr="50776"
   	 title="fail in compiling aspect with overriding method introduction with different throws clause ">
        <compile files="IntertypeDifferentThrows.java" />
    </ajc-test>
    
	<ajc-test num="949" dir="new" 
		comment="in ajc 1.1.1, VerifyError Illegal use of nonvirtual function call"
		title="super call in anonymous class created in around advice">
        <compile files="SuperClosure.java" />
        <run class="SuperClosure" />
    </ajc-test>

	<ajc-test num="950" dir="incremental/initialTests/aspectSourceAdded" 
    	title="add aspect source file and check world is rewoven"
    	keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental"
        	sourceroots="."/>
        <inc-compile tag="20">
            <dir-changes added="Detour"/>
        </inc-compile>
        <run class="Main"/>
    </ajc-test>
    
    <ajc-test num="951" dir="bugs/deprecated" pr="54098"
                abccomment="we don't support deprecation"
   	title="-deprecation not working?" >
    	 <compile files="Deprecation.java, Deprecated.java" options="-deprecation">
            <message kind="warning" line="5"/>
            <message kind="warning" line="6"/>
        </compile>
    </ajc-test>
    
      <ajc-test num="952" dir="bugs" pr="44272"
            abccomment="we only report one error, at the application location"
    		title="retitle warning to circular {advice} dependency at ...">
        <compile files="CircularAdvicePrecedence.java">
            <ajcmessage kind="error" line="4"/> 
            <ajcmessage kind="error" line="5"/> 
            <ajcmessage kind="error" line="6"/> 
            <message kind="error" line="11"/> 
        </compile>
    </ajc-test>
    
    <ajc-test num="953" dir="bugs"  pr="51322"
    	title="Introduce Unknown Type to class causes Null pointer exception"  >
        <compile files="Pr51322.java"> 
        	<message kind="error" line="5"/>
        </compile>
    </ajc-test>
    
    <!-- this test unreliable - can't always delete sandbox afterwards, need to get
         to the bottom of why...
     <ajc-test num="954" dir="bugs"  pr="43714"
    	title="weaving from an input jar into that same jar.."  >
        <compile files="notAJar.jar" outjar="notAJar.jar"> 
        	<message kind="error" line="0"/>
        </compile>
    </ajc-test>
	-->
	
	 <ajc-test num="955" dir="bugs"  pr="43714"
    	title="weaving from an aspectpath jar into that same jar.."  >
        <compile files="WeaveLocal.java" aspectpath="notAJar.jar" outjar="notAJar.jar" >         	
        </compile>
    </ajc-test>
    
     
    <ajc-test num="956" dir="incremental/initialTests/classWAroundClosureRemoved"
      title="make sure additional classes generated during weave are deleted with src class file"
      keywords="incremental-test">
      <compile staging="true" 
        	options="-incremental"
        	sourceroots="."/>
        <inc-compile tag="20" >
            <dir-changes removed="AdviceOnIntroduced$AjcClosure1"/>
        </inc-compile>
    </ajc-test>

    <ajc-test num="957" dir="bugs"
		title="Private members introduced via an interface are visible to the class"
		pr="52928">
		<compile
			files="VisiblePrivateInterfaceITDs.java" >
            <message kind="error" line="13"/>
		</compile>
	</ajc-test>
	
    <ajc-test num="958" dir="bugs/declarePrecedenceWithClasses" pr="53012"
   	 title="declare precedence on a class should be a compile-time error 1">
        <compile files="DeclarePrecedenceTestClass.java" >
          <message kind="error" line="10" text="Non-aspect types can only be specified"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="959" dir="bugs/declarePrecedenceWithClasses" pr="53012"
   	 title="declare precedence on a class should be a compile-time error 2">
        <compile files="Priority.aj" />
    </ajc-test>
	
    <ajc-test num="960" dir="bugs/StringToString" pr="55341"
	    title="error Type mismatch: cannot convert from java.lang.String to java.lang.String"
                abccomment="we think this is an error"
     		comment="make helloworld.jar with 'ajc -outjar helloworld.jar HW.java' or run BcweaverJarMaker"
     		keywords="">
        <compile files="X.java" classpath="helloworld.jar">
        	<ajcmessage kind="warning" line="3"/>
        	<ajcmessage kind="warning" line="7"/>
        	<message kind="error" line="3"/>
        	<message kind="error" line="7"/>
        </compile>
    </ajc-test>
	
    <ajc-test num="961" dir="bugs/systemouts"
    	pr="57432"
         abccomment="we correctly report two errors at line 13"
		title="declare error binary-weaving NPE 1">
        <compile files="injar-debug.jar,A.java">
			<ajcmessage kind="error" line="12" file="X.java"/>
			<ajcmessage kind="error" line="13" file="X.java"/>
			<ajcmessage kind="error" line="20" file="X.java"/>
			<ajcmessage kind="error" line="22" file="X.java"/>
			<ajcmessage kind="error" line="23" file="X.java"/>
			<ajcmessage kind="error" line="27" file="X.java"/>
			<ajcmessage kind="error" line="28" file="X.java"/>
			<ajcmessage kind="error" line="29" file="X.java"/>
			<ajcmessage kind="error" line="30" file="X.java"/>
			<ajcmessage kind="error" line="31" file="X.java"/>
			<ajcmessage kind="error" line="32" file="X.java"/>
			<ajcmessage kind="error" line="33" file="X.java"/>
			<ajcmessage kind="error" line="34" file="X.java"/>
			<ajcmessage kind="error" line="35" file="X.java"/>
			<ajcmessage kind="error" line="36" file="X.java"/>
			<ajcmessage kind="error" line="37" file="X.java"/>
			<ajcmessage kind="error" line="38" file="X.java"/>
			<ajcmessage kind="error" line="39" file="X.java"/>
			<ajcmessage kind="error" line="40" file="X.java"/>
			<ajcmessage kind="error" line="41" file="X.java"/>
			<message kind="error" line="12" file="X.java"/>
			<message kind="error" line="13" file="X.java"/>
			<message kind="error" line="13" file="X.java"/>
			<message kind="error" line="20" file="X.java"/>
			<message kind="error" line="22" file="X.java"/>
			<message kind="error" line="23" file="X.java"/>
			<message kind="error" line="27" file="X.java"/>
			<message kind="error" line="28" file="X.java"/>
			<message kind="error" line="29" file="X.java"/>
			<message kind="error" line="30" file="X.java"/>
			<message kind="error" line="31" file="X.java"/>
			<message kind="error" line="32" file="X.java"/>
			<message kind="error" line="33" file="X.java"/>
			<message kind="error" line="34" file="X.java"/>
			<message kind="error" line="35" file="X.java"/>
			<message kind="error" line="36" file="X.java"/>
			<message kind="error" line="37" file="X.java"/>
			<message kind="error" line="38" file="X.java"/>
			<message kind="error" line="39" file="X.java"/>
			<message kind="error" line="40" file="X.java"/>
			<message kind="error" line="41" file="X.java"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="962" dir="bugs/systemouts"
    	pr="57432"
           abccomment="we generate 21 errors, just like ajc.."
		title="declare error binary-weaving NPE 2 ">
        <compile files="injar-nodebug.jar,A.java">
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<message kind="error" />
			<ajcmessage kind="error" line="0"/>
        </compile>
    </ajc-test>
	
	<ajc-test num="963" dir="bugs/tooManyErrors"
    	pr="58679" abccomment="abc stops after 100 errors, ajc after 101. Nothing
	             interesting in this test case. PA"
		title="Regression from 1.1: NPE in CompilationResult">
        <compile files="Joinpoints101.jar,DecErrors.aj">
         
          <ajcmessage kind="error" line="10"/><ajcmessage kind="error" line="11"/>
          <ajcmessage kind="error" line="12"/><ajcmessage kind="error" line="13"/>
          <ajcmessage kind="error" line="14"/>

          <ajcmessage kind="error" line="16"/><ajcmessage kind="error" line="17"/>
          <ajcmessage kind="error" line="18"/><ajcmessage kind="error" line="19"/>
          <ajcmessage kind="error" line="20"/>
 
          <ajcmessage kind="error" line="22"/><ajcmessage kind="error" line="23"/>
          <ajcmessage kind="error" line="24"/><ajcmessage kind="error" line="25"/>
          <ajcmessage kind="error" line="26"/>
 
          <ajcmessage kind="error" line="28"/><ajcmessage kind="error" line="29"/>
          <ajcmessage kind="error" line="30"/><ajcmessage kind="error" line="31"/>
          <ajcmessage kind="error" line="32"/>
  
          <ajcmessage kind="error" line="34"/><ajcmessage kind="error" line="35"/>
          <ajcmessage kind="error" line="36"/><ajcmessage kind="error" line="37"/>
          <ajcmessage kind="error" line="38"/>
 
          <ajcmessage kind="error" line="40"/><ajcmessage kind="error" line="41"/>
          <ajcmessage kind="error" line="42"/><ajcmessage kind="error" line="43"/>
          <ajcmessage kind="error" line="44"/>
          
          <ajcmessage kind="error" line="46"/><ajcmessage kind="error" line="47"/>
          <ajcmessage kind="error" line="48"/><ajcmessage kind="error" line="49"/>
          <ajcmessage kind="error" line="50"/>
 
          <ajcmessage kind="error" line="52"/><ajcmessage kind="error" line="53"/>
          <ajcmessage kind="error" line="54"/><ajcmessage kind="error" line="55"/>
          <ajcmessage kind="error" line="56"/>
  
          <ajcmessage kind="error" line="58"/><ajcmessage kind="error" line="59"/>
          <ajcmessage kind="error" line="60"/><ajcmessage kind="error" line="61"/>
          <ajcmessage kind="error" line="62"/>
 
          <ajcmessage kind="error" line="64"/><ajcmessage kind="error" line="65"/>
          <ajcmessage kind="error" line="66"/><ajcmessage kind="error" line="67"/>
          <ajcmessage kind="error" line="68"/>
          
          <ajcmessage kind="error" line="70"/><ajcmessage kind="error" line="71"/>
          <ajcmessage kind="error" line="72"/><ajcmessage kind="error" line="73"/>
          <ajcmessage kind="error" line="74"/>
 
          <ajcmessage kind="error" line="76"/><ajcmessage kind="error" line="77"/>
          <ajcmessage kind="error" line="78"/><ajcmessage kind="error" line="79"/>
          <ajcmessage kind="error" line="80"/>
  
          <ajcmessage kind="error" line="82"/><ajcmessage kind="error" line="83"/>
          <ajcmessage kind="error" line="84"/><ajcmessage kind="error" line="85"/>
          <ajcmessage kind="error" line="86"/>
 
          <ajcmessage kind="error" line="88"/><ajcmessage kind="error" line="89"/>
          <ajcmessage kind="error" line="90"/><ajcmessage kind="error" line="91"/>
          <ajcmessage kind="error" line="92"/>
          
          <ajcmessage kind="error" line="94"/><ajcmessage kind="error" line="95"/>
          <ajcmessage kind="error" line="96"/><ajcmessage kind="error" line="97"/>
          <ajcmessage kind="error" line="98"/>
 
          <ajcmessage kind="error" line="100"/><ajcmessage kind="error" line="101"/>
          <ajcmessage kind="error" line="102"/><ajcmessage kind="error" line="103"/>
          <ajcmessage kind="error" line="104"/>
  
          <ajcmessage kind="error" line="106"/><ajcmessage kind="error" line="107"/>
          <ajcmessage kind="error" line="108"/><ajcmessage kind="error" line="109"/>
          <ajcmessage kind="error" line="110"/>
 
          <ajcmessage kind="error" line="112"/><ajcmessage kind="error" line="113"/>
          <ajcmessage kind="error" line="114"/><ajcmessage kind="error" line="115"/>
          <ajcmessage kind="error" line="116"/>
          
          <ajcmessage kind="error" line="118"/><ajcmessage kind="error" line="119"/>
          <ajcmessage kind="error" line="120"/><ajcmessage kind="error" line="121"/>
          <ajcmessage kind="error" line="122"/>
  
          <ajcmessage kind="error" line="124"/><ajcmessage kind="error" line="125"/>
          <ajcmessage kind="error" line="126"/><ajcmessage kind="error" line="127"/>
          <ajcmessage kind="error" line="128"/>
 
          <ajcmessage kind="error" line="130"/>
          
          <message kind="error" line="10"/><message kind="error" line="11"/>
          <message kind="error" line="12"/><message kind="error" line="13"/>
          <message kind="error" line="14"/>

          <message kind="error" line="16"/><message kind="error" line="17"/>
          <message kind="error" line="18"/><message kind="error" line="19"/>
          <message kind="error" line="20"/>
 
          <message kind="error" line="22"/><message kind="error" line="23"/>
          <message kind="error" line="24"/><message kind="error" line="25"/>
          <message kind="error" line="26"/>
 
          <message kind="error" line="28"/><message kind="error" line="29"/>
          <message kind="error" line="30"/><message kind="error" line="31"/>
          <message kind="error" line="32"/>
  
          <message kind="error" line="34"/><message kind="error" line="35"/>
          <message kind="error" line="36"/><message kind="error" line="37"/>
          <message kind="error" line="38"/>
 
          <message kind="error" line="40"/><message kind="error" line="41"/>
          <message kind="error" line="42"/><message kind="error" line="43"/>
          <message kind="error" line="44"/>
          
          <message kind="error" line="46"/><message kind="error" line="47"/>
          <message kind="error" line="48"/><message kind="error" line="49"/>
          <message kind="error" line="50"/>
 
          <message kind="error" line="52"/><message kind="error" line="53"/>
          <message kind="error" line="54"/><message kind="error" line="55"/>
          <message kind="error" line="56"/>
  
          <message kind="error" line="58"/><message kind="error" line="59"/>
          <message kind="error" line="60"/><message kind="error" line="61"/>
          <message kind="error" line="62"/>
 
          <message kind="error" line="64"/><message kind="error" line="65"/>
          <message kind="error" line="66"/><message kind="error" line="67"/>
          <message kind="error" line="68"/>
          
          <message kind="error" line="70"/><message kind="error" line="71"/>
          <message kind="error" line="72"/><message kind="error" line="73"/>
          <message kind="error" line="74"/>
 
          <message kind="error" line="76"/><message kind="error" line="77"/>
          <message kind="error" line="78"/><message kind="error" line="79"/>
          <message kind="error" line="80"/>
  
          <message kind="error" line="82"/><message kind="error" line="83"/>
          <message kind="error" line="84"/><message kind="error" line="85"/>
          <message kind="error" line="86"/>
 
          <message kind="error" line="88"/><message kind="error" line="89"/>
          <message kind="error" line="90"/><message kind="error" line="91"/>
          <message kind="error" line="92"/>
          
          <message kind="error" line="94"/><message kind="error" line="95"/>
          <message kind="error" line="96"/><message kind="error" line="97"/>
          <message kind="error" line="98"/>
 
          <message kind="error" line="100"/><message kind="error" line="101"/>
          <message kind="error" line="102"/><message kind="error" line="103"/>
          <message kind="error" line="104"/>
  
          <message kind="error" line="106"/><message kind="error" line="107"/>
          <message kind="error" line="108"/><message kind="error" line="109"/>
          <message kind="error" line="110"/>
 
          <message kind="error" line="112"/><message kind="error" line="113"/>
          <message kind="error" line="114"/><message kind="error" line="115"/>
          <message kind="error" line="116"/>
          
          <message kind="error" line="118"/><message kind="error" line="119"/>
          <message kind="error" line="120"/><message kind="error" line="121"/>
          <message kind="error" line="122"/>
  
          <message kind="error" line="124"/><message kind="error" line="125"/>
          <message kind="error" line="126"/><message kind="error" line="127"/>
          <message kind="error" line="128"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="964" dir="bugs"
    	pr="59440"
		title="NPE when binary weaving a ctor ITD">
        <compile files="CtorITD.aj">
        	<message kind="error" line="2"/>
        </compile>
    </ajc-test>

  <ajc-test num="965" dir="incremental/full-rebuild"
    	pr="59895"
		title="incremental with aspect-driven full rebuild">
        <compile 
			staging="true" 
			sourceroots="src"
			options="-incremental">
        	<message kind="error" line="3" file="Aspect.java"/>
        	</compile>
        <inc-compile tag="20">
        	<message kind="warning" line="4" file="Main.java"/>
        	</inc-compile>
        <run class="Main"/>
    </ajc-test>
	
	<ajc-test num="966" dir="bugs"
    	pr="59397"
                abccomment="we do the right thing and ignore extra introduced arguments"
		title="NPE in compiler when using (an unusual) declare warning against a ctor ITD">
        <compile files="DecwInitializationITD.java">
        	<ajcmessage kind="warning" line="16"/>
        </compile>
    </ajc-test>
	
   <ajc-test num="967" dir="bugs/compileOrdering" 
		pr="59778"
		title="InterTypeMethodDeclaration.java:104">
        <compile files="B.java,D.java" >
          <message kind="error" line="2" file="B.java"/>
        </compile>
        <compile files="D.java,B.java">
          <message kind="error" line="2" file="B.java"/>
        </compile>
    </ajc-test>
    
    <ajc-test num="968" dir="bugs" 
		pr="61538" title="nested uses of this() inside constructors not handled properly for initialization and preinitialization pointcuts">
        <compile files="ConstructorMain.java"/>
        <run class="ConstructorMain"/>
    </ajc-test> 
    
    <ajc-test num="969" dir="bugs"
              abccomment="we support this fine"
		pr="61568" title="wrong variable binding in || pointcuts">
        <compile files="DisjunctVarBinding.java">
          <ajcmessage kind="error" line="34" text="Ambiguous binding of type B"/>
          <ajcmessage kind="error" line="34" text="Ambiguous binding of type A"/>
        </compile>
    </ajc-test>
 
 	<ajc-test num="970" dir="bugs" 
		pr="60936" title="error message for constructor-execution pcd">
        <compile files="InterfaceConstructor.java">
          <message kind="warning" line="10" text="no interface constructor-execution join point"/>
        </compile>
    </ajc-test>
    
   	<ajc-test num="971" dir="bugs"
                abccomment="we support ambiguous bindings"
		pr="62073" title="false ambigous binding error (introduced in 1.2rc2)">
        <compile files="DisjunctVarBinding_2.java,DisjunctVarBinding_3.java">
        	<ajcmessage kind="error" line="25" file="DisjunctVarBinding_2.java" text="Ambiguous binding of type B"/>
        	<ajcmessage kind="error" line="25" file="DisjunctVarBinding_2.java" text="Ambiguous binding of type A"/>
        </compile>
        <compile files="DisjunctVarBinding_3.java,DisjunctVarBinding_2.java">
        	<ajcmessage kind="error" line="25" file="DisjunctVarBinding_2.java" text="Ambiguous binding of type B"/>
        	<ajcmessage kind="error" line="25" file="DisjunctVarBinding_2.java" text="Ambiguous binding of type A"/>
        </compile>
    </ajc-test>
    
	<ajc-test num="972" dir="bugs/IfPerThis"
          abccomment="abc supports if() inside per clauses"
		pr="62458" title="An if() pointcut inside a perthis() clauses an ABORT - null pointer exception in ajc - 1">
        <compile files="Testcase1.java">
        	<ajcmessage kind="error" line="15" text="if() pointcut designator cannot be used directly in a per clause"/>
        	<ajcmessage kind="error" line="23" text="if() pointcut designator cannot be used directly in a per clause"/>
        	<ajcmessage kind="error" line="25" text="if() pointcut designator cannot be used directly in a per clause"/>
        	<ajcmessage kind="error" line="27" text="if() pointcut designator cannot be used directly in a per clause"/>
        </compile>
    </ajc-test>
    
   	<ajc-test num="973" dir="bugs/IfPerThis"
		pr="62458" title="An if() pointcut inside a perthis() clauses an ABORT - null pointer exception in ajc - 2">
        <compile files="Testcase2.java"/>
        <run class="Testcase2"/>
    </ajc-test>
   	
   	<ajc-test num="974" dir="bugs/IfPerThis"
                abccomment="abc supports if inside perclauses;
                            the error we do produce is complaining about a
                            reference to a static member of the aspect,
                            which we ought to support but don't yet - AGS 6/8/04"
		pr="62458" title="An if() pointcut inside a perthis() clauses an ABORT - null pointer exception in ajc - 3">
        <compile files="Testcase3.java">
        	<ajcmessage kind="error" line="2" text="if() pointcut designator cannot be used directly in a per clause"/>
        </compile>
    </ajc-test>

    <ajc-test num="978" dir="abctests/bugs"
              title="cflowbelow in abstract aspects">
          <compile files="AbstractPrec1.java"/>
          <run class="AbstractPrec1"/>
    </ajc-test>    

    <ajc-test num="979" dir="abctests/bugs/pack1"
        title="packages in wrong place">
      <compile files="A/B.java">
         <message kind="error"/>
      </compile>
    </ajc-test>

    <ajc-test num="980" dir="abctests/bugs"
        title="binding of variables inside || pointcuts">
      <compile files="BindProblem.java"/>
      <run class="BindProblem"/>
    </ajc-test>

    <ajc-test num="981" dir="abctests/bugs"
        title="problem with byte constants">
       <compile files="ByteProblem.java"/>
    </ajc-test>

    <ajc-test num="982" dir="abctests/bugs"
        title="needing declare parents to resolve inner class reference">
       <compile files="DeclareParentsInner.java"/>
    </ajc-test>

    <ajc-test num="983" dir="abctests/bugs/declareparentsbinary"
        title="declare parents on binary classes needs to modify constructor calls 1">
       <compile files="BinaryClasses.jar,Aspect.java"/>
       <run class="BinaryClasses"/>
    </ajc-test>

    <ajc-test num="984" dir="abctests/bugs/declareparentsbinary"
        title="declare parents on binary classes needs to modify constructor calls 2">
       <compile files="BinaryClasses2.jar,Aspect.java">
           <!-- actual error location may need changing -->
           <message kind="error" file="BinaryClasses2.java" line="24"/>
       </compile>
    </ajc-test>

    <ajc-test num="985" dir="abctests/bugs"
        title="declare parents referring to an otherwise unmentioned class">
        <compile files="DeclareParentsRef.java"/>
    </ajc-test>

    <ajc-test num="986" dir="abctests/bugs"
        title="Matching int[].clone()"
	abccomment="abc fails to parse 'call(* int[].clone())', ajc fails to advise it.
	       Both work fine with 'call(* Object.clone())'.">
	<compile files="IntArray.java"/>
	<run class="IntArray"/>
    </ajc-test>       

    <ajc-test num="987" dir="abctests/bugs"
        title="method intertype onto inner class"
	abccomment="abc fails in generation of accessors; ajc fails
                    at runtime">
	<compile files="QualThis.java"/>
	<run class="QualThis"/>
    </ajc-test>  

    <ajc-test num="988" dir="abctests/bugs"
        title="separate compilation and references to compile time constants">
        <compile files="ConstantInit.java"/>
        <compile includeClassesDir="true" files="ConstantUse.java"/>
        <run class="ConstantUse"/>
    </ajc-test>

    <ajc-test num="989" dir="abctests/bugs"
        title="lifting if out of cflow, with correct parameters">
        <compile files="CflowIf.java"/>
        <run class="CflowIf"/>
    </ajc-test>

    <ajc-test num="990" dir="abctests/bugs"
        title="lifting if out of cflow, with correct parameters 2">
	<compile files="CflowIf2.java"/>
	<run class="CflowIf2"/>
    </ajc-test>

    <ajc-test num="991" dir="abctests/bugs"
        title="declare parents causes interface to implement itself">
	<compile files="foo/Foo.java">
	    <message kind="error" file="foo/Foo.java" line="11"/>
	</compile>
    </ajc-test>

    <ajc-test num="994" dir="abctests/bugs"
        title="&amp;&amp; and || interact correctly with binding">
       <compile files="AndOrBind.java"/>
       <run class="AndOrBind"/>
    </ajc-test>

    <ajc-test num="995" dir="abctests/bugs"
        title="correct treatment of exceptions with interfaceinvoke">
       <compile files="InterfaceExceptions.java"/>
    </ajc-test>

    <ajc-test num="996" dir="abctests/bugs"
        title="anonymous class constructed inside this(...) call">
       <compile files="AnonPreinit.java"/>
       <run class="AnonPreinit"/>
    </ajc-test>

    <ajc-test num="997" dir="abctests/bugs"
        title="verify error with calls to outer methods from inner classes">
       <compile files="PatternMatcher.java"/>
       <run class="PatternMatcher"/>
    </ajc-test>

    <ajc-test num="998" dir="abctests/bugs"
        title="declare parents causes interface to implement itself">
	<compile files="foo2/Foo.java"/>
    </ajc-test>

    <ajc-test num="999" dir="abctests/bugs/declareparentsprotectedaccessinnerclasses"
        title="declare parents/protected access/inner classes">
	<compile files="A.java,bar/C.java"/>
    </ajc-test>

    <ajc-test num="1000" dir="abctests/bugs/resolvingdeclareparents"
        title="resolving and declared parents">
	<compile files="B.java"/>
	<compile classpath="." files="A.java"/>
    </ajc-test>

    <ajc-test num="1001" dir="abctests/bugs"
         title="resolving anonymous classes inside classes with dollar signs">
         <compile files="ExtraAnon.java"/>
    </ajc-test>
    <ajc-test num="1002" dir="abctests/bugs/doubledeclareparents"
         title="double declare parents">
         <compile files="A.java"/>
    </ajc-test>
    <ajc-test num="1003" dir="abctests/bugs" 
         title="interaction of around and after returning at execution shadow">
         <compile files="AroundAR.java"/>
         <run class="AroundAR"/>
    </ajc-test>
    <ajc-test num="1004" dir="abctests/around/initialization" 
         title="around with initialization">
         <compile files="Foo.java"/>
         <run class="Foo"/>
    </ajc-test>
    <ajc-test num="1005" dir="abctests/around/alternative" 
         title="around with alternative binding, changed proceed">
         <compile files="Foo.java"/>
         <run class="Foo"/>
    </ajc-test>
    <ajc-test num="1006" dir="abctests/around/adviceexecution" 
         title="around with circular adviceexecution advice">
         <compile files="Foo.java">
                  <message kind="warning" line="10"/>
         </compile>
         <run class="Foo"/>
    </ajc-test>
    <ajc-test num="1007" dir="abctests/bugs"
         title="make sure we get valid jimple for perthis/pertarget bind methods">
         <compile files="PerTarget.java" options="-debug,doValidate"/>
         <run class="PerTarget"/>
    </ajc-test>
    <ajc-test num="1008" dir="abctests/bugs/percflowinterfaces"
         title="precedence of percflowsetups">
         <compile files="F.java"/>
    </ajc-test>
    <ajc-test num="1009" dir="abctests/bugs"
         title="correct interaction of advice and constructor inlining">
         <compile files="InlinedCons.java"/>
         <run class="InlinedCons"/>
    </ajc-test>
    <ajc-test num="1010" dir="abctests/bugs"
         title="correct handling of methods in source with $ in the name 1">
         <compile files="DollarMethod.java"/>
         <run class="DollarMethod"/>
    </ajc-test>
    <ajc-test num="1011" dir="abctests/bugs"
         title="correct handling of methods in source with $ in the name 2">
         <compile files="DollarMethod2.java"/>
         <run class="DollarMethod2"/>
    </ajc-test>
    <ajc-test num="1012" dir="abctests/bugs"
         title="correct handling of methods in source with $ in the name 3">
         <compile files="Dollar$Method3.java"/>
         <run class="Dollar$Method3"/>
    </ajc-test>
    <ajc-test num="1013" dir="abctests/bugs"
         title="circular pointcuts">
         <compile files="TestAspect.java">
            <message kind="error" line="11"/>
            <message kind="error" line="12"/>
         </compile>
    </ajc-test>
    <ajc-test num="1014" dir="abctests/bugs"
         title="interaction of named pointcuts and nested cflow">
         <compile files="CflowInliningDepth.java"/>
         <run class="CflowInliningDepth"/>
    </ajc-test>
    <ajc-test num="1015" dir="abctests/bugs"
         title="correct topological sorting of precedence">
         <compile files="PrecedenceSort.java"/>
    </ajc-test>
    <ajc-test num="1016" dir="abctests/bugs"
         title="checks for declare parents on binary classes">
         <compile files="declareparentsbinary/DP.jar,DeclareParentsBinaryAspect.java">
            <message kind="error"/>
            <message kind="error"/>
            <message kind="error"/>
            <message kind="error"/>
            <message kind="error"/>
            <message kind="error"/>
            <message kind="error"/>
            <message kind="error"/>
         </compile>
    </ajc-test>
    <ajc-test num="1017" dir="abctests/bugs"
        title="around weaver incorrectly unboxing double literals in float context">
        <compile files="AroundUnboxing.java" />
        <run class="AroundUnboxing"/>
    </ajc-test>
    <ajc-test num="1018" dir="abctests/bugs"
        title="internal around weaver error when trying to capture proceed() into a closure">
        <compile files="ExtractedProceed.java">
         <message kind="warning" />
          <message kind="warning"/>
        </compile>
    </ajc-test>

    <ajc-test num="1205" dir="abctests/bugs"
       title="Preinit weaving problem">
        <compile files="Preinit.java" />
        <run class="Preinit" />
    </ajc-test>     

    <ajc-test num="1206" dir="abctests/bugs"
       title="Preinit weaving problem (test 2)">
        <compile files="Preinit2.java" />
        <run class="Preinit2" />
    </ajc-test>     

    <ajc-test num="1207" dir="abctests/bugs"
       title="Problem with privileged ITD access to private fields">
        <compile files="ITDPrivate.java" />
        <run class="ITDPrivate" />
    </ajc-test>

    <ajc-test num="1208" dir="abctests/bugs/inpath"
       title="Class being woven twice when using -inpath">
        <compile sourceroots="aspects/" inpath="java/" />
        <run class="Test" />
    </ajc-test>

    <ajc-test num="1210" dir="abctests/bugs"
       title="thisJoinPoint maintains object identity for an entire join point">
        <compile files="TJP.java" />
        <run class="TJP" />
    </ajc-test>

    <ajc-test num="1211" dir="abctests/new"
       title="concrete pointcuts in abstract aspects can be overridden">
        <compile files="PCInh.java" />
        <run class="PCInh" />
    </ajc-test>

    <ajc-test num="1213" dir="abctests/bugs"
      title="Precedence of derived advice">
        <compile files="DerivedAdvicePrecedence.java">
        </compile>
        <run class="DerivedAdvicePrecedence"/>
    </ajc-test>       

</suite>
