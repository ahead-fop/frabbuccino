/* abc - The AspectBench Compiler
 * Copyright (C) 2004 Chris Allan
 * Copyright (C) 2005 Julian Tibble
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

//package abc.aspectj;

import polyglot.ast.NodeFactory;
import polyglot.frontend.*;
import polyglot.util.ErrorQueue;
import polyglot.lex.Lexer;
import polyglot.util.CodeWriter;
import polyglot.types.TypeSystem;
import polyglot.visit.PrettyPrinter;

import abc.aspectj.parse.Lexer_c;
import abc.aspectj.parse.Grm;

import abc.aspectj.ast.*;
import abc.aspectj.types.*;
import abc.aspectj.visit.*;

import java.util.*;
import java.io.Reader;

/**
 * Extension information for TraceMatching extension.
 * @author Chris Allan
 * @author Julian Tibble
 */
public refines class ExtensionInfo
{
    public static final Pass.ID CREATE_TRACEMATCH_ADVICE =
            new Pass.ID("create-tracematch-advice");

    public List passes(Job job) {
        List passes = super.passes(job);

        List newPasses = new LinkedList();
        newPasses.add(new VisitorPass(CREATE_TRACEMATCH_ADVICE,
                        job, new MoveTraceMatchMembers(job, ts, nf)));
//        newPasses.add(new PrettyPrintPass(INSPECT_AST, job,
//                                          new CodeWriter(System.out, 70),
//                                          new PrettyPrinter()));

        afterPass(passes, Pass.DISAM_ALL, newPasses);

        return passes;
    }
}
