/* abc - The AspectBench Compiler
 * Copyright (C) 2004 Oege de Moor
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

//package abc.aspectj.ast;

import java.util.List;

import polyglot.ast.Block;
import polyglot.ast.ConstructorCall;
import polyglot.ast.Expr;
import polyglot.ast.Receiver;
import polyglot.ast.Special;
import polyglot.ast.TypeNode;
import polyglot.types.Flags;
import polyglot.types.SemanticException;
import polyglot.types.Type;
import polyglot.util.Position;

/**
 * NodeFactory for aspectj extension.
 * @author Oege de Moor
 */
public interface AJNodeFactory 
       extends polyglot.ast.NodeFactory {
    // TODO: Declare any factory methods for new AST nodes.

    // Factory methods

    AspectDecl AspectDecl(Position pos,
                          boolean is_privileged,
                          Flags flags,
                          String name,
                          TypeNode superClass,
                          List interfaces,
                          PerClause per,
                          AspectBody body);

    AspectBody AspectBody(Position pos, List members);

    DeclareParents DeclareParents(Position pos,
				  ClassnamePatternExpr pat,
				  List parents,
				  DeclareParents.Kind kind);

    IntertypeMethodDecl
    IntertypeMethodDecl(Position pos,
                        Flags flags,
                        TypeNode returnType,
                        TypeNode host,
                        String name,
                        List formals,
                        List throwTypes,
	  	        Block body);

    IntertypeConstructorDecl
    IntertypeConstructorDecl(Position pos,
                        Flags flags,
                        TypeNode host,
                        String name,
                        List formals,
                        List throwTypes,
	  	        Block body);

    IntertypeFieldDecl
	IntertypeFieldDecl(Position pos,
			   Flags flags,
			   TypeNode type,
			   TypeNode host,
			   String name,
			   Expr init);

    SimpleNamePattern SimpleNamePattern(Position pos, String pat);

    CPEUniversal CPEUniversal(Position pos);

    CPEName CPEName(Position pos, NamePattern pat);

}
