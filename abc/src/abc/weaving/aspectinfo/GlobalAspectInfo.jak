
import polyglot.util.Position;
import polyglot.util.ErrorInfo;
import polyglot.types.SemanticException;
import polyglot.types.ClassType;
import polyglot.util.InternalCompilerError;

import soot.*;

import java.util.*;


public refines class GlobalAspectInfo {

    public static final int PRECEDENCE_NONE = 0;
    public static final int PRECEDENCE_FIRST = 1;
    public static final int PRECEDENCE_SECOND = 2;
    public static final int PRECEDENCE_CONFLICT = 3;

    protected Map/*<SootClass,Aspect>*/ classes_aspects_map=null;
    
    protected List/*<Aspect>*/ aspects = new ArrayList();
    protected Set/*<AbcClass>*/ wovenclasses = new HashSet(); // classes that ITDs have been woven into

    protected List/*<IntertypeFieldDecl>*/ ifds = new LinkedList(); // because we want to add at the front
    protected List/*<IntertypeMethodDecl>*/ imds = new ArrayList();
    protected List/*<IntertypeConstructorDecl>*/ icds = new ArrayList();
    protected List/*<DeclareParents>*/ dps = new ArrayList();

    protected Collection/*<SootClass>*/ ecs; // Classes actually extended by declare parents

    protected List /*<ClassType>*/ ctmps = new ArrayList();


    
    protected Map/*<AbcClass,Aspect>*/ aspects_map = new HashMap();
    protected Map/*<Aspect,Set<Aspect>>*/ aspect_visibility = new HashMap();

    protected Map/*<MethodSig,Integer>*/ method_categories = new HashMap();
    protected Map/*<MethodSig,Integer>*/ method_real_mods = new HashMap();
    protected Map/*<MethodSig,String>*/ method_real_names = new HashMap();
    protected Map/*<MethodSig,AbcClass>*/ method_real_classes = new HashMap();
    protected Map/*<MethodSig,Integer>*/ method_skip_first = new HashMap();
    protected Map/*<MethodSig,Integer>*/ method_skip_last = new HashMap();

    protected Map/*<FieldSig,Integer>*/ field_real_mods = new HashMap();
    protected Map/*<FieldSig,String>*/ field_real_names = new HashMap();
    protected Map/*<FieldSig,AbcClass>*/ field_real_classes = new HashMap();
    protected Map/*<MethodSig,FieldSig>*/ accessor_of_field = new HashMap();

    protected List /*<ErrorInfo>*/nonWeavableClassErrors = new ArrayList();

    /** This method builds the aspect_visibility structure,
     *  which is a mapping from classes and abstract aspects to
     *  the concrete aspects that extend them.
     *  It also takes care of inheriting per clauses and
     *  registering the necessary pieces of advice to implement those clauses
     */
    public void buildAspectHierarchy() {
        // Build the aspect hierarchy
        Iterator ai = aspects.iterator();
        while (ai.hasNext()) {
            Aspect a = (Aspect)ai.next();
            aspect_visibility.put(a, new HashSet());
        }

        Iterator cai = aspects.iterator();
        while (cai.hasNext()) {
            Aspect ca = (Aspect)cai.next();
            if (!ca.getInstanceClass().getSootClass().isAbstract()) {
                Aspect sa = ca;
                while (sa != null) {
                    ((Set)aspect_visibility.get(sa)).add(ca);
                    sa = (Aspect)aspects_map.get(AbcFactory.AbcClass(sa.getInstanceClass().getSootClass().getSuperclass()));
                    if(ca.getPer()==null && sa!=null) ca.setPer(sa.getPer());
                }
                if(ca.getPer()==null) ca.setPer(new Singleton(ca.getPosition()));
                ca.getPer().registerSetupAdvice(ca);
            }
        }
    }

        /* Returns the list of classes into which weaving can take place.
                 *  @return a list of {@link abc.weaving.aspectinfo.AbcClass} objects.
         */
        /*public Collection getGeneratedClasses() {
                return generated_classes;
        }*/

    /** Returns the list of all aspects.
     *  @return a list of {@link abc.weaving.aspectinfo.Aspect} objects.
     */
    public List getAspects() {
        return aspects;
    }

    public Map getClassAspectMap() {
    	if (classes_aspects_map==null) {
    		classes_aspects_map=new HashMap();
    		for (Iterator it=this.aspects.iterator();it.hasNext();){
    			Aspect a=(Aspect)it.next();
    			SootClass cl=a.getInstanceClass().getSootClass();
    			if (cl==null)
    				throw new InternalCompilerError("");
    			
    			classes_aspects_map.put(cl, a); 
    		}
    	}
    	return classes_aspects_map;
    }
    public Aspect getAspectFromSootClass(SootClass cl) {
    	return (Aspect)getClassAspectMap().get(cl);
    }
    
    /** Returns the list of all intertype field declarations.
     *  @return a list of {@link abc.weaving.aspectinfo.IntertypeFieldDecl} objects.
     */
    public List getIntertypeFieldDecls() {
        return ifds;
    }

    /** Returns the list of all intertype method declarations.
     *  @return a list of {@link abc.weaving.aspectinfo.IntertypeMethodDecl} objects.
     */
    public List getIntertypeMethodDecls() {
        return imds;
    }

    /** Returns the list of all intertype constructor declarations.
     *  @return a list of {@link abc.weaving.aspectinfo.IntertypeConstructorDecl} objects.
     */
    public List getIntertypeConstructorDecls() {
        return icds;
    }

    /** Returns the list of errors about classes which are not currently being woven, but which we would
     * really need to insert accessor methods into. This is populated in the AJTypeSystem and added to
     * the error queue in AspectDecl.typeCheck().
     * @return a list of <code>ErrorInfo</code> objects
     */
    public List getNonWeavableClassErrors() {
        return nonWeavableClassErrors;
    }

    /** Returns the list of all <code>declare parents</code> declarations.
     *  @return a list of {@link abc.weaving.aspectinfo.DeclareParents} objects.
     */
    public List getDeclareParents() {
        return dps;
    }

    public void setExtendedClasses(Collection ecs) {
        this.ecs = ecs;
    }

    public Collection/*<SootClass>*/ getExtendedClasses() {
        return ecs;
    }

    public Aspect getAspect(AbcClass cl) {
        return (Aspect)aspects_map.get(cl);
    }

    public List getClassesToMakePublic() {
        return ctmps;
    }

    public void addAspect(Aspect aspct) {
        if (!aspects_map.containsKey(aspct.getInstanceClass())) {
            aspects.add(aspct);
            aspects_map.put(aspct.getInstanceClass(),aspct);
           
        }
    }

    public void addIntertypeFieldDecl(IntertypeFieldDecl ifd) {
        ifds.add(0,ifd); // order is important, because of initialisers
    }

    public void addIntertypeMethodDecl(IntertypeMethodDecl imd) {
        imds.add(imd);
    }

    public void addIntertypeConstructorDecl(IntertypeConstructorDecl imd) {
        icds.add(imd);
    }

    public void addDeclareParents(DeclareParents dp) {
        dps.add(dp);
    }

        public void addClassToMakePublic(ClassType c) {
            ctmps.add(c);
        }

        public void addClassNotWeavableError(ErrorInfo ei) {
            nonWeavableClassErrors.add(ei);
        }

    public void print(java.io.PrintStream p) {
        Super().print(p);
        printList(p, aspects, "Aspects:");
        printList(p, ifds, "Intertype field decls:");
        printList(p, imds, "Intertype method decls:");
        printList(p, icds, "Intertype constructor decls:");
        printList(p, dps, "Declare parents:");
    }

    protected void printList(java.io.PrintStream p, List l, String name) {
        p.println(name);
        p.println("------------------------------------------".substring(0,name.length()));
        Iterator li = l.iterator();
        while (li.hasNext()) {
            Object elem = li.next();
            p.println(elem);
        }
        p.println();
    }

    protected Map/*<Aspect,Set<Aspect>>*/ prec_rel = new HashMap();

    public void initPrecedenceRelation(Map prec_rel) {
        this.prec_rel = prec_rel;
    }

    /** Get the precedence relationship between two aspect names,
     *  just using declare precedence relations
     *  @param a the name of the first aspect.
     *  @param b the name of the second aspect.
     *  @return
     *    {@link PRECEDENCE_NONE} if none of the aspects have precedence,
     *    {@link PRECEDENCE_FIRST} if the first aspect has precedence,
     *    {@link PRECEDENCE_SECOND} if the second aspect has precedence, or
     *    {@link PRECEDENCE_CONFLICT} if there is a precedence conflict between the two aspects.
     */
    public int getPrecedence(String a, String b) {
        int prec;
        if (!prec_rel.containsKey(a) || !prec_rel.containsKey(b))
            return PRECEDENCE_NONE;

        boolean ab = ((Set)prec_rel.get(a)).contains(b);
        boolean ba = ((Set)prec_rel.get(b)).contains(a);
        return ab ?
            ba ? PRECEDENCE_CONFLICT : PRECEDENCE_FIRST :
            ba ? PRECEDENCE_SECOND : PRECEDENCE_NONE;
    }

    /** Get the precedence relationship between two aspects,
     * using both declare precedence relations and aspect inheritance
     *  @param a the first aspect.
     *  @param b the second aspect.
     *  @return
     *    {@link PRECEDENCE_NONE} if none of the aspects have precedence,
     *    {@link PRECEDENCE_FIRST} if the first aspect has precedence,
     *    {@link PRECEDENCE_SECOND} if the second aspect has precedence, or
     *    {@link PRECEDENCE_CONFLICT} if there is a precedence conflict between the two aspects.
     */
    public int getPrecedence(Aspect a, Aspect b) {
        //      System.out.println("Comparing precedence of "+a.getName()+" and "+b.getName());

        int prec=getPrecedence(a.getName(), b.getName());
        if(prec!=PRECEDENCE_NONE) return prec;

        //      System.out.println("Trying inheritance");

        // Can't use aspect_visibility since that just maps to concrete aspects.
        // So just walk up from each one to try to find the other.

        Aspect sa=a;
        while(sa!=null) {
            sa=(Aspect)aspects_map.get(AbcFactory.AbcClass
                                       (sa.getInstanceClass().getSootClass().getSuperclass()));
            if(sa==b) return PRECEDENCE_FIRST;
        }

        Aspect sb=b;
        while(sb!=null) {
            sb=(Aspect)aspects_map.get(AbcFactory.AbcClass
                                       (sb.getInstanceClass().getSootClass().getSuperclass()));
            if(sb==a) return PRECEDENCE_SECOND;
        }
        return PRECEDENCE_NONE;
    }

    public void registerMethodCategory(MethodSig sig, int cat) {
        //System.out.println("Method registered: "+sig+" ("+cat+")");
        method_categories.put(sig, new Integer(cat));
    }

    public int getMethodCategory(MethodSig sig) {
        if (method_categories.containsKey(sig)) {
            return ((Integer)method_categories.get(sig)).intValue();
        } else {
            return MethodCategory.NORMAL;
        }
    }

    public void registerRealNameAndClass(MethodSig sig, int mods, String real_name, AbcClass real_class,
                                         int skip_first, int skip_last) {
        //System.out.println("Method registered: "+sig+" ("+cat+")");
        method_real_mods.put(sig, new Integer(mods));
        method_real_names.put(sig, real_name);
        method_real_classes.put(sig, real_class);
        method_skip_first.put(sig, new Integer(skip_first));
        method_skip_last.put(sig, new Integer(skip_last));
    }

    public int getRealModifiers(MethodSig sig, int defmods) {
        if (method_real_mods.containsKey(sig)) {
            return ((Integer)method_real_mods.get(sig)).intValue();
        } else {
            return defmods;
        }
    }

    public String getRealName(MethodSig sig) {
        return (String)method_real_names.get(sig);
    }

    public AbcClass getRealClass(MethodSig sig) {
        return (AbcClass)method_real_classes.get(sig);
    }

    public int getSkipFirst(MethodSig sig) {
        if (method_skip_first.containsKey(sig)) {
            return ((Integer)method_skip_first.get(sig)).intValue();
        } else {
            return 0;
        }
    }

    public int getSkipLast(MethodSig sig) {
        if (method_skip_last.containsKey(sig)) {
            return ((Integer)method_skip_last.get(sig)).intValue();
        } else {
            return 0;
        }
    }

        public void registerRealNameAndClass(FieldSig sig, int mods, String real_name, AbcClass real_class) {
          field_real_mods.put(sig, new Integer(mods));
          field_real_names.put(sig, real_name);
          field_real_classes.put(sig, real_class);
        }

        public int getRealModifiers(FieldSig sig, int defmods) {
          if (field_real_mods.containsKey(sig)) {
                  return ((Integer)field_real_mods.get(sig)).intValue();
          } else {
                  return defmods;
          }
        }

        public String getRealName(FieldSig sig) {
          return (String)field_real_names.get(sig);
        }

        public AbcClass getRealClass(FieldSig sig) {
          return (AbcClass)field_real_classes.get(sig);
        }

        public FieldSig getField(MethodSig sig) {
                return (FieldSig) accessor_of_field.get(sig);
        }

        public void registerFieldAccessor(FieldSig fs, MethodSig ms) {
                accessor_of_field.put(ms,fs);
        }

        public void registerWeave(AbcClass cl) {
                wovenclasses.add(cl);
        }

        public Set getWovenClasses() {
                return wovenclasses;
        }

        public void registerSourceClass(AbcClass cl) {
                wovenclasses.remove(cl);
        }


}
