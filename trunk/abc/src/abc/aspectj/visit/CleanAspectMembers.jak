/* abc - The AspectBench Compiler
 * Copyright (C) 2004 Aske Simon Christensen
 * Copyright (C) 2004 Oege de Moor
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

//package abc.aspectj.visit;

import polyglot.ast.*;
import polyglot.visit.*;
import polyglot.types.ParsedClassType;
import polyglot.types.ReferenceType;
import polyglot.types.MethodInstance;
import polyglot.types.Type;
import polyglot.types.Flags;
import polyglot.types.TypeSystem;
import polyglot.types.LocalInstance;

import abc.aspectj.ast.*;

import abc.aspectj.types.InterTypeMethodInstance_c;


import java.util.*;

/**
 * This visitor cleans up the AST prior to Jimplification, turning it
 * into a Java tree. Advice declarations are rewritten to pure method
 * declarations. Intertype field delcarations, declare declarations and
 * pointcut declarations, as well as intertype constructors are completely 
 * stripped out of the tree.
 * For all intertype declarations, we remove the relevant types 
 * (which were earlier added to do type checking).
 * 
 * @author Aske Simon Christensen
 * @author Oege de Moor
 * 
 */

public class CleanAspectMembers extends NodeVisitor {
    protected NodeFactory nf;
    protected TypeSystem ts;

    public CleanAspectMembers(NodeFactory nf,TypeSystem ts) {
        this.nf = nf;
        this.ts = ts;
    }

    public Node leave(Node old, Node n, NodeVisitor v) {
        n = cleanAdvice(n);
        if (n instanceof ClassDecl) {
            ClassDecl cd = (ClassDecl)n;
            ParsedClassType pct = cd.type();
            List members = cd.body().members();
            List newmembers = new ArrayList();
            Iterator mi = members.iterator();
            while (mi.hasNext()) {
                ClassMember m = (ClassMember)mi.next();
                if (cleanClassMember(m, pct, newmembers)) {
                    // SPL: This is handled in cleanClassMember(m).
                } else {
                    newmembers.add(m);
                }
            }

            return nf.ClassDecl(cd.position(), cd.flags(), cd.name(), cd.superClass(), cd.interfaces(),
                    nf.ClassBody(cd.body().position(), newmembers))
                .type(pct);
        }
        return n;
    }

    // HOOK method
    protected Node cleanAdvice(Node n) {
        return n;
    }

    // SPL: This allows us to separate the 'instanceof' cases and refine them in
    // future features.
    protected boolean cleanClassMember(ClassMember m, ParsedClassType pct, List newmembers) {
        if (m instanceof DeclareDecl) {
            // SPL: abc does nothing for this case.
            return true;
        }
        if (m instanceof IntertypeFieldDecl) {
            IntertypeFieldDecl itfd = (IntertypeFieldDecl) m;
            //ParsedClassType hostType = (ParsedClassType)itfd.host().type();
            //hostType.fields().remove(hostType.fieldNamed(itfd.name()));
            pct.fields().remove(itfd.fieldInstance());
            return true;
        }
        if (m instanceof IntertypeConstructorDecl) {
            IntertypeConstructorDecl itmd = (IntertypeConstructorDecl) m;
            //ParsedClassType hostType = (ParsedClassType) itmd.host().type();
            //hostType.constructors().remove(itmd.constructorInstance());
            pct.constructors().remove(itmd.constructorInstance());
            return true;
        }
        if (m instanceof IntertypeMethodDecl) {
            IntertypeMethodDecl_c itmd = (IntertypeMethodDecl_c) m;
            //ParsedClassType hostType = (ParsedClassType) itmd.host().type();
            //if (!(itmd.host().type().toClass().flags().isInterface()))
            //    hostType.methods().remove(itmd.itMethodInstance);
            if (!itmd.flags().isAbstract()) // || (itmd.host().type().toClass().flags().isInterface()))
                newmembers.add(itmd);
            return true;
        }
        return false;
    }

}
