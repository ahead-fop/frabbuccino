/* abc - The AspectBench Compiler
 * Copyright (C) 2004 Aske Simon Christensen
 * Copyright (C) 2004 Oege de Moor
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

//package abc.aspectj.visit;

import abc.aspectj.ast.*;
import abc.weaving.aspectinfo.*;

import polyglot.ast.*;
import polyglot.visit.*;
import polyglot.util.*;
import polyglot.types.*;
import polyglot.frontend.*;

import java.util.*;

/** Picks up all AST nodes that implement {@link ContainsAspectInfo} and
 *  tells them to put their information into the {@link abc.weaving.aspectinfo.GlobalAspectInfo}.
 *  @author Aske Simon Christensen
 *  @author Oege de Moor
 */
public class AspectInfoHarvester extends ContextVisitor {

    protected GlobalAspectInfo gai;
    protected ParsedClassType current_aspect_scope;
    protected Aspect current_aspect;

    public AspectInfoHarvester(Job job, TypeSystem ts, NodeFactory nf) {
	Super(Job, TypeSystem, NodeFactory)(job, ts, nf);
	gai = abc.main.Main.v().getAbcExtension().getGlobalAspectInfo();
    }

    public NodeVisitor enter(Node parentNode, Node n) {
	ParsedClassType scope = context().currentClassScope();
	if (scope != null && !scope.equals(current_aspect_scope)) {
	    current_aspect_scope = scope;
	    current_aspect = gai.getAspect(AbcFactory.AbcClass(scope));
	}

	if (n instanceof ContainsAspectInfo) {
	    ((ContainsAspectInfo)n).update(gai, current_aspect);
	}
	//System.out.println(n.getClass());
	return super.enter(parentNode, n);
    }

    public Node leave(Node parentNode, Node old, Node n, NodeVisitor v) {

	return super.leave(parentNode, old, n, v);
    }

}
