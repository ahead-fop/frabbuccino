/* abc - The AspectBench Compiler
 * Copyright (C) 2004 Oege de Moor
 * Copyright (C) 2004 Aske Simon Christensen
 * Copyright (C) 2004 Julian Tibble
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

//package abc.aspectj;

import java.util.Collection;
import java.util.Map;
import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;

import java.io.Reader;

import polyglot.ast.NodeFactory;
import polyglot.lex.Lexer;
import polyglot.types.TypeSystem;
import polyglot.util.ErrorQueue;
import polyglot.util.InternalCompilerError;
import polyglot.visit.AddMemberVisitor;
import polyglot.visit.AmbiguityRemover;
import polyglot.visit.ConstructorCallChecker;
import polyglot.visit.ExitChecker;
import polyglot.visit.FwdReferenceChecker;
import polyglot.visit.InitChecker;
import polyglot.visit.ReachChecker;
import polyglot.visit.TypeBuilder;
import polyglot.visit.TypeChecker;
import polyglot.frontend.BarrierPass;
import polyglot.frontend.CupParser;
import polyglot.frontend.EmptyPass;
import polyglot.frontend.FileSource;
import polyglot.frontend.GlobalBarrierPass;
import polyglot.frontend.Job;
import polyglot.frontend.Parser;
import polyglot.frontend.ParserPass;
import polyglot.frontend.Pass;
import polyglot.frontend.Source;
import polyglot.frontend.VisitorPass;

import soot.javaToJimple.CastInsertionVisitor;
import soot.javaToJimple.AnonConstructorFinder;
import soot.javaToJimple.StrictFPPropagator;
import soot.javaToJimple.SaveASTVisitor;

import abc.aspectj.ast.AJNodeFactory_c;
import abc.aspectj.parse.Grm;
import abc.aspectj.parse.Lexer_c;
import abc.aspectj.visit.CheckPackageNames;
import abc.aspectj.visit.CollectJimplifyVisitor;
import abc.aspectj.visit.HierarchyBuilder;
import abc.aspectj.visit.InitClasses;
import abc.aspectj.visit.Jimplify;
import abc.main.AbcTimer;
import abc.weaving.aspectinfo.GlobalAspectInfo;


/**
 * Extension information for aspectj extension.
 * 
 * @author Oege de Moor
 * @author Aske Simon Christensen
 * @author Julian Tibble
 */
public class ExtensionInfo extends soot.javaToJimple.jj.ExtensionInfo {

    public static final Pass.ID CHECK_PACKAGE_NAMES = new Pass.ID("check-package-names");

    public static final Pass.ID INIT_CLASSES = new Pass.ID("init-classes");

    public static final Pass.ID INSPECT_AST = new Pass.ID("inspect-ast");
	
    public static final Pass.ID BUILD_HIERARCHY = new Pass.ID("build-hierarchy");
    public static final Pass.ID HIERARCHY_BUILT = new Pass.ID("hierarchy-built");

    public static final Pass.ID CAST_INSERTION = new Pass.ID("cast-insertion");
    public static final Pass.ID ANON_CONSTR_FINDER = new Pass.ID("anon-constr-finder");
    public static final Pass.ID STRICTFP_PROP = new Pass.ID("strictfp-prop");
    public static final Pass.ID SAVE_AST = new Pass.ID("save-ast");

    public static final Pass.ID COLLECT_JIMPLIFY_CLASSES = new Pass.ID("collect-jimplify");
    public static final Pass.ID GOING_TO_JIMPLIFY = new Pass.ID("going-to-jimplify");
    public static final Pass.ID JIMPLIFY = new Pass.ID("jimplify");
    public static final Pass.ID JIMPLIFY_DONE = new Pass.ID("jimplify-done");
    public static final Pass.ID EVALUATE_PATTERNS_FINALLY = new Pass.ID("evaluate-patterns-finally");


    /** The JVM names for all classes loaded from jar files */
    public Collection/*<String>*/ jar_classes;

    public Collection/*<String>*/ source_files;
    public Map/*<String,Node>*/ class_to_ast;

    public ExtensionInfo(Collection jar_classes, Collection source_files)  {
	this.jar_classes = jar_classes;
	this.source_files = source_files;
	class_to_ast = new HashMap();
    }

    static {
        // force Topics to load
        Topics t = new Topics();
    }

    protected NodeFactory createNodeFactory() {
        return new AJNodeFactory_c();
    }

    public String defaultFileExtension() {
        return "java";
    }

    public String[] defaultFileExtensions() {
       String [] extnames = { "aj","java" };
       return extnames;
    }

    public String compilerName() {
        return "abc";
    }

    public Parser parser(Reader reader, FileSource source, ErrorQueue eq) {
        Lexer lexer = new Lexer_c(reader, source.name(), eq);
        Grm grm = new Grm(lexer, ts, nf, eq);
        return new CupParser(grm, source, eq);
    }

    public void addDependencyToCurrentJob(Source s) {
	// Ignore nonexisting jobs
	try {
	    super.addDependencyToCurrentJob(s);
	} catch (InternalCompilerError e) {}
    }

    public List passes(Job job) {
        ArrayList l = new ArrayList(25);
        l.add(new InitClasses(INIT_CLASSES, this, ts));

        passes_parse_and_clean(l, job);
        passes_pre_hierarchy(l, job);
        passes_hierarchy(l, job);
        passes_post_hierarchy(l, job);
        passes_precedence_relation(l, job);
        passes_disambiguate_signatures(l, job);
        passes_add_members(l, job);
        passes_interface_ITDs(l, job);
        passes_disambiguate_all(l, job); 
        passes_fold_and_checkcode(l, job); 
        passes_check_jars_depends(l, job); 
        passes_saveAST(l, job);
        passes_mangle_names(l, job);
        passes_aspectj_transforms(l, job);
        passes_jimple(l, job);

        // re-evaluate patterns for Soot classes; previously only for weavable classes
        // but soot classes are not loaded here: FIXME: move call to main
        //l.add(new NamePatternReevaluator(EVALUATE_PATTERNS_FINALLY));

        // no class serialization, because abc does not support incremental/separate compilation
        // of aspects and aspect-aware classes.
        
        // l.add(new OutputPass(Pass.OUTPUT, job, new Translator(job, ts, nf, targetFactory())));

        // grab this list for the timing module
        AbcTimer.storePolyglotPasses(l); 
        return l;
    }

    protected TypeBuilder getTypeBuilder(Job job, TypeSystem ts, NodeFactory nf)
    {
        return new TypeBuilder(job, ts, nf);
    }

    protected void passes_parse_and_clean(List l, Job job)
    {
        l.add(new ParserPass(Pass.PARSE,compiler,job));

        l.add(new VisitorPass(Pass.BUILD_TYPES, job, getTypeBuilder(job, ts, nf)));

        l.add(new GlobalBarrierPass(Pass.BUILD_TYPES_ALL, job));
        l.add(new VisitorPass(Pass.CLEAN_SUPER, job,
                             new AmbiguityRemover(job, ts, nf, AmbiguityRemover.SUPER)));
        l.add(new BarrierPass(Pass.CLEAN_SUPER_ALL, job));
       
    }

    // HOOK method
    protected void passes_pre_hierarchy(List l, Job job)
    {
    }

    protected void passes_hierarchy(List l, Job job)
    {
        // Build the internal hierarchy/package structure for the pattern matcher
        // The list of weavable classes is available after this pass
        l.add(new VisitorPass(BUILD_HIERARCHY, job, new HierarchyBuilder(this)));
        l.add(new GlobalBarrierPass(HIERARCHY_BUILT, job));
		// Check that packages match directories
	    l.add(new CheckPackageNames(CHECK_PACKAGE_NAMES,job));
    }

    // HOOK method
    protected void passes_post_hierarchy(List l, Job job)
    {
    }

    // HOOK method
    protected void passes_precedence_relation(List l, Job job)
    {
    }

    protected void passes_fold_and_checkcode(List l, Job job)
    {
    	// constant folder. FIXME: this folds bytes to ints
        //l.add(new VisitorPass(Pass.FOLD, job, new ConstantFolder(ts, nf)));
        // typechecker
        l.add(new VisitorPass(Pass.TYPE_CHECK, job, new TypeChecker(job, ts, nf)));
        // reachability checker
        l.add(new VisitorPass(Pass.REACH_CHECK, job, new ReachChecker(job, ts, nf)));
        // Exceptions are now checked after weaving, because of softening
        // l.add(new VisitorPass(Pass.EXC_CHECK, job, new ExceptionChecker(job,ts,nf)));
        // insert casts for e.g. byte to int (j2j)
        l.add(new VisitorPass(CAST_INSERTION, job, new CastInsertionVisitor(job, ts, nf)));
        l.add(new VisitorPass(ANON_CONSTR_FINDER, job, new AnonConstructorFinder(job, ts, nf)));
        // strictfp modifier is propagated to all textually enclosed members
        l.add(new VisitorPass(STRICTFP_PROP, job, new StrictFPPropagator(false)));
        // definite return checks
        l.add(new VisitorPass(Pass.EXIT_CHECK, job, new ExitChecker(job, ts, nf)));
        // definite initialization
        l.add(new VisitorPass(Pass.INIT_CHECK, job, new InitChecker(job, ts, nf)));
        // ccalls are not recursive
        l.add(new VisitorPass(Pass.CONSTRUCTOR_CHECK, job, new ConstructorCallChecker(job, ts, nf)));
        // order of field inits
        l.add(new VisitorPass(Pass.FWD_REF_CHECK, job, new FwdReferenceChecker(job, ts, nf)));
    }

    // HOOK method
    protected void passes_check_jars_depends(List l, Job job) {
    }

    protected void passes_saveAST(List l, Job job)
    {
	l.add(new EmptyPass(Pass.PRE_OUTPUT_ALL));
	// tell soot the connection between source and job, so it doesn't re-compile
	l.add(new SaveASTVisitor(SAVE_AST, job, this));
    }

    // HOOK method
    protected void passes_mangle_names(List l, Job job)
    {
    }

    // HOOK method
    protected void passes_aspectj_transforms(List l, Job job)
    {
    }

    protected void passes_jimple(List l, Job job)
    {
    	// set up map from top-level classes to asts for j2j
        l.add(new VisitorPass(COLLECT_JIMPLIFY_CLASSES, job,
                              new CollectJimplifyVisitor(job, ts, nf, source_files, class_to_ast)));
        l.add(new GlobalBarrierPass(GOING_TO_JIMPLIFY, job));
        l.add(new Jimplify(JIMPLIFY, class_to_ast));
        l.add(new GlobalBarrierPass(JIMPLIFY_DONE, job));
    }

    protected void passes_disambiguate_signatures(List l, Job job)
    {
    	// disambiguate inner/outer classes, signatures of methods
        l.add(new VisitorPass(Pass.CLEAN_SIGS, job,
                              new AmbiguityRemover(job, ts, nf, AmbiguityRemover.SIGNATURES)));
    }

    protected void passes_add_members(List l, Job job)
    {
    	// populate class types with members
        l.add(new VisitorPass(Pass.ADD_MEMBERS, job, new AddMemberVisitor(job, ts, nf)));
        l.add(new GlobalBarrierPass(Pass.ADD_MEMBERS_ALL, job));
    }

    // HOOK method
    protected void passes_interface_ITDs(List l, Job job)
    {
    }

    protected void passes_disambiguate_all(List l, Job job)
    {
    	// resolve all variable, class references
        l.add(new VisitorPass(Pass.DISAM, job,
                              new AmbiguityRemover(job, ts, nf, AmbiguityRemover.ALL)));
        l.add(new BarrierPass(Pass.DISAM_ALL, job));
        // l.add(new PrettyPrintPass(INSPECT_AST,job,new CodeWriter(System.out,70),new PrettyPrinter()));
    }
}
