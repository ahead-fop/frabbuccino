
<!-- <!DOCTYPE suite SYSTEM "../tests/abcTestSuite.dtd"> -->

<!--

***** ABC Boys and Girls .... Rules for editing this file. ******

1)  you may add an abccomment to an ajc-test entry,  here is an
    example I have added to the first entry of abcTests.xml.

    Note that this is INSIDE that <ajc-test num="1" ajc-test ....> tag.

<ajc-test num="2" dir="base/test100"
      abccomment="I have put this comment in as a test, and this is a very
         long one over multiple lines too. LJH"
      title="static and non-static before methods -  one file"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>

2)  if you want to change any of the <message ... /> items because they don't
    correspond to the errors/warnings that we expect from abc,  you
    should.

      (a) RENAME ALL existing <message ... /> items to
                              <ajcmessage ... />.

      (b) INSERT new <message .../> items corresponding to what you
               expect from abc.  (note that the testHarness seems to
               only handle one message per line number)

      (c) INSERT an abccomment into the <ajc-test num="3" ... /> tag to describe
             what you changed and why

3) if you want to change an entry from one that was supposed to run, to
     one that should exit with compile-time errors ...

      (a) REPLACE the <compile files="foo.java"/>  
          with an entry as follows.  Note that the <compile .../> entry
          is replaced with <compile>  .... </compile>, where the first
          entry is an ajcmessage with kind="ignore" and then your
          real messages.
 
                      <compile files="foo.java">
                         <ajcmessage kind="ignore"/>
                         <message kind="error" line="xx"/>
                         <message kind="warning" line="yy"/>
                       </compile>

       (b) CHANGE  the <run .... > to <ajcrun ....>

       (c) INSERT an abccomment to say what you changed and why
           
     Here is an example:

     original entry:

     <ajc-test num="4" dir="pureJava" title="Using 'aspect' as identifier is legal"
      keywords="from-java,purejava">
        <compile files="KeywordAspect.java"/>
        <crun class="KeywordAspect" />
     </ajc-test>


     new entry:

     <ajc-test num="5" dir="pureJava" title="Using 'aspect' as identifier is legal"
      abccomment="abc doesn't allow keywords 
                      need to allow for syntax error. LJH "
      keywords="from-java,purejava">
        <compile files="KeywordAspect.java">
          <ajcmessage kind="ignore" />
          <message kind="error" line="7"/> 
        </compile>
        <ajcrun class="KeywordAspect" />
    </ajc-test>

4) A new set/style of keywords is available for <ajctest/> tags. The
     attribute "keywords" is still valid, in addition each <ajctest>
     can contain a <abckeywords> element, which in turn contains 
     keywords *in the form of further elements*. This allows keywords
     to be taken from a pre-defined list and easily verified.

     An example to make it clear - 
     
         <ajc-test num="6" dir="base/test100"
	        abccomment="I have put this comment in as a test, and this is a very
	       long one over multiple lines too. LJH"
	         title="static and non-static before methods - one file"
		 keywords="from-base">
		<compile files="Driver.java"/>
		<run class="Driver"/>
		<abckeywords>
		     <laurie/>
		     <pavel/>
		</abckeywords>
         </ajc-test>
	 

     For now, the keywords available as elements in the DTD are:
     ganesh, aske, oege, laurie, sascha, pavel, julian, jennifer,
     abclimitations, introductions, polyglot, soot.

     To extend the DTD with additional keywords as the need arises,
     (a) EDIT the line starting with <!ELEMENT abckeywords ...> so that
         the enumeration of possible child elements includes the new
	 keyword
     (b) INSERT a line declaring the new element below. It should have
         the form <!ELEMENT new_keyword EMPTY>.

-->

<!--
  known keywords:
 
  knownLimitation     Accepted limitation of current implementation (fails)
  purejava            Sources compile under javac as well
  broken-test         ??
  messages-vary       one of many (usually two) test specs that differ only in 
                      messages expected by the different compilers.
                      Currently ajc 1.0 tests are in ajcTests10.xml,
                      so there may only be one copy marked "messages-vary" here.
  new-messages-vary   like messages-vary, except need to make ajcTest10 variant

  fail-{...}          test fails in some configuration
  fail-unimplmented   eajc throwing "unimplemented" exception
  fail-commandLine    fails in ajc on command line (move to ajcTestsBroken.xml)
  fail-in-eclipse     fail when harness in run from inside eclipse
  fail-publicType     now fixed - no longer presenting error for public type in wrong file

  from-{file}         from original {file}.txt for file in
                      java, bigjava, resolved_1*, 14tests, errors, design, base... 

  incremental-test    uses inc-compile step
  command-error       command-line error test

  knownLimitation-ajctaskCompiler
                      Accepted limitation of the AjcTaskCompilerCommand wrapper
  knownLimitation-ajdeCompiler
                      Accepted limitation of the AJDE CompileCommand wrapper
                      
  poorErrorMessages   test case passes but errors produced by compiler could do with
                      improvement                      
                      
  Test titles:
  
  Titles should be unique and not change, and related tests should have the 
  same title prefix.  This permits us to automatically compare the test results 
  from different versions (and suites), and to see related differences together.
  
  -->

<suite>

    <!-- Tracematch tests -->
    <ajc-test num="1019" dir="abctests/tracematches"
        title="Tracematches: Basic tracematch">
        <compile files="Basic.java" options="-ext,abc.tm"/>
        <run class="Basic"/>
    </ajc-test>

    <ajc-test num="1020" dir="abctests/tracematches"
        title="Tracematches: Plus and Star">
        <compile files="PlusStar.java" options="-ext,abc.tm"/>
        <run class="PlusStar"/>
    </ajc-test>

    <ajc-test num="1021" dir="abctests/tracematches"
        title="Tracematches: Alternation">
        <compile files="Alternation.java" options="-ext,abc.tm"/>
	<run class="Alternation"/>
    </ajc-test>

    <ajc-test num="1022" dir="abctests/tracematches"
        title="Tracematches: Basic variable bindings">
        <compile files="Variables.java" options="-ext,abc.tm"/>
	<run class="Variables"/>
    </ajc-test>

    <ajc-test num="1023" dir="abctests/tracematches/failsafe"
        title="Failsafe enumerations: tracematch version 1">
        <compile files="leaktest/LeakTest.java,tracematches/FailSafeEnum.java" options="-ext,abc.tm"/>
	<run class="leaktest.LeakTest"/>
    </ajc-test>

    <ajc-test num="1024" dir="abctests/tracematches/failsafe3"
        title="Failsafe enumerations: tracematch version 2">
        <compile files="leaktest/LeakTest.java,tracematches/FailSafeEnum.java" options="-ext,abc.tm"/>
	<run class="leaktest.LeakTest"/>
    </ajc-test>

    <ajc-test num="1025" dir="abctests/tracematches/failsafe4"
        title="Failsafe enumerations: tracematch version 3">
        <compile files="leaktest/LeakTest.java,tracematches/FailSafeEnum.java" options="-ext,abc.tm"/>
	<run class="leaktest.LeakTest"/>
    </ajc-test>

    <ajc-test num="1026" dir="abctests/tracematches"
        title="Tracematches: NoSuchMethodError (shouldn't occur..)">
        <compile files="Test.java" options="-ext,abc.tm"/>
	<run class="Test"/>
    </ajc-test>

    <ajc-test num="1027" dir="abctests/tracematches"
        title="Tracematches: Negative bindings should be checked correctly...">
        <compile files="NegBindings.java" options="-ext,abc.tm"/>
	<run class="NegBindings"/>
    </ajc-test>

    <ajc-test num="1028" dir="abctests/tracematches"
        title="Tracematches: states where x may be bound or unbound">
        <compile files="MoreBindings.java" options="-ext,abc.tm"/>
        <run class="MoreBindings"/>
    </ajc-test>

    <ajc-test num="1029" dir="abctests/tracematches"
        title="Tracematches: Basic around tracematch">
        <compile files="BasicAround.java" options="-ext,abc.tm"/>
        <run class="BasicAround"/>
    </ajc-test>

    <ajc-test num="1030" dir="abctests/tracematches"
        title="Tracematches: Around match with multiple bindings.">
        <compile files="MultipleBindingsForAround.java" options="-ext,abc.tm">
            <message kind="warning" line="24" />
        </compile>
        <run class="MultipleBindingsForAround"/>
    </ajc-test>

    <ajc-test num="1031" dir="abctests/tracematches"
        title="Tracematches: Testing the `perthread' modifier">
        <compile files="PerThread.java" options="-ext,abc.tm"/>
        <run class="PerThread"/>
    </ajc-test>

    <ajc-test num="1032" dir="abctests/tracematches"
        title="Tracematches: Testing self-applying around TM-advice">
        <compile files="AdviseSelf.java" options="-ext,abc.tm"/>
        <run class="AdviseSelf"/>
    </ajc-test>

    <ajc-test num="1033" dir="abctests/tracematches"
        title="Tracematches: Testing if pointcuts in symbols">
        <compile files="IfTest.java" options="-ext,abc.tm"/>
        <run class="IfTest"/>
    </ajc-test>

    <ajc-test num="1034" dir="abctests/tracematches"
        title="Tracematches: When there is some() advice but not per-symbol">
        <compile files="NoUpdates.java" options="-ext,abc.tm"/>
        <run class="NoUpdates"/>
	</ajc-test>

    <ajc-test num="1035" dir="abctests/tracematches"
        title="Tracematches: Basic primitive variable bindings">
        <compile files="PrimitiveVariables.java" options="-ext,abc.tm">
	    <message kind="warning"/>
	</compile>
	<run class="PrimitiveVariables"/>
    </ajc-test>

    <ajc-test num="1036" dir="abctests/tracematches"
        title="Tracematches: Primitive bindings don't cause errors.">
	<compile files="IntVariable.java" options="-ext,abc.tm" />
	<run class="IntVariable"/>
    </ajc-test>

    <ajc-test num="1037" dir="abctests/tracematches"
        title="Tracematches: Primitive negative bindings should be checked correctly...">
        <compile files="PrimNegBindings.java" options="-ext,abc.tm">
	    <message kind="warning"/>
	</compile>
	<run class="PrimNegBindings"/>
    </ajc-test>

    <ajc-test num="1038" dir="abctests/tracematches"
        title="Tracematches: Non-collectable weak bindings work correctly (Strings)">
        <compile files="NCWeakRefs.java" options="-ext,abc.tm">
	    <message kind="warning"/>
	</compile>
	<run class="NCWeakRefs"/>
    </ajc-test>

    <ajc-test num="1039" dir="abctests/tracematches"
        title="Tracematches: Non-collectable weak bindings work correctly (Objects)">
        <compile files="NCWeakRefs2.java" options="-ext,abc.tm">
	    <message kind="warning"/>
	</compile>
	<run class="NCWeakRefs2"/>
    </ajc-test>

    <ajc-test num="1040" dir="abctests/tracematches"
        title="Tracematches: Collectable weak bindings work correctly (Strings)">
        <compile files="CollWeakRefs.java" options="-ext,abc.tm">
	</compile>
	<run class="CollWeakRefs"/>
    </ajc-test>

    <ajc-test num="1209" dir="abctests/tracematches"
       title="Using private pointcut variables in an if(..) in a TM symbol">
        <compile files="TracematchAndIfAndPPVs.java"
            options="-ext,abc.tm" />
    </ajc-test>

</suite>
