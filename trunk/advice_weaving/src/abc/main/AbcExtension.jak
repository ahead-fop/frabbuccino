
import soot.jimple.InvokeExpr;
import soot.jimple.Stmt;
import soot.jimple.toolkits.annotation.nullcheck.BranchedRefVarsAnalysis;
import soot.jimple.toolkits.annotation.nullcheck.NullCheckEliminator;
import soot.jimple.toolkits.scalar.UnreachableCodeEliminator;
import soot.util.Chain;

import abc.soot.util.CastRemover;
import abc.soot.util.FarJumpEliminator;
import abc.soot.util.SwitchFolder;

import abc.weaving.aspectinfo.AbstractAdviceDecl;
import abc.weaving.aspectinfo.AdviceDecl;
import abc.weaving.aspectinfo.CflowSetup;
import abc.weaving.aspectinfo.DeclareMessage;
import abc.weaving.aspectinfo.DeclareSoft;
import abc.weaving.aspectinfo.MethodCategory;
import abc.weaving.aspectinfo.PerCflowSetup;
import abc.weaving.aspectinfo.PerTargetSetup;
import abc.weaving.aspectinfo.PerThisSetup;
import abc.weaving.aspectinfo.Pointcut;
import abc.weaving.aspectinfo.Singleton;

import abc.weaving.matching.AbcSJPInfo;
import abc.weaving.matching.AdviceApplication;
import abc.weaving.matching.ClassInitializationShadowMatch;
import abc.weaving.matching.ConstructorCallShadowType;
import abc.weaving.matching.ExecutionShadowType;
import abc.weaving.matching.GetFieldShadowType;
import abc.weaving.matching.HandlerShadowType;
import abc.weaving.matching.InterfaceInitializationShadowMatch;
import abc.weaving.matching.MethodAdviceList;
import abc.weaving.matching.MethodCallShadowType;
import abc.weaving.matching.NewStmtMethodPosition;
import abc.weaving.matching.PreinitializationShadowType;
import abc.weaving.matching.SJPInfo;
import abc.weaving.matching.SetFieldShadowType;
import abc.weaving.matching.ShadowMatch;
import abc.weaving.matching.StmtMethodPosition;
import abc.weaving.matching.TrapMethodPosition;
import abc.weaving.matching.WholeMethodPosition;
import abc.weaving.matching.WeavingEnv;

import abc.weaving.weaver.CflowCodeGenUtils;
import abc.weaving.weaver.ReweavingAnalysis;
import abc.weaving.weaver.ReweavingPass;
import abc.weaving.weaver.Weaver;
import abc.weaving.weaver.adviceinliner.AdviceInliner;


public refines class AbcExtension
{

    private Weaver weaver = null;

    private static final ReweavingPass.ID PASS_CFLOW_ANALYSIS = new ReweavingPass.ID("CFlow analysis");
    private static final ReweavingPass.ID PASS_DEBUG_UNWEAVER = new ReweavingPass.ID("Debug Unweaver");

    private List reweavingPasses;

    /**
     * Returns the reweaving passes for this extension.
     * @return the reweaving passes
     */
    public final List getReweavingPasses() {
        if(reweavingPasses == null) {
            reweavingPasses = new ArrayList();
            createReweavingPasses(reweavingPasses);
        }
        return reweavingPasses;
    }

    /**
     * Adds a new reweaving passes to the pass list.
     * @param passes the current list of reweaving passes; add your analysis passes
     * here as needed; do not forget to call <code>super</code>
     */
    protected void createReweavingPasses(List passes) {
        if( OptionsParser.v().O() >= 3 ) {
            try {
                ReweavingAnalysis ana = (ReweavingAnalysis) Class.forName("abc.weaving.weaver.CflowAnalysisImpl").newInstance();                
                passes.add( new ReweavingPass( PASS_CFLOW_ANALYSIS, ana ) );
            } catch( Exception e ) {
                throw new InternalCompilerError("Couldn't load interprocedural analysis plugin 'CflowAnalysisImpl'.",e);
            }
        }

        if(Debug.v().debugUnweaver) {
            //to debug the unweaver, add an empty reweaving analysis
            passes.add( new ReweavingPass(PASS_DEBUG_UNWEAVER,new ReweavingAnalysis() {

                public boolean analyze() {
                    return true;
                }

                public void defaultSootArgs(List sootArgs) {
                }

                public void enforceSootArgs(List sootArgs) {
                }

                public void setupWeaving() {
                }

                public void tearDownWeaving() {
                }


            }));
        }
    }

    /** This method adds optimisation passes specificially
     *  required for abc.
     */
    public void addJimplePacks() {
        PackManager.v().getPack("jtp").add(new Transform("jtp.uce", UnreachableCodeEliminator.v()));		

        //PackManager.v().getPack("jtp").add(new Transform("jtp.sf", SwitchFolder.v()));


        if (Debug.v().nullCheckElim) {
            // Add a null check eliminator that knows about abc specific stuff
            NullCheckEliminator.AnalysisFactory f = new NullCheckEliminator.AnalysisFactory() {
                public BranchedRefVarsAnalysis newAnalysis(soot.toolkits.graph.UnitGraph g) {
                    return new BranchedRefVarsAnalysis(g) {
                        public boolean isAlwaysNonNull(Value v) {
                            if (super.isAlwaysNonNull(v))
                                return true;
                            if (v instanceof InvokeExpr) {
                                InvokeExpr ie = (InvokeExpr) v;
                                SootMethodRef m = ie.getMethodRef();
                                if (m.name().equals("makeJP") && m.declaringClass().getName().equals("org.aspectbench.runtime.reflect.Factory"))
                                    return true;
                                if (CflowCodeGenUtils.isFactoryMethod(m))
                                    return true;
                                if (m.name().equals("aspectOf") && 
                                        m.isStatic() && 
                                        m.parameterTypes().size()==0 &&
                                        abc.main.Main.v().getAbcExtension().getGlobalAspectInfo().getAspectFromSootClass(m.declaringClass())!=null && // it's an aspect
                                        abc.main.Main.v().getAbcExtension().getGlobalAspectInfo().getAspectFromSootClass(m.declaringClass()).getPer() instanceof Singleton &&
                                        m.returnType().equals(m.declaringClass().getType()) // correct return type
                                   ) {
                                    return true;
                                   }
                            }
                            return false;
                        }
                    };
                }
            };
            // want this to run before Dead assignment eliminiation
            PackManager.v().getPack("jop").insertBefore(new Transform("jop.nullcheckelim", new NullCheckEliminator(f)), "jop.dae");
        }

        if (Debug.v().switchFolder) {
            // must be inserted somewhere before the unreachable code eliminator
            PackManager.v().getPack("jop").insertBefore(new Transform("jop.sf", SwitchFolder.v()), "jop.uce1");
        }

        if (OptionsParser.v().around_inlining() || OptionsParser.v().before_after_inlining()) {
            PackManager.v().getPack("jop").insertAfter(new Transform("jop.cr", CastRemover.v()), "jop.dae");

            // make this the very last pass after all optimizations
            PackManager.v().getPack("jop").insertAfter(new Transform("jop.fje", FarJumpEliminator.v()), "jop.ule");
        }

    }

    /**
     *  Make a new AdviceInliner, which is responsible for inlining
     *  advice bodies, as well as pointcuts which are implemented by 
     *  methods, such as if.
     *  The instance is cached in abc.weaving.weaver.adviceinliner.AdviceInliner,
     *  so we don't do so here like we do with the Weaver.
     */
    public AdviceInliner makeAdviceInliner()
    {
        return new AdviceInliner();
    }

    /**
     * Get all the shadow joinpoints that are matched
     * in this extension of AspectJ
     */
    final public Iterator /*<ShadowType>*/ shadowTypes()
    {
        return listShadowTypes().iterator();
    }

    /**
     * Specify the class that will be used at runtime to generate
     * StaticJoinPoint objects.
     */
    public String runtimeSJPFactoryClass() {
        return "org.aspectbench.runtime.reflect.Factory";
    }

    /**
     * Returns the Weaver object, which co-ordinates everything that
     * happens in the backend.
     */
    final public Weaver getWeaver()
    {
        if (weaver == null)
            weaver = createWeaver();

        return weaver;
    }

    /**
     * Override this to create a custom weaver.
     */
    protected Weaver createWeaver() {
        return new Weaver();
    }

    /**
	 * Create a (compile-time) static join point information object that
         * generates code to initialize static join point fields with
         * reflective information about a join point.
	 */
    public SJPInfo createSJPInfo(String kind, String signatureTypeClass,
            String signatureType, String signature, Host host) {
        return new AbcSJPInfo(kind, signatureTypeClass, signatureType,
                signature, host);
    }

    /**
     * Override this method to add new joinpoints to the abc.
     * Call the same method in the super-class to ensure
     * the standard joinpoints needed are loaded too.
     */
    protected List /*<ShadowType>*/ listShadowTypes()
    {
        List /*<ShadowType*/ shadowTypes = new LinkedList();

        shadowTypes.add(new ConstructorCallShadowType());
        shadowTypes.add(new ExecutionShadowType());
        shadowTypes.add(new GetFieldShadowType());
        shadowTypes.add(new HandlerShadowType());

        // the next two lines show the preferred method of doing this
        // i.e. without creating the extra *ShadowType class
        // FIXME: make all of the join point matching classes like this
        shadowTypes.add(ClassInitializationShadowMatch.shadowType());
        shadowTypes.add(InterfaceInitializationShadowMatch.shadowType());

        shadowTypes.add(new MethodCallShadowType());
        shadowTypes.add(new PreinitializationShadowType());
        shadowTypes.add(new SetFieldShadowType());

        return shadowTypes;
    }

    /** This method is responsible for taking a method and calling
     *  AdviceApplication.doShadows for each "position" in the method that might have a join
     *  point associated with it. The base list of positions consists of WholeMethodPosition,
     *  StmtMethodPosition, NewStmtMethodPosition and TrapMethodPosition; if a new
     *  join point requires something else then it will be necessary to override this method
     *  and add a new kind of method position.
     */
    public void findMethodShadows(GlobalAspectInfo info,
                                  MethodAdviceList mal,
                                  SootClass cls,
                                  SootMethod method)
        throws polyglot.types.SemanticException {

        // Do whole body shadows
        if(MethodCategory.weaveExecution(method))
            AdviceApplication.doShadows(info,mal,cls,method,new WholeMethodPosition(method));

        // Do statement shadows
        if(abc.main.Debug.v().traceMatcher)
            System.err.println("Doing statement shadows");

        if(MethodCategory.weaveInside(method)) {
            Chain stmtsChain=method.getActiveBody().getUnits();
            Stmt current,next;

            if(!stmtsChain.isEmpty()) { // I guess this is actually never going to be false
                for(current=(Stmt) stmtsChain.getFirst();
                    current!=null;
                    current=next) {
                    if(abc.main.Debug.v().traceMatcher)
                        System.err.println("Stmt = "+current);
                    next=(Stmt) stmtsChain.getSuccOf(current);
                    AdviceApplication.doShadows(info,mal,cls,method,
                                                new StmtMethodPosition(method,current));
                    AdviceApplication.doShadows(info,mal,cls,method,
                                                new NewStmtMethodPosition(method,current,next));
                }
            }
        }

        // Do exception handler shadows

        if(abc.main.Debug.v().traceMatcher)
            System.err.println("Doing exception shadows");

        Chain trapsChain=method.getActiveBody().getTraps();
        Trap currentTrap;

        if(!trapsChain.isEmpty()) {
            for(currentTrap=(Trap) trapsChain.getFirst();
                currentTrap!=null;
                currentTrap=(Trap) trapsChain.getSuccOf(currentTrap))

                AdviceApplication.doShadows(info,mal,cls,method,new TrapMethodPosition(method,currentTrap));
        }


    }

    /** Get the precedence relationship between two aspects.
     *  @param a the first advice decl.
     *  @param b the second advice decl.
     *  @return
     *    {@link GlobalAspectInfo.PRECEDENCE_NONE} if none of the advice decls have precedence,
     *    {@link GlobalAspectInfo.PRECEDENCE_FIRST} if the first advice decl has precedence,
     *    {@link GlobalAspectInfo.PRECEDENCE_SECOND} if the second advice decl has precedence, or
     *    {@link GlobalAspectInfo.PRECEDENCE_CONFLICT} if there is a precedence
     *     conflict between the two advice decls.
     */
    public int getPrecedence(AbstractAdviceDecl a,AbstractAdviceDecl b) {
        // a quick first pass to assist in separating out the major classes of advice
        // consider delegating this
        int aprec=getPrecNum(a),bprec=getPrecNum(b);
        if(aprec>bprec) return GlobalAspectInfo.PRECEDENCE_FIRST;
        if(aprec<bprec) return GlobalAspectInfo.PRECEDENCE_SECOND;

        // CflowSetup needs to be compared by depth first
        if(a instanceof CflowSetup && b instanceof CflowSetup)
            return CflowSetup.getPrecedence((CflowSetup) a,(CflowSetup) b);

        if(!a.getDefiningAspect().getName().equals(b.getDefiningAspect().getName()))
            return abc.main.Main.v().getAbcExtension().getGlobalAspectInfo().getPrecedence(a.getDefiningAspect(),b.getDefiningAspect());

        //if both advice are inherited from the same aspect but are 
        //being applied by different concrete aspects
        if(!a.getAspect().getName().equals(b.getAspect().getName()))
            return abc.main.Main.v().getAbcExtension().getGlobalAspectInfo().getPrecedence(a.getAspect(),b.getAspect());

        if(a instanceof AdviceDecl && b instanceof AdviceDecl)
            return AdviceDecl.getPrecedence((AdviceDecl) a,(AdviceDecl) b);

        if(a instanceof DeclareSoft && b instanceof DeclareSoft)
            return DeclareSoft.getPrecedence((DeclareSoft) a,(DeclareSoft) b);

        // We don't care about precedence since these won't ever get woven
        if(a instanceof DeclareMessage && b instanceof DeclareMessage)
            return GlobalAspectInfo.PRECEDENCE_NONE;

        throw new InternalCompilerError
            ("case not handled when comparing "+a+" and "+b);
    }

    protected int getPrecNum(AbstractAdviceDecl d) {
        if(d instanceof PerCflowSetup) return ((PerCflowSetup) d).isBelow()? 0 : 4;
        else if(d instanceof CflowSetup) return ((CflowSetup) d).isBelow() ? 1 : 3;
        else if(d instanceof PerThisSetup) return 4;
        else if(d instanceof PerTargetSetup) return 4;
        else if(d instanceof AdviceDecl) return 2;
        else if(d instanceof DeclareSoft) return 5; //FIXME: no idea where this should go
        else if(d instanceof DeclareMessage) return 6;
        else throw new InternalCompilerError("Advice type not handled: "+d.getClass(),
                                             d.getPosition());
    }


    /** return the list of residue conjuncts. This should return a list all of whose elements
     *   are of type abc.weaving.matching.AdviceApplication.ResidueConjunct.
     */
    public List residueConjuncts(
            final AbstractAdviceDecl ad,
            final Pointcut pc,
            final ShadowMatch sm,
            final SootMethod method,
            final SootClass cls,
            final WeavingEnv we) {
        return AdviceApplication.residueConjuncts(ad,pc,sm,method,cls,we);
    }

    /**
     * Call Scene.v().addBasicClass for each runtime class that the backend
     * might generate code for. Derived implementations should normally make
     * sure to call the superclass implementation.
     */
    public void addBasicClassesToSoot()
    {
        CflowCodeGenUtils.addBasicClassesToSoot();
        Scene.v().addBasicClass("org.aspectbench.runtime.reflect.Factory",
                SootClass.SIGNATURES);
        Scene.v().addBasicClass("org.aspectj.lang.JoinPoint",
                SootClass.HIERARCHY);
        Scene.v().addBasicClass("org.aspectj.lang.JoinPoint$StaticPart",
                SootClass.HIERARCHY);
        Scene.v().addBasicClass("org.aspectj.lang.SoftException",
                SootClass.SIGNATURES);
        Scene.v().addBasicClass("org.aspectj.lang.NoAspectBoundException",
                SootClass.SIGNATURES);
        Scene.v().addBasicClass("java.lang.System",
                SootClass.SIGNATURES);
    }

    public void initLexerKeywords(AbcLexer lexer) {
        Super().initLexerKeywords(lexer);

        lexer.addPointcutKeyword("adviceexecution", new LexerAction_c(new Integer(sym.PC_ADVICEEXECUTION)));
        lexer.addPointcutKeyword("args", new LexerAction_c(new Integer(sym.PC_ARGS)));
        lexer.addPointcutKeyword("call", new LexerAction_c(new Integer(sym.PC_CALL)));
        lexer.addPointcutKeyword("cflow", new LexerAction_c(new Integer(sym.PC_CFLOW)));
        lexer.addPointcutKeyword("cflowbelow", new LexerAction_c(new Integer(sym.PC_CFLOWBELOW)));
        lexer.addPointcutKeyword("error", new LexerAction_c(new Integer(sym.PC_ERROR)));
        lexer.addPointcutKeyword("execution", new LexerAction_c(new Integer(sym.PC_EXECUTION)));
        lexer.addPointcutKeyword("get", new LexerAction_c(new Integer(sym.PC_GET)));
        lexer.addPointcutKeyword("handler", new LexerAction_c(new Integer(sym.PC_HANDLER)));
        lexer.addPointcutKeyword("if", new LexerAction_c(new Integer(sym.PC_IF), new Integer(lexer.pointcutifexpr_state())));
        lexer.addPointcutKeyword("initialization", new LexerAction_c(new Integer(sym.PC_INITIALIZATION)));

        lexer.addPointcutKeyword("precedence", new LexerAction_c(new Integer(sym.PC_PRECEDENCE)));
        lexer.addPointcutKeyword("preinitialization", new LexerAction_c(new Integer(sym.PC_PREINITIALIZATION)));
        lexer.addPointcutKeyword("returning", new LexerAction_c(new Integer(sym.PC_RETURNING)));
        lexer.addPointcutKeyword("set", new LexerAction_c(new Integer(sym.PC_SET)));
        lexer.addPointcutKeyword("soft", new LexerAction_c(new Integer(sym.PC_SOFT)));
        lexer.addPointcutKeyword("staticinitialization", new LexerAction_c(new Integer(sym.PC_STATICINITIALIZATION)));
        lexer.addPointcutKeyword("target", new LexerAction_c(new Integer(sym.PC_TARGET)));
        lexer.addPointcutKeyword("this", new LexerAction_c(new Integer(sym.PC_THIS)));
        lexer.addPointcutKeyword("throwing", new LexerAction_c(new Integer(sym.PC_THROWING)));
        lexer.addPointcutKeyword("warning", new LexerAction_c(new Integer(sym.PC_WARNING)));
        lexer.addPointcutKeyword("within", new LexerAction_c(new Integer(sym.PC_WITHIN)));
        lexer.addPointcutKeyword("withincode", new LexerAction_c(new Integer(sym.PC_WITHINCODE)));

        /* ASPECTJ reserved words - these cannot be used as the names of any identifiers within
           aspect code. */
        lexer.addAspectJContextKeyword("after", new LexerAction_c(new Integer(sym.AFTER),
                    new Integer(lexer.pointcut_state())));
        lexer.addAspectJContextKeyword("around", new LexerAction_c(new Integer(sym.AROUND),
                    new Integer(lexer.pointcut_state())));
        lexer.addAspectJContextKeyword("before", new LexerAction_c(new Integer(sym.BEFORE),
                    new Integer(lexer.pointcut_state())));
        lexer.addAspectJContextKeyword("issingleton", new LexerAction_c(new Integer(sym.ISSINGLETON)));
        lexer.addAspectJContextKeyword("percflow", new PerClauseLexerAction_c(new Integer(sym.PERCFLOW),
                    new Integer(lexer.pointcut_state())));
        lexer.addAspectJContextKeyword("percflowbelow", new PerClauseLexerAction_c(
                    new Integer(sym.PERCFLOWBELOW), new Integer(lexer.pointcut_state())));
        lexer.addAspectJContextKeyword("pertarget", new PerClauseLexerAction_c(new Integer(sym.PERTARGET),
                    new Integer(lexer.pointcut_state())));
        lexer.addAspectJContextKeyword("perthis", new PerClauseLexerAction_c(new Integer(sym.PERTHIS),
                    new Integer(lexer.pointcut_state())));
        lexer.addAspectJContextKeyword("proceed", new LexerAction_c(new Integer(sym.PROCEED)));

        lexer.addAspectJKeyword("if", new LexerAction_c(new Integer(sym.IF)));
        lexer.addPointcutIfExprKeyword("if", new LexerAction_c(new Integer(sym.IF)));
        lexer.addAspectJKeyword("this", new LexerAction_c(new Integer(sym.THIS)));
        lexer.addPointcutIfExprKeyword("this", new LexerAction_c(new Integer(sym.THIS)));
        lexer.addPointcutIfExprKeyword("aspect", new LexerAction_c(new Integer(sym.ASPECT),
                    new Integer(lexer.aspectj_state())));
        lexer.addJavaKeyword("pointcut", new LexerAction_c(new Integer(sym.POINTCUT),
                    new Integer(lexer.pointcut_state())));
        lexer.addAspectJKeyword("pointcut", new LexerAction_c(new Integer(sym.POINTCUT),
                    new Integer(lexer.pointcut_state())));
        lexer.addPointcutIfExprKeyword("pointcut", new LexerAction_c(new Integer(sym.POINTCUT),
                    new Integer(lexer.pointcut_state())));

    }

}
