
public refines class PatternMatcher {

    public boolean matchesObject(NamePattern pat) {
	PCNode object = hierarchy.getClass(Scene.v().getSootClass("java.lang.Object"));
	return matchesName(pat, object);
    }

    protected boolean containsMethod(SootClass sc, String name, List parameterTypes, Type returnType, boolean isStatic) {
	// FIXME: This is rather inefficient!
	try {
	    if (sc.declaresMethod(name, parameterTypes, returnType)) {
		return true;
	    }
	    Scene.v().makeMethodRef(sc, name, parameterTypes, returnType, isStatic).resolve();
	    return true;
	} catch (Exception e) {
	    return false;
	}
    }

    boolean containsField(SootClass sc, String name, Type type, boolean isStatic) {
	// FIXME: This is rather inefficient!
	try {
	    if (sc.declaresField(name, type)) {
		return true;
	    }
	    Scene.v().makeFieldRef(sc, name, type, isStatic).resolve();
	    return true;
	} catch (Exception e) {
	    return false;
	}
    }

    boolean matchesClassWithMethodMatching(ClassnamePatternExpr pattern, SootClass base_sc, String name, List parameterTypes, Type returnType, boolean isStatic) {
	Set seen = new HashSet();
	LinkedList worklist = new LinkedList();
	worklist.add(base_sc);
	while (!worklist.isEmpty()) {
	    SootClass sc = (SootClass)worklist.removeFirst();
	    if (!seen.contains(sc)) {
		if (matchesClass(pattern, sc) && containsMethod(sc, name, parameterTypes, returnType, isStatic)) {
		    return true;
		}
		seen.add(sc);
		if (sc.hasSuperclass()) {
		    worklist.add(sc.getSuperclass());
		}
		Iterator ini = sc.getInterfaces().iterator();
		while (ini.hasNext()) {
		    SootClass in = (SootClass)ini.next();
		    worklist.add(in);
		}
	    }
	}
	return false;
    }

    boolean matchesClassSubclassOf(ClassnamePatternExpr pattern, SootClass base_sc, SootClass super_sc) {
	FastHierarchy h = Scene.v().getFastHierarchy();
	Set seen = new HashSet();
	LinkedList worklist = new LinkedList();
	worklist.add(base_sc);
	while (!worklist.isEmpty()) {
	    SootClass sc = (SootClass)worklist.removeFirst();
	    if (!seen.contains(sc)) {
		if (h.canStoreType(sc.getType(), super_sc.getType()) && matchesClass(pattern, sc)) {
		    return true;
		}
		seen.add(sc);
		if (sc.hasSuperclass()) {
		    worklist.add(sc.getSuperclass());
		}
		Iterator ini = sc.getInterfaces().iterator();
		while (ini.hasNext()) {
		    SootClass in = (SootClass)ini.next();
		    worklist.add(in);
		}
	    }
	}
	return false;
    }

    boolean matchesType(TypePatternExpr pattern, String type) {
	// System.out.println("Matching type pattern "+pattern+" on "+pattern.position()+" to "+type+"...");
	int dim = 0;
	while (type.endsWith("[]")) {
	    dim++;
	    type = type.substring(0, type.length()-2);
	}
	if (prim_types.contains(type)) {
	    if (dim == 0) {
		return pattern.matchesPrimitive(this, type);
	    } else {
		return pattern.matchesPrimitiveArray(this, type, dim);
	    }
	} else {
		
	    PCNode cl_node = hierarchy.getClass(Scene.v().getSootClass(type));
	    if (dim == 0) {
		return pattern.matchesClass(this, cl_node);
	    } else {
		return pattern.matchesClassArray(this, cl_node, dim);
	    }
	}
    }

    boolean matchesModifiers(List /*<ModifierPattern>*/ modps, int mods) {
	Iterator modpi = modps.iterator();
	while (modpi.hasNext()) {
	    ModifierPattern modp = (ModifierPattern)modpi.next();
	    int pmods = AbcFactory.modifiers(modp.modifier());
	    if (modp.positive()) {
		if ((pmods & mods) == 0) return false;
	    } else {
		if ((pmods & mods) != 0) return false;
	    }
	}
	return true;
    }

    boolean matchesFormals(List/*<FormalPattern>*/ fpats, List/*<soot.Type>*/ ftypes) {
	return matchesFormals(fpats, 0, ftypes, 0);
    }

    protected boolean matchesFormals(List/*<FormalPattern>*/ fpats, int fpi, List/*<soot.Type>*/ ftypes, int fti) {
	// FIXME: BRUTE FORCE MATCHING. DO SOMETHING MORE CLEVER!
	while (fpi < fpats.size()) {
	    FormalPattern fp = (FormalPattern)fpats.get(fpi);
	    if (fp instanceof TypeFormalPattern) {
		if (fti >= ftypes.size()) return false;
		TypePatternExpr pat = ((TypeFormalPattern)fp).expr();
		soot.Type ft = (soot.Type)ftypes.get(fti);
		if (!matchesType(pat, ft.toString())) return false;
	    } else {
		// DOTDOT
		while (fti <= ftypes.size()) {
		    if (matchesFormals(fpats, fpi+1, ftypes, fti)) return true;
		    fti++;
		}
		return false;
	    }
	    fpi++;
	    fti++;
	}
	return fti == ftypes.size();
    }

    boolean matchesThrows(List/*<ThrowsPattern>*/ tpats, List/*<soot.SootClass>*/ excs) {
	Iterator tpati = tpats.iterator();
	while (tpati.hasNext()) {
	    ThrowsPattern tpat = (ThrowsPattern)tpati.next();
	    ClassnamePatternExpr cnp = tpat.type();
	    boolean matches = false;
	    Iterator ei = excs.iterator();
	    while (ei.hasNext() && !matches) {
		soot.SootClass e = (soot.SootClass)ei.next();
		if (matchesClass(cnp, e)) matches = true;
	    }
	    if (matches != tpat.positive()) return false;
	}
	return true;
    }

    public abc.weaving.aspectinfo.TypePattern makeAITypePattern(TypePatternExpr pattern) {
	return new AITypePattern(pattern);
    }

    public abc.weaving.aspectinfo.MethodPattern makeAIMethodPattern(MethodPattern pattern) {
	return new AIMethodPattern(pattern);
    }

    public abc.weaving.aspectinfo.FieldPattern makeAIFieldPattern(FieldPattern pattern) {
	return new AIFieldPattern(pattern);
    }

    public abc.weaving.aspectinfo.ConstructorPattern makeAIConstructorPattern(ConstructorPattern pattern) {
	// Assumes that name is <init>
	return new AIConstructorPattern(pattern);
    }

}
