

import polyglot.types.ClassType;
import polyglot.types.ConstructorInstance;
import polyglot.types.MethodInstance;
import polyglot.types.FieldInstance;
import polyglot.types.ReferenceType;
import polyglot.types.Flags;
import polyglot.types.Type;
import polyglot.types.MemberInstance;
import polyglot.types.SemanticException;

import polyglot.frontend.Source;

import polyglot.ast.Typed;

import abc.aspectj.ast.AdviceSpec;

import soot.javaToJimple.jj.types.JjTypeSystem;

import polyglot.types.Context;

public refines interface AJTypeSystem {
    
	public ClassType JoinPoint() ;
	public ClassType JoinPointStaticPart();

    public MethodInstance adviceInstance(Position pos,
                            ReferenceType container, Flags flags,
                            Type returnType, String name, List argTypes,
                            List excTypes, String signature);

	public MethodInstance pointcutInstance(Position pos,
											ReferenceType container, Flags flags, 
											Type returnType, String name,
											List argTypes, List excTypes);

	public void checkPointcutFlags(Flags f) throws SemanticException;	
	
	public PointcutInstance_c findPointCutNamed(ClassType ct, String name) throws SemanticException; 		              
}
