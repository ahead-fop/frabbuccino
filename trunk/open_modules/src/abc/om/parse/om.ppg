/* abc - The AspectBench Compiler
 * Copyright (C) 2004 Julian Tibble
 * Copyright (C) 2005 Neil Ongkingco
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

//include "../../../../src/abc/aspectj/parse/aspectj.ppg"
include "../../eaj/parse/eaj.ppg"

package abc.om.parse;

import abc.om.ast.*;
import abc.om.*;

import polyglot.ext.jl.parse.Name;

parser Grm extends abc.aspectj.parse.Grm {:
    public final OpenModNodeFactory nf;

    public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        nf = (OpenModNodeFactory) n;
    }
:};


// ------- new tokens ------------------------------

terminal Token MODULE;
terminal Token CONSTRAIN;
terminal Token FRIEND;
terminal Token OPEN;
terminal Token EXPOSE;
terminal Token ADVERTISE;
terminal Token ROOT;
terminal Token TO;
//experimental, openclasses (ITDs)
terminal Token OPENCLASS;
terminal Token FIELD;
terminal Token METHOD;
terminal Token PARENT;

// ------- new non-terminals -----------------------
non terminal List/*ModuleDecl*/ module_declaration_list;
non terminal ModuleDecl module_declaration;
non terminal ModuleBody module_body;
non terminal List/*<OMModMember,OMSigMember,OpenClassMember>*/ module_member_list;
non terminal List /*<ModMember>*/ module_member;
non terminal SigMember signature_member;
non terminal List /*<ModMemberAspect>*/ aspect_list;
non terminal ModMember aspect_name;
non terminal NamePattern aspect_name_pattern;
non terminal SimpleNamePattern aspect_simple_name_pattern;
non terminal List /*ModMemberModule*/ module_list;
non terminal ClassnamePatternExpr to_clause;

//open class nonterms
non terminal OpenClassMember open_class_member;
non terminal OpenClassFlags open_class_flag;
non terminal OpenClassFlags open_class_flag_list;

start with goal;

/* ---------------------------------------------------------------- */
/*             EXTENSIONS TO BASE JAVA RULES                        */
/* ---------------------------------------------------------------- */
/* add the possiblility of declaring a module to type_declaration */
extend compilation_unit ::=   // add new toplevel node
     module_declaration_list:ml
       {: 
       		//set package name to null, emptylist for imports
       		RESULT = parser.nf.SourceFile(parser.pos(ml), 
       									null,
       									new TypedList(new LinkedList(), 
       											Import.class, 
       											false),
       									ml);
       :}
  ;
  
module_declaration_list ::= module_declaration:m
       {: 
       		TypedList __modulelist__ = new TypedList(new LinkedList(), 
       												TopLevelDecl.class, 
       												false);
       		//insert a dummy aspect between the module declaration and
       		//the source file
       		DummyAspectDecl_c __dummyAspect = 
       			(DummyAspectDecl_c) 
       				parser.nf.DummyAspectDecl(parser.pos(m), m.name());
       		__dummyAspect.addModule(m);
       		__modulelist__.add(__dummyAspect); 
       		RESULT = __modulelist__;
       :}
       |
       module_declaration_list:ml module_declaration:m
       {:
       Grm.parserTrace("OM module_declaration_list");
       		//Should also insert dummy aspect here, as module_decl returns a
       		//ModuleDecl, and not a dummy aspect
       		DummyAspectDecl_c __dummyAspect = 
       			(DummyAspectDecl_c) 
       				parser.nf.DummyAspectDecl(parser.pos(m), m.name());
       		__dummyAspect.addModule(m);
			RESULT = ml;
			RESULT.add(__dummyAspect);
       :}
;
/* ---------------------------------------------------------------- */
/*                      OPENMOD RULES                               */
/* ---------------------------------------------------------------- */
module_declaration ::= 
	MODULE:m IDENTIFIER:n module_body:mb
	{:
		Grm.parserTrace("OM Module declaration");
		RESULT = parser.nf.ModuleDecl(parser.pos(m,mb), 
			n.getIdentifier(), 
			mb, 
			parser.pos(n),
			false);
	:}
	|
	ROOT:r MODULE:m IDENTIFIER:n module_body:mb
	{:
		Grm.parserTrace("OM protected Module declaration");
		RESULT = parser.nf.ModuleDecl(parser.pos(r,mb), 
			n.getIdentifier(), 
			mb, 
			parser.pos(n),
			true);
	:}
;

module_body ::=
	//no module members
	LBRACE:lb
	RBRACE:rb
	{:
		Grm.parserTrace("OM Module body");
		List mm = new LinkedList(); //may contain both signature and members
		RESULT = parser.nf.ModuleBody(parser.pos(lb, rb), mm);
	:}
	|
	LBRACE:lb
		module_member_list:mm
	RBRACE:rb
	{:
		Grm.parserTrace("OM Module body");
		RESULT = parser.nf.ModuleBody(parser.pos(lb, rb), mm);
	:}
;

module_member_list ::=
	module_member:m
	{:
		Grm.parserTrace("OM first member of module_member_list");
		RESULT = new LinkedList();
		RESULT.addAll(m);
	:}
	| 
	module_member_list:ml module_member:m
	{:
		Grm.parserTrace("OM module_member_list");
		RESULT = ml;
		RESULT.addAll(m);
	:}
	|
	signature_member:sm 
	{:
		Grm.parserTrace("OM first member of signature_member_list");
		RESULT = new LinkedList();
		RESULT.add(sm);
	:}
	| 
	module_member_list:sl signature_member:sm
	{:
		Grm.parserTrace("OM signature_member_list");
		RESULT = sl;
		RESULT.add(sm);
	:}	
	|
	open_class_member:oc
	{:
		RESULT = new LinkedList();
		RESULT.add(oc);
	:}
	|
	module_member_list:ocl open_class_member:oc
	{:
		RESULT = ocl;
		RESULT.add(oc);
	:}
;

module_member ::=
	CLASS:c classname_pattern_expr:cn SEMICOLON:sc
	{:
		Grm.parserTrace("OM module_member: class");
		RESULT = new TypedList(new LinkedList(), ModMember.class, false);
		RESULT.add(parser.nf.ModMemberClass(parser.pos(c,sc), cn));
	:}
	|
	FRIEND:a aspect_list:al SEMICOLON:sc
	{:
		Grm.parserTrace("OM module_member: aspect");
		RESULT = new TypedList(new LinkedList(), ModMember.class, false);
		RESULT.addAll(al); //could have just used al, but it was a ModMemberAspect typedlist
	:}
	|
	OPEN:m module_list:ml SEMICOLON:sc
	{:
		Grm.parserTrace("OM module_member: module");
		RESULT = new TypedList(new LinkedList(), ModMember.class, false);
		for (Iterator iter = ml.iterator(); iter.hasNext(); ) {
			ModMemberModule module = (ModMemberModule)iter.next();
			module.setIsConstrained(false);
		}
		RESULT.addAll(ml);
	:}
	|
	CONSTRAIN:c module_list:ml SEMICOLON:sc
	{:
		Grm.parserTrace("OM module_member: module");
		RESULT = new TypedList(new LinkedList(), ModMember.class, false);
		for (Iterator iter = ml.iterator(); iter.hasNext(); ) {
			ModMemberModule module = (ModMemberModule)iter.next();
			module.setIsConstrained(true);
		}
		RESULT.addAll(ml);
	:}
;

signature_member ::= 
	EXPOSE to_clause:toc COLON pointcut_expr:pc SEMICOLON
	{:
		RESULT = parser.nf.SigMemberExposeDecl(((Node)pc).position(), pc, false, toc);
	:}
	| PRIVATE EXPOSE to_clause:toc COLON pointcut_expr:pc SEMICOLON
	{:
		RESULT = parser.nf.SigMemberExposeDecl(((Node)pc).position(), pc, true, toc);
	:}
	| ADVERTISE:m to_clause:toc COLON pointcut_expr:pc SEMICOLON
	{:
		RESULT = parser.nf.SigMemberAdvertiseDecl(parser.pos(m,pc), pc, false, toc);
	:}
	| PRIVATE ADVERTISE:m to_clause:toc COLON pointcut_expr:pc SEMICOLON
	{:
		RESULT = parser.nf.SigMemberAdvertiseDecl(parser.pos(m,pc), pc, true, toc);
	:}
;

to_clause ::=
	{:
		RESULT = parser.nf.CPEUniversal(AbcExtension.generated);
	:}
	| TO classname_pattern_expr:cpe
	{:
		RESULT = cpe;
	:}
;

module_list ::=
	IDENTIFIER: mn 
	{:
		RESULT = new LinkedList();
		RESULT.add(parser.nf.ModMemberModule(mn.getPosition(), mn.getIdentifier()));
	:}
	|
	module_list:ml COMMA IDENTIFIER:mn
	{:
		RESULT = ml;
		RESULT.add(parser.nf.ModMemberModule(mn.getPosition(), mn.getIdentifier()));
	:}
;

aspect_list ::=
	aspect_name: an
	{:
		Grm.parserTrace("OM aspect_list: single");
		RESULT = new TypedList(new LinkedList(), ModMemberAspect.class, false);
		RESULT.add(an); 
	:}
	|
	aspect_list:al COMMA aspect_name:an2
	{:
		Grm.parserTrace("OM aspect_list");
		RESULT = al;
		RESULT.add(an2); 
	:}	
;

aspect_name ::= 
	aspect_name_pattern:an
	{:
		Grm.parserTrace("OM module_member: aspect");
		Position currPos = ((NamePattern)an).position();
		RESULT = parser.nf.ModMemberAspect(currPos, parser.nf.CPEName(currPos, an));
	:}
;

//Name patterns for aspects (does not allow stars). Adapeted from aspectj ppg
aspect_name_pattern ::=
      aspect_simple_name_pattern:a
        {: RESULT = a;
        :}
   |  name_pattern:a DOT aspect_simple_name_pattern:b
        {: RESULT = parser.nf.DotNamePattern(parser.pos(a,b),a,b);
        :}
   |  name_pattern:a PC_DOTDOT:d aspect_simple_name_pattern:b
        {: DotDotNamePattern ddnp = parser.nf.DotDotNamePattern(parser.pos(a,d),a);
           RESULT = parser.nf.DotNamePattern(parser.pos(a,b),ddnp,b);
        :}
   ;

aspect_simple_name_pattern ::= 
   IDENTIFIER:a
        {: Grm.parserTrace("name_pattern is identifer: " + a);
           RESULT = parser.nf.SimpleNamePattern(parser.pos(a),a.getIdentifier());
        :}
   ;
   

//open class syntax

open_class_member ::=
	OPENCLASS:oc open_class_flag_list:flags COLON classname_pattern_expr:cpe SEMICOLON:sc
	{:
		RESULT = parser.nf.OpenClassMember(flags, cpe, parser.pos(oc,sc));
	:}
;

open_class_flag ::= 
	FIELD
	{:
		RESULT = new OpenClassFlags();
		RESULT.setField(true);
	:}
	|
	PARENT
	{:
		RESULT = new OpenClassFlags();
		RESULT.setParent(true);
	:}
	|
	METHOD
	{:
		RESULT = new OpenClassFlags();
		RESULT.setMethod(true);
	:}
;

open_class_flag_list ::=
	{:
		//default is all allowed
		RESULT = new OpenClassFlags(true, true, true);
	:}
	|
	open_class_flag:flag
	{:
		RESULT = flag;
	:}
	|
	open_class_flag_list:flags COMMA open_class_flag:endflag
	{:
		RESULT = flags.disjoin(endflag);
	:}
;